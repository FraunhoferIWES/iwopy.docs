Search.setIndex({"alltitles": {"API": [[290, null]], "Attributes": [[5, null], [11, null], [13, null], [19, null], [25, null], [35, null], [43, null], [61, null], [77, null], [86, null], [92, null], [129, null], [134, null], [139, null], [172, null], [176, null], [182, null], [187, null], [192, null], [197, null], [233, null], [242, null], [246, null]], "Citation": [[301, null]], "Contents": [[303, "contents"]], "Contributing": [[303, "contributing"]], "Developers": [[304, "developers"], [304, "id2"]], "Electrostatic potential minimization": [[305, null]], "Example": [[219, null], [220, null], [232, null]], "Examples": [[302, null]], "History": [[0, null]], "Installation": [[304, null]], "Installation via conda": [[304, "installation-via-conda"]], "Installation via pip": [[304, "installation-via-pip"]], "Journal paper": [[301, "journal-paper"]], "Mixed problems": [[306, null]], "Multi objective geometric chain": [[307, null]], "Parameters": [[2, null], [6, null], [8, null], [12, null], [14, null], [16, null], [17, null], [20, null], [21, null], [22, null], [24, null], [26, null], [28, null], [29, null], [30, null], [31, null], [33, null], [34, null], [36, null], [39, null], [42, null], [44, null], [45, null], [46, null], [47, null], [49, null], [50, null], [51, null], [55, null], [56, null], [62, null], [63, null], [64, null], [65, null], [66, null], [67, null], [68, null], [70, null], [73, null], [74, null], [78, null], [79, null], [80, null], [81, null], [82, null], [87, null], [88, null], [89, null], [91, null], [94, null], [95, null], [96, null], [97, null], [98, null], [99, null], [100, null], [101, null], [103, null], [104, null], [105, null], [106, null], [107, null], [110, null], [122, null], [123, null], [124, null], [128, null], [130, null], [133, null], [135, null], [136, null], [138, null], [140, null], [142, null], [159, null], [173, null], [174, null], [177, null], [178, null], [179, null], [181, null], [183, null], [184, null], [186, null], [188, null], [189, null], [191, null], [193, null], [194, null], [196, null], [199, null], [200, null], [201, null], [202, null], [203, null], [204, null], [205, null], [206, null], [207, null], [208, null], [209, null], [210, null], [211, null], [212, null], [213, null], [214, null], [215, null], [216, null], [217, null], [218, null], [219, "parameters"], [220, "parameters"], [221, null], [222, null], [227, null], [228, null], [229, null], [230, null], [231, null], [232, "parameters"], [234, null], [235, null], [236, null], [237, null], [238, null], [239, null], [240, null], [241, null], [243, null], [244, null], [245, null], [247, null], [248, null], [249, null], [250, null], [251, null], [254, null], [262, null], [263, null], [264, null], [265, null], [266, null], [267, null], [271, null], [272, null], [273, null], [274, null], [275, null], [276, null], [281, null]], "Paramters": [[38, null]], "Preparation (optional)": [[304, "preparation-optional"]], "Public members": [[1, null], [5, "public-members"], [7, null], [11, "public-members"], [13, "public-members"], [19, "public-members"], [25, "public-members"], [35, "public-members"], [40, null], [43, "public-members"], [61, "public-members"], [77, "public-members"], [86, "public-members"], [92, "public-members"], [127, null], [129, "public-members"], [132, null], [134, "public-members"], [139, "public-members"], [160, null], [164, null], [172, "public-members"], [176, "public-members"], [182, "public-members"], [187, "public-members"], [192, "public-members"], [197, "public-members"], [233, "public-members"], [242, "public-members"], [246, "public-members"], [261, null], [270, null], [280, null]], "Requirements": [[304, "requirements"]], "Returns": [[15, null], [18, null], [22, "returns"], [23, null], [28, "returns"], [29, "returns"], [30, "returns"], [31, "returns"], [32, null], [38, "returns"], [39, "returns"], [41, null], [45, "returns"], [46, "returns"], [47, "returns"], [48, null], [49, "returns"], [50, "returns"], [52, null], [53, null], [54, null], [57, null], [58, null], [59, null], [60, null], [63, "returns"], [65, "returns"], [66, "returns"], [67, "returns"], [68, "returns"], [69, null], [71, null], [72, null], [73, "returns"], [74, "returns"], [75, null], [76, null], [79, "returns"], [80, "returns"], [81, "returns"], [83, null], [84, null], [85, null], [91, "returns"], [97, "returns"], [98, "returns"], [99, "returns"], [100, "returns"], [101, "returns"], [102, null], [103, "returns"], [104, "returns"], [105, "returns"], [106, "returns"], [107, "returns"], [108, null], [109, null], [111, null], [112, null], [113, null], [114, null], [115, null], [116, null], [117, null], [118, null], [119, null], [120, null], [121, null], [123, "returns"], [124, "returns"], [125, null], [126, null], [133, "returns"], [138, "returns"], [142, "returns"], [174, "returns"], [178, "returns"], [181, "returns"], [184, "returns"], [191, "returns"], [196, "returns"], [200, "returns"], [201, "returns"], [202, "returns"], [203, "returns"], [204, "returns"], [205, "returns"], [206, "returns"], [207, "returns"], [208, "returns"], [209, "returns"], [210, "returns"], [211, "returns"], [212, "returns"], [213, "returns"], [214, "returns"], [215, "returns"], [216, "returns"], [217, "returns"], [218, "returns"], [219, "returns"], [220, "returns"], [221, "returns"], [222, "returns"], [223, null], [224, null], [225, null], [226, null], [228, "returns"], [229, "returns"], [230, "returns"], [231, "returns"], [235, "returns"], [236, "returns"], [237, "returns"], [238, "returns"], [239, "returns"], [240, "returns"], [244, "returns"], [248, "returns"], [249, "returns"], [250, "returns"], [251, "returns"], [252, null], [253, null], [255, null], [256, null], [257, null], [258, null], [259, null], [260, null], [263, "returns"], [264, "returns"], [265, "returns"], [266, "returns"], [267, "returns"], [268, null], [269, null], [272, "returns"], [273, "returns"], [274, "returns"], [275, "returns"], [276, "returns"], [277, null], [278, null], [279, null], [282, null], [283, null], [284, null], [285, null], [286, null], [287, null], [288, null], [289, null]], "Simple function minimization": [[308, null]], "Standard users": [[304, "standard-users"], [304, "id1"]], "Support": [[303, "support"]], "Testing": [[309, null]], "Virtual Python environment": [[304, "virtual-python-environment"]], "Welcome to IWOPY": [[303, null]], "Wind farm optimizations": [[310, null]], "iwopy": [[297, null]], "iwopy.benchmarks": [[291, null]], "iwopy.benchmarks.branin": [[291, "iwopy-benchmarks-branin"]], "iwopy.benchmarks.rosenbrock": [[291, "iwopy-benchmarks-rosenbrock"]], "iwopy.core": [[292, null]], "iwopy.interfaces": [[293, null]], "iwopy.interfaces.pygmo": [[294, null]], "iwopy.interfaces.pymoo": [[295, null]], "iwopy.interfaces.scipy": [[296, null]], "iwopy.optimizers": [[298, null]], "iwopy.utils": [[299, null]], "iwopy.wrappers": [[300, null]], "v0.0.11-alpha": [[0, "v0-0-11-alpha"]], "v0.0.12-alpha": [[0, "v0-0-12-alpha"]], "v0.0.13-alpha": [[0, "v0-0-13-alpha"]], "v0.0.14-alpha": [[0, "v0-0-14-alpha"]], "v0.0.15-alpha": [[0, "v0-0-15-alpha"]], "v0.1.0-alpha": [[0, "v0-1-0-alpha"]], "v0.1.1-alpha": [[0, "v0-1-1-alpha"]], "v0.1.2-alpha": [[0, "v0-1-2-alpha"]], "v0.1.3-alpha": [[0, "v0-1-3-alpha"]], "v0.1.4-alpha": [[0, "v0-1-4-alpha"]], "v0.1.5-alpha": [[0, "v0-1-5-alpha"]], "v0.1.6-alpha": [[0, "v0-1-6-alpha"]], "v0.1.7-beta": [[0, "v0-1-7-beta"]], "v0.1.8-beta": [[0, "v0-1-8-beta"]], "v0.1.9-beta": [[0, "v0-1-9-beta"]], "v0.2-beta": [[0, "v0-2-beta"]], "v0.2.1": [[0, "v0-2-1"]], "v0.2.2": [[0, "v0-2-2"]], "v0.2.3": [[0, "v0-2-3"]], "v0.3": [[0, "v0-3"]], "v0.3.1": [[0, "v0-3-1"]]}, "docurls": ["CHANGELOG.html", "_iwopy/benchmarks/branin/BraninObjective.html", "_iwopy/benchmarks/branin/BraninObjective.__init__.html", "_iwopy/benchmarks/branin/BraninObjective.f.html", "_iwopy/benchmarks/branin/BraninObjective.g.html", "_iwopy/benchmarks/branin/BraninProblem.html", "_iwopy/benchmarks/branin/BraninProblem.__init__.html", "_iwopy/benchmarks/rosenbrock/RosenbrockObjective.html", "_iwopy/benchmarks/rosenbrock/RosenbrockObjective.__init__.html", "_iwopy/benchmarks/rosenbrock/RosenbrockObjective.f.html", "_iwopy/benchmarks/rosenbrock/RosenbrockObjective.g.html", "_iwopy/benchmarks/rosenbrock/RosenbrockProblem.html", "_iwopy/benchmarks/rosenbrock/RosenbrockProblem.__init__.html", "_iwopy/core/Base.html", "_iwopy/core/Base.__init__.html", "_iwopy/core/Base.__str__.html", "_iwopy/core/Base.finalize.html", "_iwopy/core/Base.initialize.html", "_iwopy/core/Base.initialized.html", "_iwopy/core/Constraint.html", "_iwopy/core/Constraint.__init__.html", "_iwopy/core/Constraint.check_individual.html", "_iwopy/core/Constraint.check_population.html", "_iwopy/core/Constraint.get_bounds.html", "_iwopy/core/Constraint.new.html", "_iwopy/core/Memory.html", "_iwopy/core/Memory.__init__.html", "_iwopy/core/Memory.clear.html", "_iwopy/core/Memory.found_individual.html", "_iwopy/core/Memory.found_population.html", "_iwopy/core/Memory.lookup_individual.html", "_iwopy/core/Memory.lookup_population.html", "_iwopy/core/Memory.size.html", "_iwopy/core/Memory.store_individual.html", "_iwopy/core/Memory.store_population.html", "_iwopy/core/MultiObjOptResults.html", "_iwopy/core/MultiObjOptResults.__init__.html", "_iwopy/core/MultiObjOptResults.__str__.html", "_iwopy/core/MultiObjOptResults.find_pareto_objmix.html", "_iwopy/core/MultiObjOptResults.plot_pareto.html", "_iwopy/core/Objective.html", "_iwopy/core/Objective.maximize.html", "_iwopy/core/Objective.new.html", "_iwopy/core/OptFunction.html", "_iwopy/core/OptFunction.__init__.html", "_iwopy/core/OptFunction.ana_deriv.html", "_iwopy/core/OptFunction.calc_individual.html", "_iwopy/core/OptFunction.calc_population.html", "_iwopy/core/OptFunction.component_names.html", "_iwopy/core/OptFunction.finalize_individual.html", "_iwopy/core/OptFunction.finalize_population.html", "_iwopy/core/OptFunction.initialize.html", "_iwopy/core/OptFunction.n_components.html", "_iwopy/core/OptFunction.n_vars_float.html", "_iwopy/core/OptFunction.n_vars_int.html", "_iwopy/core/OptFunction.rename_vars_float.html", "_iwopy/core/OptFunction.rename_vars_int.html", "_iwopy/core/OptFunction.var_names_float.html", "_iwopy/core/OptFunction.var_names_int.html", "_iwopy/core/OptFunction.vardeps_float.html", "_iwopy/core/OptFunction.vardeps_int.html", "_iwopy/core/OptFunctionList.html", "_iwopy/core/OptFunctionList.__init__.html", "_iwopy/core/OptFunctionList.ana_deriv.html", "_iwopy/core/OptFunctionList.append.html", "_iwopy/core/OptFunctionList.calc_individual.html", "_iwopy/core/OptFunctionList.calc_population.html", "_iwopy/core/OptFunctionList.finalize_individual.html", "_iwopy/core/OptFunctionList.finalize_population.html", "_iwopy/core/OptFunctionList.functions.html", "_iwopy/core/OptFunctionList.initialize.html", "_iwopy/core/OptFunctionList.n_components.html", "_iwopy/core/OptFunctionList.n_functions.html", "_iwopy/core/OptFunctionList.split_individual.html", "_iwopy/core/OptFunctionList.split_population.html", "_iwopy/core/OptFunctionList.vardeps_float.html", "_iwopy/core/OptFunctionList.vardeps_int.html", "_iwopy/core/OptFunctionSubset.html", "_iwopy/core/OptFunctionSubset.__init__.html", "_iwopy/core/OptFunctionSubset.ana_deriv.html", "_iwopy/core/OptFunctionSubset.calc_individual.html", "_iwopy/core/OptFunctionSubset.calc_population.html", "_iwopy/core/OptFunctionSubset.initialize.html", "_iwopy/core/OptFunctionSubset.n_components.html", "_iwopy/core/OptFunctionSubset.vardeps_float.html", "_iwopy/core/OptFunctionSubset.vardeps_int.html", "_iwopy/core/Optimizer.html", "_iwopy/core/Optimizer.__init__.html", "_iwopy/core/Optimizer.finalize.html", "_iwopy/core/Optimizer.new.html", "_iwopy/core/Optimizer.print_info.html", "_iwopy/core/Optimizer.solve.html", "_iwopy/core/Problem.html", "_iwopy/core/Problem.INT_INF.html", "_iwopy/core/Problem.__init__.html", "_iwopy/core/Problem.add_constraint.html", "_iwopy/core/Problem.add_objective.html", "_iwopy/core/Problem.apply_individual.html", "_iwopy/core/Problem.apply_population.html", "_iwopy/core/Problem.calc_gradients.html", "_iwopy/core/Problem.check_constraints_individual.html", "_iwopy/core/Problem.check_constraints_population.html", "_iwopy/core/Problem.constraints_tol.html", "_iwopy/core/Problem.evaluate_individual.html", "_iwopy/core/Problem.evaluate_population.html", "_iwopy/core/Problem.finalize_individual.html", "_iwopy/core/Problem.finalize_population.html", "_iwopy/core/Problem.get_gradients.html", "_iwopy/core/Problem.initial_values_float.html", "_iwopy/core/Problem.initial_values_int.html", "_iwopy/core/Problem.initialize.html", "_iwopy/core/Problem.max_values_constraints.html", "_iwopy/core/Problem.max_values_float.html", "_iwopy/core/Problem.max_values_int.html", "_iwopy/core/Problem.maximize_objs.html", "_iwopy/core/Problem.min_values_constraints.html", "_iwopy/core/Problem.min_values_float.html", "_iwopy/core/Problem.min_values_int.html", "_iwopy/core/Problem.n_constraints.html", "_iwopy/core/Problem.n_objectives.html", "_iwopy/core/Problem.n_vars_float.html", "_iwopy/core/Problem.n_vars_int.html", "_iwopy/core/Problem.new.html", "_iwopy/core/Problem.prob_res_einsum_individual.html", "_iwopy/core/Problem.prob_res_einsum_population.html", "_iwopy/core/Problem.var_names_float.html", "_iwopy/core/Problem.var_names_int.html", "_iwopy/core/ProblemDefaultFunc.html", "_iwopy/core/ProblemDefaultFunc.__init__.html", "_iwopy/core/SingleObjOptResults.html", "_iwopy/core/SingleObjOptResults.__init__.html", "_iwopy/core/SingleObjOptResults.__str__.html", "_iwopy/interfaces/pygmo/AlgoFactory.html", "_iwopy/interfaces/pygmo/AlgoFactory.new.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.__init__.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.initialize.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.print_info.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.solve.html", "_iwopy/interfaces/pygmo/UDP.html", "_iwopy/interfaces/pygmo/UDP.__init__.html", "_iwopy/interfaces/pygmo/UDP.batch_fitness.html", "_iwopy/interfaces/pygmo/UDP.finalize.html", "_iwopy/interfaces/pygmo/UDP.fitness.html", "_iwopy/interfaces/pygmo/UDP.get_bounds.html", "_iwopy/interfaces/pygmo/UDP.get_extra_info.html", "_iwopy/interfaces/pygmo/UDP.get_name.html", "_iwopy/interfaces/pygmo/UDP.get_nec.html", "_iwopy/interfaces/pygmo/UDP.get_nic.html", "_iwopy/interfaces/pygmo/UDP.get_nix.html", "_iwopy/interfaces/pygmo/UDP.get_nobj.html", "_iwopy/interfaces/pygmo/UDP.gradient.html", "_iwopy/interfaces/pygmo/UDP.gradient_sparsity.html", "_iwopy/interfaces/pygmo/UDP.has_batch_fitness.html", "_iwopy/interfaces/pygmo/UDP.has_gradient.html", "_iwopy/interfaces/pygmo/UDP.has_gradient_sparsity.html", "_iwopy/interfaces/pygmo/UDP.has_hessians.html", "_iwopy/interfaces/pygmo/UDP.has_hessians_sparsity.html", "_iwopy/interfaces/pygmo/UDP.has_set_seed.html", "_iwopy/interfaces/pygmo/load.html", "_iwopy/interfaces/pymoo/DefaultCallbackTemplate.html", "_iwopy/interfaces/pymoo/DefaultCallbackTemplate.__init__.html", "_iwopy/interfaces/pymoo/DefaultCallbackTemplate.get_class.html", "_iwopy/interfaces/pymoo/DefaultCallbackTemplate.notify.html", "_iwopy/interfaces/pymoo/Factory.html", "_iwopy/interfaces/pymoo/Factory.__init__.html", "_iwopy/interfaces/pymoo/Factory.get_algorithm.html", "_iwopy/interfaces/pymoo/Factory.get_crossover.html", "_iwopy/interfaces/pymoo/Factory.get_mutation.html", "_iwopy/interfaces/pymoo/Factory.get_sampling.html", "_iwopy/interfaces/pymoo/Factory.get_termination.html", "_iwopy/interfaces/pymoo/Factory.print.html", "_iwopy/interfaces/pymoo/MultiObjProblemTemplate.html", "_iwopy/interfaces/pymoo/MultiObjProblemTemplate.__init__.html", "_iwopy/interfaces/pymoo/MultiObjProblemTemplate.finalize.html", "_iwopy/interfaces/pymoo/MultiObjProblemTemplate.get_class.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.__init__.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.get_figure_f.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.initialize.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.print_info.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.solve.html", "_iwopy/interfaces/pymoo/SingleObjProblemTemplate.html", "_iwopy/interfaces/pymoo/SingleObjProblemTemplate.__init__.html", "_iwopy/interfaces/pymoo/SingleObjProblemTemplate.finalize.html", "_iwopy/interfaces/pymoo/SingleObjProblemTemplate.get_class.html", "_iwopy/interfaces/pymoo/load.html", "_iwopy/interfaces/scipy/Optimizer_scipy.html", "_iwopy/interfaces/scipy/Optimizer_scipy.__init__.html", "_iwopy/interfaces/scipy/Optimizer_scipy.initialize.html", "_iwopy/interfaces/scipy/Optimizer_scipy.print_info.html", "_iwopy/interfaces/scipy/Optimizer_scipy.solve.html", "_iwopy/optimizers/GG.html", "_iwopy/optimizers/GG.__init__.html", "_iwopy/optimizers/GG.initialize.html", "_iwopy/optimizers/GG.print_info.html", "_iwopy/optimizers/GG.solve.html", "_iwopy/utils/RegularDiscretizationGrid.html", "_iwopy/utils/RegularDiscretizationGrid.INT_INF.html", "_iwopy/utils/RegularDiscretizationGrid.__init__.html", "_iwopy/utils/RegularDiscretizationGrid.all_gridpoints.html", "_iwopy/utils/RegularDiscretizationGrid.apply_tol.html", "_iwopy/utils/RegularDiscretizationGrid.apply_tols.html", "_iwopy/utils/RegularDiscretizationGrid.deriv_coeffs.html", "_iwopy/utils/RegularDiscretizationGrid.deriv_coeffs_gridpoints.html", "_iwopy/utils/RegularDiscretizationGrid.find_grid_inds.html", "_iwopy/utils/RegularDiscretizationGrid.find_gridpoints.html", "_iwopy/utils/RegularDiscretizationGrid.find_ingrid.html", "_iwopy/utils/RegularDiscretizationGrid.get_cell.html", "_iwopy/utils/RegularDiscretizationGrid.get_cells.html", "_iwopy/utils/RegularDiscretizationGrid.get_corner.html", "_iwopy/utils/RegularDiscretizationGrid.get_corners.html", "_iwopy/utils/RegularDiscretizationGrid.gp2i.html", "_iwopy/utils/RegularDiscretizationGrid.gpts2inds.html", "_iwopy/utils/RegularDiscretizationGrid.grad_coeffs.html", "_iwopy/utils/RegularDiscretizationGrid.grad_coeffs_gridpoints.html", "_iwopy/utils/RegularDiscretizationGrid.i2gp.html", "_iwopy/utils/RegularDiscretizationGrid.in_grid.html", "_iwopy/utils/RegularDiscretizationGrid.inds2gpts.html", "_iwopy/utils/RegularDiscretizationGrid.interpolation_coeffs_point.html", "_iwopy/utils/RegularDiscretizationGrid.interpolation_coeffs_points.html", "_iwopy/utils/RegularDiscretizationGrid.is_gridi.html", "_iwopy/utils/RegularDiscretizationGrid.is_gridpoint.html", "_iwopy/utils/RegularDiscretizationGrid.n_dims.html", "_iwopy/utils/RegularDiscretizationGrid.n_points.html", "_iwopy/utils/RegularDiscretizationGrid.p_max.html", "_iwopy/utils/RegularDiscretizationGrid.p_min.html", "_iwopy/utils/RegularDiscretizationGrid.print_info.html", "_iwopy/utils/all_subclasses.html", "_iwopy/utils/import_module.html", "_iwopy/utils/new_cls.html", "_iwopy/utils/new_instance.html", "_iwopy/utils/suppress_stdout.html", "_iwopy/wrappers/DiscretizeRegGrid.html", "_iwopy/wrappers/DiscretizeRegGrid.__init__.html", "_iwopy/wrappers/DiscretizeRegGrid.apply_individual.html", "_iwopy/wrappers/DiscretizeRegGrid.apply_population.html", "_iwopy/wrappers/DiscretizeRegGrid.evaluate_individual.html", "_iwopy/wrappers/DiscretizeRegGrid.evaluate_population.html", "_iwopy/wrappers/DiscretizeRegGrid.finalize_individual.html", "_iwopy/wrappers/DiscretizeRegGrid.finalize_population.html", "_iwopy/wrappers/DiscretizeRegGrid.initialize.html", "_iwopy/wrappers/LocalFD.html", "_iwopy/wrappers/LocalFD.__init__.html", "_iwopy/wrappers/LocalFD.calc_gradients.html", "_iwopy/wrappers/LocalFD.initialize.html", "_iwopy/wrappers/ProblemWrapper.html", "_iwopy/wrappers/ProblemWrapper.__init__.html", "_iwopy/wrappers/ProblemWrapper.apply_individual.html", "_iwopy/wrappers/ProblemWrapper.apply_population.html", "_iwopy/wrappers/ProblemWrapper.finalize_individual.html", "_iwopy/wrappers/ProblemWrapper.finalize_population.html", "_iwopy/wrappers/ProblemWrapper.initial_values_float.html", "_iwopy/wrappers/ProblemWrapper.initial_values_int.html", "_iwopy/wrappers/ProblemWrapper.initialize.html", "_iwopy/wrappers/ProblemWrapper.max_values_float.html", "_iwopy/wrappers/ProblemWrapper.max_values_int.html", "_iwopy/wrappers/ProblemWrapper.min_values_float.html", "_iwopy/wrappers/ProblemWrapper.min_values_int.html", "_iwopy/wrappers/ProblemWrapper.var_names_float.html", "_iwopy/wrappers/ProblemWrapper.var_names_int.html", "_iwopy/wrappers/SimpleConstraint.html", "_iwopy/wrappers/SimpleConstraint.__init__.html", "_iwopy/wrappers/SimpleConstraint.ana_deriv.html", "_iwopy/wrappers/SimpleConstraint.calc_individual.html", "_iwopy/wrappers/SimpleConstraint.calc_population.html", "_iwopy/wrappers/SimpleConstraint.f.html", "_iwopy/wrappers/SimpleConstraint.g.html", "_iwopy/wrappers/SimpleConstraint.get_bounds.html", "_iwopy/wrappers/SimpleConstraint.n_components.html", "_iwopy/wrappers/SimpleObjective.html", "_iwopy/wrappers/SimpleObjective.__init__.html", "_iwopy/wrappers/SimpleObjective.ana_deriv.html", "_iwopy/wrappers/SimpleObjective.calc_individual.html", "_iwopy/wrappers/SimpleObjective.calc_population.html", "_iwopy/wrappers/SimpleObjective.f.html", "_iwopy/wrappers/SimpleObjective.g.html", "_iwopy/wrappers/SimpleObjective.has_ana_derivs.html", "_iwopy/wrappers/SimpleObjective.maximize.html", "_iwopy/wrappers/SimpleObjective.n_components.html", "_iwopy/wrappers/SimpleProblem.html", "_iwopy/wrappers/SimpleProblem.__init__.html", "_iwopy/wrappers/SimpleProblem.initial_values_float.html", "_iwopy/wrappers/SimpleProblem.initial_values_int.html", "_iwopy/wrappers/SimpleProblem.max_values_float.html", "_iwopy/wrappers/SimpleProblem.max_values_int.html", "_iwopy/wrappers/SimpleProblem.min_values_float.html", "_iwopy/wrappers/SimpleProblem.min_values_int.html", "_iwopy/wrappers/SimpleProblem.var_names_float.html", "_iwopy/wrappers/SimpleProblem.var_names_int.html", "api.html", "api_benchmarks.html", "api_core.html", "api_interfaces.html", "api_interfaces_pygmo.html", "api_interfaces_pymoo.html", "api_interfaces_scipy.html", "api_iwopy.html", "api_optimizers.html", "api_utils.html", "api_wrappers.html", "citation.html", "examples.html", "index.html", "installation.html", "notebooks/electrostatics.html", "notebooks/mixed.html", "notebooks/multi_obj_chain.html", "notebooks/simple_function.html", "testing.html", "wind_farm_layout.html"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "indexentries": {}, "objects": {"iwopy.benchmarks.branin": [[1, 0, 1, "", "BraninObjective", "The objective function for the Branin problem."], [5, 0, 1, "", "BraninProblem", "Problem definition of benchmark function Branin."]], "iwopy.benchmarks.branin.BraninObjective": [[2, 1, 1, "", "__init__", "Constructor"], [3, 1, 1, "", "f", "The Branin function f(x, y)"], [4, 1, 1, "", "g", "The derivative of the Branin function"]], "iwopy.benchmarks.branin.BraninObjective.__init__": [[2, 2, 2, "", "ana_deriv", "Constructor"], [2, 2, 2, "", "name", "Constructor"], [2, 2, 2, "", "problem", "Constructor"]], "iwopy.benchmarks.branin.BraninObjective.f": [[3, 2, 2, "", "x", "The Branin function f(x, y)"], [3, 2, 2, "", "y", "The Branin function f(x, y)"]], "iwopy.benchmarks.branin.BraninObjective.g": [[4, 2, 2, "", "components", "The derivative of the Branin function"], [4, 2, 2, "", "var", "The derivative of the Branin function"], [4, 2, 2, "", "x", "The derivative of the Branin function"], [4, 2, 2, "", "y", "The derivative of the Branin function"]], "iwopy.benchmarks.branin.BraninProblem": [[6, 1, 1, "", "__init__", "Constructor"]], "iwopy.benchmarks.branin.BraninProblem.__init__": [[6, 2, 2, "", "ana_deriv", "Constructor"], [6, 2, 2, "", "initial_values", "Constructor"], [6, 2, 2, "", "name", "Constructor"]], "iwopy.benchmarks.rosenbrock": [[7, 0, 1, "", "RosenbrockObjective", "The Rosenbrock function is defined as"], [11, 0, 1, "", "RosenbrockProblem", "Problem definition of benchmark function Rosenbrock."]], "iwopy.benchmarks.rosenbrock.RosenbrockObjective": [[8, 1, 1, "", "__init__", "Construtor"], [9, 1, 1, "", "f", "The Rosenbrock function f(x, y)"], [10, 1, 1, "", "g", "The derivative of the Rosenbrock function"]], "iwopy.benchmarks.rosenbrock.RosenbrockObjective.__init__": [[8, 2, 2, "", "ana_deriv", "Construtor"], [8, 2, 2, "", "name", "Construtor"], [8, 2, 2, "", "pars", "Construtor"], [8, 2, 2, "", "problem", "Construtor"]], "iwopy.benchmarks.rosenbrock.RosenbrockObjective.f": [[9, 2, 2, "", "x", "The Rosenbrock function f(x, y)"], [9, 2, 2, "", "y", "The Rosenbrock function f(x, y)"]], "iwopy.benchmarks.rosenbrock.RosenbrockObjective.g": [[10, 2, 2, "", "components", "The derivative of the Rosenbrock function"], [10, 2, 2, "", "var", "The derivative of the Rosenbrock function"], [10, 2, 2, "", "x", "The derivative of the Rosenbrock function"], [10, 2, 2, "", "y", "The derivative of the Rosenbrock function"]], "iwopy.benchmarks.rosenbrock.RosenbrockProblem": [[12, 1, 1, "", "__init__", "Constructor"]], "iwopy.benchmarks.rosenbrock.RosenbrockProblem.__init__": [[12, 2, 2, "", "ana_deriv", "Constructor"], [12, 2, 2, "", "initial", "Constructor"], [12, 2, 2, "", "lower", "Constructor"], [12, 2, 2, "", "name", "Constructor"], [12, 2, 2, "", "upper", "Constructor"]], "iwopy.core": [[13, 0, 1, "", "Base", "Generic base for various iwopy objects."], [19, 0, 1, "", "Constraint", "Abstract base class for optimization constraints."], [25, 0, 1, "", "Memory", "Storage for function results."], [35, 0, 1, "", "MultiObjOptResults", "Container for optimization results for multi objective problems."], [40, 0, 1, "", "Objective", "Abstract base class for objective functions."], [43, 0, 1, "", "OptFunction", "Abstract base class for functions that calculate scalars based on a problem."], [61, 0, 1, "", "OptFunctionList", "A list of functions."], [77, 0, 1, "", "OptFunctionSubset", "A function composed of a subset of a function's components."], [86, 0, 1, "", "Optimizer", "Abstract base class for optimization solvers."], [92, 0, 1, "", "Problem", "Abstract base class for optimization problems."], [127, 0, 1, "", "ProblemDefaultFunc", "The default function of a problem for gradient calculations."], [129, 0, 1, "", "SingleObjOptResults", "Container for optimization results for single objective problems."]], "iwopy.core.Base": [[14, 1, 1, "", "__init__", "Constructor"], [15, 1, 1, "", "__str__", "Get info string"], [16, 1, 1, "", "finalize", "Finalize the object."], [17, 1, 1, "", "initialize", "Initialize the object."], [18, 3, 1, "", "initialized", "Flag for finished initialization"]], "iwopy.core.Base.__init__": [[14, 2, 2, "", "name", "Constructor"]], "iwopy.core.Base.finalize": [[16, 2, 2, "", "verbosity", "Finalize the object."]], "iwopy.core.Base.initialize": [[17, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.core.Constraint": [[20, 1, 1, "", "__init__", "Constructor"], [21, 1, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [22, 1, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [23, 1, 1, "", "get_bounds", "Returns the bounds for all components."], [24, 1, 1, "", "new", "Run-time constraint factory."]], "iwopy.core.Constraint.__init__": [[20, 2, 2, "", "args", "Constructor"], [20, 2, 2, "", "kwargs", "Constructor"], [20, 2, 2, "", "tol", "Constructor"]], "iwopy.core.Constraint.check_individual": [[21, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given individual."], [21, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given individual."]], "iwopy.core.Constraint.check_population": [[22, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given population."], [22, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given population."]], "iwopy.core.Constraint.new": [[24, 2, 2, "", "args", "Run-time constraint factory."], [24, 2, 2, "", "constraint_type", "Run-time constraint factory."], [24, 2, 2, "", "kwargs", "Run-time constraint factory."]], "iwopy.core.Memory": [[26, 1, 1, "", "__init__", "Constructor"], [27, 1, 1, "", "clear", "Clears the memory"], [28, 1, 1, "", "found_individual", "Check if entry is found in memory."], [29, 1, 1, "", "found_population", "Check if entry is found in memory."], [30, 1, 1, "", "lookup_individual", "Lookup results from memory."], [31, 1, 1, "", "lookup_population", "Lookup results from memory."], [32, 3, 1, "", "size", "The number of elements currently stored in memory"], [33, 1, 1, "", "store_individual", "Store objs and cons data."], [34, 1, 1, "", "store_population", "Store objs and cons data of a population."]], "iwopy.core.Memory.__init__": [[26, 2, 2, "", "keyf", "Constructor"], [26, 2, 2, "", "size", "Constructor"]], "iwopy.core.Memory.found_individual": [[28, 2, 2, "", "vars_float", "Check if entry is found in memory."], [28, 2, 2, "", "vars_int", "Check if entry is found in memory."]], "iwopy.core.Memory.found_population": [[29, 2, 2, "", "vars_float", "Check if entry is found in memory."], [29, 2, 2, "", "vars_int", "Check if entry is found in memory."]], "iwopy.core.Memory.lookup_individual": [[30, 2, 2, "", "vars_float", "Lookup results from memory."], [30, 2, 2, "", "vars_int", "Lookup results from memory."]], "iwopy.core.Memory.lookup_population": [[31, 2, 2, "", "target", "Lookup results from memory."], [31, 2, 2, "", "vars_float", "Lookup results from memory."], [31, 2, 2, "", "vars_int", "Lookup results from memory."]], "iwopy.core.Memory.store_individual": [[33, 2, 2, "", "cons", "Store objs and cons data."], [33, 2, 2, "", "objs", "Store objs and cons data."], [33, 2, 2, "", "vars_float", "Store objs and cons data."], [33, 2, 2, "", "vars_int", "Store objs and cons data."]], "iwopy.core.Memory.store_population": [[34, 2, 2, "", "cons", "Store objs and cons data of a population."], [34, 2, 2, "", "objs", "Store objs and cons data of a population."], [34, 2, 2, "", "vars_float", "Store objs and cons data of a population."], [34, 2, 2, "", "vars_int", "Store objs and cons data of a population."]], "iwopy.core.MultiObjOptResults": [[36, 1, 1, "", "__init__", "Constructor"], [37, 1, 1, "", "__str__", "Return str(self)."], [38, 1, 1, "", "find_pareto_objmix", "Find the point on the pareto front that approximates best the given weights of objectives"], [39, 1, 1, "", "plot_pareto", "Get figure that shows the pareto front"]], "iwopy.core.MultiObjOptResults.__init__": [[36, 2, 2, "", "cons", "Constructor"], [36, 2, 2, "", "objs", "Constructor"], [36, 2, 2, "", "problem", "Constructor"], [36, 2, 2, "", "problem_results", "Constructor"], [36, 2, 2, "", "success", "Constructor"], [36, 2, 2, "", "vars_float", "Constructor"], [36, 2, 2, "", "vars_int", "Constructor"]], "iwopy.core.MultiObjOptResults.find_pareto_objmix": [[38, 2, 2, "", "max", "Find the point on the pareto front that approximates best the given weights of objectives"], [38, 2, 2, "", "obj_weights", "Find the point on the pareto front that approximates best the given weights of objectives"]], "iwopy.core.MultiObjOptResults.plot_pareto": [[39, 2, 2, "", "ax", "Get figure that shows the pareto front"], [39, 2, 2, "", "color_ival", "Get figure that shows the pareto front"], [39, 2, 2, "", "color_val", "Get figure that shows the pareto front"], [39, 2, 2, "", "figsize", "Get figure that shows the pareto front"], [39, 2, 2, "", "obj_0", "Get figure that shows the pareto front"], [39, 2, 2, "", "obj_1", "Get figure that shows the pareto front"], [39, 2, 2, "", "s", "Get figure that shows the pareto front"], [39, 2, 2, "", "title", "Get figure that shows the pareto front"]], "iwopy.core.Objective": [[41, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [42, 1, 1, "", "new", "Run-time objective function factory."]], "iwopy.core.Objective.new": [[42, 2, 2, "", "args", "Run-time objective function factory."], [42, 2, 2, "", "kwargs", "Run-time objective function factory."], [42, 2, 2, "", "objective_type", "Run-time objective function factory."]], "iwopy.core.OptFunction": [[44, 1, 1, "", "__init__", "Constructor"], [45, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [46, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [47, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [48, 3, 1, "", "component_names", "The names of the components"], [49, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [50, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [51, 1, 1, "", "initialize", "Initialize the object."], [52, 1, 1, "", "n_components", "Returns the number of components of the function."], [53, 3, 1, "", "n_vars_float", "The number of float variables"], [54, 3, 1, "", "n_vars_int", "The number of int variables"], [55, 1, 1, "", "rename_vars_float", "Rename float variables."], [56, 1, 1, "", "rename_vars_int", "Rename integer variables."], [57, 3, 1, "", "var_names_float", "The names of the float variables"], [58, 3, 1, "", "var_names_int", "The names of the integer variables"], [59, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [60, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "iwopy.core.OptFunction.__init__": [[44, 2, 2, "", "cnames", "Constructor"], [44, 2, 2, "", "n_vars_float", "Constructor"], [44, 2, 2, "", "n_vars_int", "Constructor"], [44, 2, 2, "", "name", "Constructor"], [44, 2, 2, "", "problem", "Constructor"], [44, 2, 2, "", "vnames_float", "Constructor"], [44, 2, 2, "", "vnames_int", "Constructor"]], "iwopy.core.OptFunction.ana_deriv": [[45, 2, 2, "", "components", "Calculates the analytic derivative, if possible."], [45, 2, 2, "", "var", "Calculates the analytic derivative, if possible."], [45, 2, 2, "", "vars_float", "Calculates the analytic derivative, if possible."], [45, 2, 2, "", "vars_int", "Calculates the analytic derivative, if possible."]], "iwopy.core.OptFunction.calc_individual": [[46, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [46, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [46, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [46, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "iwopy.core.OptFunction.calc_population": [[47, 2, 2, "", "components", "Calculate values for all individuals of a population."], [47, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [47, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [47, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "iwopy.core.OptFunction.finalize_individual": [[49, 2, 2, "", "problem_results", "Finalization, given the champion data."], [49, 2, 2, "", "vars_float", "Finalization, given the champion data."], [49, 2, 2, "", "vars_int", "Finalization, given the champion data."], [49, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "iwopy.core.OptFunction.finalize_population": [[50, 2, 2, "", "problem_results", "Finalization, given the final population data."], [50, 2, 2, "", "vars_float", "Finalization, given the final population data."], [50, 2, 2, "", "vars_int", "Finalization, given the final population data."], [50, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "iwopy.core.OptFunction.initialize": [[51, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.core.OptFunction.rename_vars_float": [[55, 2, 2, "", "varmap", "Rename float variables."]], "iwopy.core.OptFunction.rename_vars_int": [[56, 2, 2, "", "varmap", "Rename integer variables."]], "iwopy.core.OptFunctionList": [[62, 1, 1, "", "__init__", "Constructor"], [63, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [64, 1, 1, "", "append", "Adds a function to the list."], [65, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [66, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [67, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [68, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [69, 3, 1, "", "functions", "The list of added funtions"], [70, 1, 1, "", "initialize", "Initialize the object."], [71, 1, 1, "", "n_components", "Returns the number of components of the function."], [72, 3, 1, "", "n_functions", "The number of added functions"], [73, 1, 1, "", "split_individual", "Splits result values or other data into individual function data."], [74, 1, 1, "", "split_population", "Splits result values or other data into individual function data."], [75, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [76, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "iwopy.core.OptFunctionList.__init__": [[62, 2, 2, "", "name", "Constructor"], [62, 2, 2, "", "problem", "Constructor"]], "iwopy.core.OptFunctionList.ana_deriv": [[63, 2, 2, "", "components", "Calculates the analytic derivative, if possible."], [63, 2, 2, "", "var", "Calculates the analytic derivative, if possible."], [63, 2, 2, "", "vars_float", "Calculates the analytic derivative, if possible."], [63, 2, 2, "", "vars_int", "Calculates the analytic derivative, if possible."]], "iwopy.core.OptFunctionList.append": [[64, 2, 2, "", "function", "Adds a function to the list."]], "iwopy.core.OptFunctionList.calc_individual": [[65, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [65, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [65, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [65, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "iwopy.core.OptFunctionList.calc_population": [[66, 2, 2, "", "components", "Calculate values for all individuals of a population."], [66, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [66, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [66, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "iwopy.core.OptFunctionList.finalize_individual": [[67, 2, 2, "", "problem_results", "Finalization, given the champion data."], [67, 2, 2, "", "vars_float", "Finalization, given the champion data."], [67, 2, 2, "", "vars_int", "Finalization, given the champion data."], [67, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "iwopy.core.OptFunctionList.finalize_population": [[68, 2, 2, "", "problem_results", "Finalization, given the final population data."], [68, 2, 2, "", "vars_float", "Finalization, given the final population data."], [68, 2, 2, "", "vars_int", "Finalization, given the final population data."], [68, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "iwopy.core.OptFunctionList.initialize": [[70, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.core.OptFunctionList.split_individual": [[73, 2, 2, "", "data", "Splits result values or other data into individual function data."]], "iwopy.core.OptFunctionList.split_population": [[74, 2, 2, "", "data", "Splits result values or other data into individual function data."]], "iwopy.core.OptFunctionSubset": [[78, 1, 1, "", "__init__", "Constructor"], [79, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [80, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [81, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [82, 1, 1, "", "initialize", "Initialize the object."], [83, 1, 1, "", "n_components", "Returns the number of components of the function."], [84, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [85, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "iwopy.core.OptFunctionSubset.__init__": [[78, 2, 2, "", "function", "Constructor"], [78, 2, 2, "", "name", "Constructor"], [78, 2, 2, "", "subset", "Constructor"]], "iwopy.core.OptFunctionSubset.ana_deriv": [[79, 2, 2, "", "components", "Calculates the analytic derivative, if possible."], [79, 2, 2, "", "var", "Calculates the analytic derivative, if possible."], [79, 2, 2, "", "vars_float", "Calculates the analytic derivative, if possible."], [79, 2, 2, "", "vars_int", "Calculates the analytic derivative, if possible."]], "iwopy.core.OptFunctionSubset.calc_individual": [[80, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [80, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [80, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [80, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "iwopy.core.OptFunctionSubset.calc_population": [[81, 2, 2, "", "components", "Calculate values for all individuals of a population."], [81, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [81, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [81, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "iwopy.core.OptFunctionSubset.initialize": [[82, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.core.Optimizer": [[87, 1, 1, "", "__init__", "Constructor"], [88, 1, 1, "", "finalize", "This function may be called after finishing the optimization."], [89, 1, 1, "", "new", "Run-time optimizer factory."], [90, 1, 1, "", "print_info", "Print solver info, called before solving"], [91, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.core.Optimizer.__init__": [[87, 2, 2, "", "name", "Constructor"], [87, 2, 2, "", "problem", "Constructor"]], "iwopy.core.Optimizer.finalize": [[88, 2, 2, "", "opt_results", "This function may be called after finishing the optimization."], [88, 2, 2, "", "verbosity", "This function may be called after finishing the optimization."]], "iwopy.core.Optimizer.new": [[89, 2, 2, "", "args", "Run-time optimizer factory."], [89, 2, 2, "", "kwargs", "Run-time optimizer factory."], [89, 2, 2, "", "optimizer_type", "Run-time optimizer factory."]], "iwopy.core.Optimizer.solve": [[91, 2, 2, "", "verbosity", "Run the optimization solver."]], "iwopy.core.Problem": [[93, 4, 1, "", "INT_INF", ""], [94, 1, 1, "", "__init__", "Constructor"], [95, 1, 1, "", "add_constraint", "Add a constraint to the problem."], [96, 1, 1, "", "add_objective", "Add an objective to the problem."], [97, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [98, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [99, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [100, 1, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [101, 1, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [102, 3, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [103, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [104, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [105, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [106, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [107, 1, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [108, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [109, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [110, 1, 1, "", "initialize", "Initialize the problem."], [111, 3, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [112, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [113, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [114, 3, 1, "", "maximize_objs", "Flags for objective maximization"], [115, 3, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [116, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [117, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [118, 3, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [119, 3, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [120, 3, 1, "", "n_vars_float", "The number of float variables"], [121, 3, 1, "", "n_vars_int", "The number of int variables"], [122, 1, 1, "", "new", "Run-time problem factory."], [123, 1, 1, "", "prob_res_einsum_individual", "Calculate the einsum of problem results"], [124, 1, 1, "", "prob_res_einsum_population", "Calculate the einsum of problem results"], [125, 1, 1, "", "var_names_float", "The names of float variables."], [126, 1, 1, "", "var_names_int", "The names of integer variables."]], "iwopy.core.Problem.__init__": [[94, 2, 2, "", "mem_keyf", "Constructor"], [94, 2, 2, "", "mem_size", "Constructor"], [94, 2, 2, "", "name", "Constructor"]], "iwopy.core.Problem.add_constraint": [[95, 2, 2, "", "constraint", "Add a constraint to the problem."], [95, 2, 2, "", "varmap_float", "Add a constraint to the problem."], [95, 2, 2, "", "varmap_int", "Add a constraint to the problem."], [95, 2, 2, "", "verbosity", "Add a constraint to the problem."]], "iwopy.core.Problem.add_objective": [[96, 2, 2, "", "objective", "Add an objective to the problem."], [96, 2, 2, "", "varmap_float", "Add an objective to the problem."], [96, 2, 2, "", "varmap_int", "Add an objective to the problem."], [96, 2, 2, "", "verbosity", "Add an objective to the problem."]], "iwopy.core.Problem.apply_individual": [[97, 2, 2, "", "vars_float", "Apply new variables to the problem."], [97, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "iwopy.core.Problem.apply_population": [[98, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [98, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "iwopy.core.Problem.calc_gradients": [[99, 2, 2, "", "components", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [99, 2, 2, "", "func", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [99, 2, 2, "", "fvars", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [99, 2, 2, "", "ivars", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [99, 2, 2, "", "pop", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [99, 2, 2, "", "vars_float", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [99, 2, 2, "", "vars_int", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [99, 2, 2, "", "verbosity", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [99, 2, 2, "", "vrs", "The actual gradient calculation, not to be called directly (call get_gradients instead)."]], "iwopy.core.Problem.check_constraints_individual": [[100, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given individual."], [100, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given individual."]], "iwopy.core.Problem.check_constraints_population": [[101, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given population."], [101, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given population."]], "iwopy.core.Problem.evaluate_individual": [[103, 2, 2, "", "ret_prob_res", "Evaluate a single individual of the problem."], [103, 2, 2, "", "vars_float", "Evaluate a single individual of the problem."], [103, 2, 2, "", "vars_int", "Evaluate a single individual of the problem."]], "iwopy.core.Problem.evaluate_population": [[104, 2, 2, "", "ret_prob_res", "Evaluate all individuals of a population."], [104, 2, 2, "", "vars_float", "Evaluate all individuals of a population."], [104, 2, 2, "", "vars_int", "Evaluate all individuals of a population."]], "iwopy.core.Problem.finalize_individual": [[105, 2, 2, "", "vars_float", "Finalization, given the champion data."], [105, 2, 2, "", "vars_int", "Finalization, given the champion data."], [105, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "iwopy.core.Problem.finalize_population": [[106, 2, 2, "", "vars_float", "Finalization, given the final population data."], [106, 2, 2, "", "vars_int", "Finalization, given the final population data."], [106, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "iwopy.core.Problem.get_gradients": [[107, 2, 2, "", "components", "Obtain gradients of a function that is linked to the problem."], [107, 2, 2, "", "func", "Obtain gradients of a function that is linked to the problem."], [107, 2, 2, "", "pop", "Obtain gradients of a function that is linked to the problem."], [107, 2, 2, "", "vars", "Obtain gradients of a function that is linked to the problem."], [107, 2, 2, "", "vars_float", "Obtain gradients of a function that is linked to the problem."], [107, 2, 2, "", "vars_int", "Obtain gradients of a function that is linked to the problem."], [107, 2, 2, "", "verbosity", "Obtain gradients of a function that is linked to the problem."]], "iwopy.core.Problem.initialize": [[110, 2, 2, "", "verbosity", "Initialize the problem."]], "iwopy.core.Problem.new": [[122, 2, 2, "", "args", "Run-time problem factory."], [122, 2, 2, "", "kwargs", "Run-time problem factory."], [122, 2, 2, "", "problem_type", "Run-time problem factory."]], "iwopy.core.Problem.prob_res_einsum_individual": [[123, 2, 2, "", "coeffs", "Calculate the einsum of problem results"], [123, 2, 2, "", "prob_res_list", "Calculate the einsum of problem results"]], "iwopy.core.Problem.prob_res_einsum_population": [[124, 2, 2, "", "coeffs", "Calculate the einsum of problem results"], [124, 2, 2, "", "prob_res_list", "Calculate the einsum of problem results"]], "iwopy.core.ProblemDefaultFunc": [[128, 1, 1, "", "__init__", "Constructor"]], "iwopy.core.ProblemDefaultFunc.__init__": [[128, 2, 2, "", "problem", "Constructor"]], "iwopy.core.SingleObjOptResults": [[130, 1, 1, "", "__init__", "Constructor"], [131, 1, 1, "", "__str__", "Return str(self)."]], "iwopy.core.SingleObjOptResults.__init__": [[130, 2, 2, "", "cons", "Constructor"], [130, 2, 2, "", "objs", "Constructor"], [130, 2, 2, "", "problem", "Constructor"], [130, 2, 2, "", "problem_results", "Constructor"], [130, 2, 2, "", "success", "Constructor"], [130, 2, 2, "", "vars_float", "Constructor"], [130, 2, 2, "", "vars_int", "Constructor"]], "iwopy.interfaces.pygmo": [[132, 0, 1, "", "AlgoFactory", "Creates a pygmo algorithm from parameters"], [134, 0, 1, "", "Optimizer_pygmo", "Interface to the pygmo optimizers for serial runs."], [139, 0, 1, "", "UDP", "Generic Problem to Pygmo UserDefinedProblem adapter"], [159, 5, 1, "", "load", "Loads the pygmo package dynamically"]], "iwopy.interfaces.pygmo.AlgoFactory": [[133, 1, 1, "", "new", "Create a pygmo algo."]], "iwopy.interfaces.pygmo.AlgoFactory.new": [[133, 2, 2, "", "kwargs", "Create a pygmo algo."], [133, 2, 2, "", "pop", "Create a pygmo algo."], [133, 2, 2, "", "type", "Create a pygmo algo."]], "iwopy.interfaces.pygmo.Optimizer_pygmo": [[135, 1, 1, "", "__init__", "Constructor"], [136, 1, 1, "", "initialize", "Initialize the object."], [137, 1, 1, "", "print_info", "Print solver info, called before solving"], [138, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.interfaces.pygmo.Optimizer_pygmo.__init__": [[135, 2, 2, "", "algo_pars", "Constructor"], [135, 2, 2, "", "problem", "Constructor"], [135, 2, 2, "", "problem_pars", "Constructor"], [135, 2, 2, "", "setup_pars", "Constructor"]], "iwopy.interfaces.pygmo.Optimizer_pygmo.initialize": [[136, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.interfaces.pygmo.Optimizer_pygmo.solve": [[138, 2, 2, "", "verbosity", "Run the optimization solver."]], "iwopy.interfaces.pygmo.UDP": [[140, 1, 1, "", "__init__", "Constructor"], [141, 1, 1, "", "batch_fitness", ""], [142, 1, 1, "", "finalize", "Finalize the problem."], [143, 1, 1, "", "fitness", ""], [144, 1, 1, "", "get_bounds", ""], [145, 1, 1, "", "get_extra_info", ""], [146, 1, 1, "", "get_name", ""], [147, 1, 1, "", "get_nec", ""], [148, 1, 1, "", "get_nic", ""], [149, 1, 1, "", "get_nix", ""], [150, 1, 1, "", "get_nobj", ""], [151, 1, 1, "", "gradient", ""], [152, 1, 1, "", "gradient_sparsity", ""], [153, 1, 1, "", "has_batch_fitness", ""], [154, 1, 1, "", "has_gradient", ""], [155, 1, 1, "", "has_gradient_sparsity", ""], [156, 1, 1, "", "has_hessians", ""], [157, 1, 1, "", "has_hessians_sparsity", ""], [158, 1, 1, "", "has_set_seed", ""]], "iwopy.interfaces.pygmo.UDP.__init__": [[140, 2, 2, "", "pop", "Constructor"], [140, 2, 2, "", "problem", "Constructor"], [140, 2, 2, "", "verbosity", "Constructor"]], "iwopy.interfaces.pygmo.UDP.batch_fitness": [[141, 2, 2, "", "dvs", ""]], "iwopy.interfaces.pygmo.UDP.finalize": [[142, 2, 2, "", "pygmo_pop", "Finalize the problem."], [142, 2, 2, "", "verbosity", "Finalize the problem."]], "iwopy.interfaces.pygmo.UDP.fitness": [[143, 2, 2, "", "dv", ""]], "iwopy.interfaces.pygmo.UDP.gradient": [[151, 2, 2, "", "x", ""]], "iwopy.interfaces.pygmo.load": [[159, 2, 2, "", "verbosity", "Loads the pygmo package dynamically"]], "iwopy.interfaces.pymoo": [[160, 0, 1, "", "DefaultCallbackTemplate", "Template for the default callback"], [164, 0, 1, "", "Factory", "A factory for pymoo components"], [172, 0, 1, "", "MultiObjProblemTemplate", "Template for a wrapper around the pymoo problem for a multiple objectives problem."], [176, 0, 1, "", "Optimizer_pymoo", "Interface to the pymoo optimization solver."], [182, 0, 1, "", "SingleObjProblemTemplate", "Template for a wrapper around the pymoo problem for a single objective."], [186, 5, 1, "", "load", "Loads the pymoo package dynamically"]], "iwopy.interfaces.pymoo.DefaultCallbackTemplate": [[161, 1, 1, "", "__init__", "Constructor"], [162, 1, 1, "", "get_class", "Creates the class, dynamically derived from pymoo.Callback"], [163, 1, 1, "", "notify", ""]], "iwopy.interfaces.pymoo.DefaultCallbackTemplate.notify": [[163, 2, 2, "", "algorithm", ""]], "iwopy.interfaces.pymoo.Factory": [[165, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [166, 1, 1, "", "get_algorithm", "Algorithm factory function"], [167, 1, 1, "", "get_crossover", "Crossover factory function"], [168, 1, 1, "", "get_mutation", "Mutation factory function"], [169, 1, 1, "", "get_sampling", "Sampling factory function"], [170, 1, 1, "", "get_termination", "Termination factory function"], [171, 1, 1, "", "print", ""]], "iwopy.interfaces.pymoo.Factory.__init__": [[165, 2, 2, "", "pymoo_problem", "Initialize self.  See help(type(self)) for accurate signature."], [165, 2, 2, "", "verbosity", "Initialize self.  See help(type(self)) for accurate signature."]], "iwopy.interfaces.pymoo.Factory.get_algorithm": [[166, 2, 2, "", "pars", "Algorithm factory function"]], "iwopy.interfaces.pymoo.Factory.get_crossover": [[167, 2, 2, "", "cross", "Crossover factory function"], [167, 2, 2, "", "pars", "Crossover factory function"]], "iwopy.interfaces.pymoo.Factory.get_mutation": [[168, 2, 2, "", "mut", "Mutation factory function"], [168, 2, 2, "", "pars", "Mutation factory function"]], "iwopy.interfaces.pymoo.Factory.get_sampling": [[169, 2, 2, "", "kwargs", "Sampling factory function"], [169, 2, 2, "", "samp_name", "Sampling factory function"]], "iwopy.interfaces.pymoo.Factory.get_termination": [[170, 2, 2, "", "term_pars", "Termination factory function"]], "iwopy.interfaces.pymoo.Factory.print": [[171, 2, 2, "", "args", ""], [171, 2, 2, "", "kwargs", ""]], "iwopy.interfaces.pymoo.MultiObjProblemTemplate": [[173, 1, 1, "", "__init__", "Constructor template, will be overwritten by get_class"], [174, 1, 1, "", "finalize", "Finalize the problem."], [175, 1, 1, "", "get_class", "Creates the class, dynamically derived from SingleObjProblem"]], "iwopy.interfaces.pymoo.MultiObjProblemTemplate.__init__": [[173, 2, 2, "", "problem", "Constructor template, will be overwritten by get_class"], [173, 2, 2, "", "vectorize", "Constructor template, will be overwritten by get_class"]], "iwopy.interfaces.pymoo.MultiObjProblemTemplate.finalize": [[174, 2, 2, "", "pymoo_results", "Finalize the problem."], [174, 2, 2, "", "verbosity", "Finalize the problem."]], "iwopy.interfaces.pymoo.Optimizer_pymoo": [[177, 1, 1, "", "__init__", "Constructor"], [178, 1, 1, "", "get_figure_f", "Create a figure that shows the objective function development during optimization."], [179, 1, 1, "", "initialize", "Initialize the object."], [180, 1, 1, "", "print_info", "Print solver info, called before solving"], [181, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.interfaces.pymoo.Optimizer_pymoo.__init__": [[177, 2, 2, "", "algo_pars", "Constructor"], [177, 2, 2, "", "problem", "Constructor"], [177, 2, 2, "", "problem_pars", "Constructor"], [177, 2, 2, "", "setup_pars", "Constructor"], [177, 2, 2, "", "term_pars", "Constructor"]], "iwopy.interfaces.pymoo.Optimizer_pymoo.get_figure_f": [[178, 2, 2, "", "ax", "Create a figure that shows the objective function development during optimization."], [178, 2, 2, "", "fig", "Create a figure that shows the objective function development during optimization."], [178, 2, 2, "", "kwargs", "Create a figure that shows the objective function development during optimization."], [178, 2, 2, "", "valid_dict", "Create a figure that shows the objective function development during optimization."]], "iwopy.interfaces.pymoo.Optimizer_pymoo.initialize": [[179, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.interfaces.pymoo.Optimizer_pymoo.solve": [[181, 2, 2, "", "callback", "Run the optimization solver."], [181, 2, 2, "", "verbosity", "Run the optimization solver."]], "iwopy.interfaces.pymoo.SingleObjProblemTemplate": [[183, 1, 1, "", "__init__", "Constructor"], [184, 1, 1, "", "finalize", "Finalize the problem."], [185, 1, 1, "", "get_class", "Creates the class, dynamically derived from pymoo.Problem"]], "iwopy.interfaces.pymoo.SingleObjProblemTemplate.__init__": [[183, 2, 2, "", "problem", "Constructor"], [183, 2, 2, "", "vectorize", "Constructor"]], "iwopy.interfaces.pymoo.SingleObjProblemTemplate.finalize": [[184, 2, 2, "", "pymoo_results", "Finalize the problem."], [184, 2, 2, "", "verbosity", "Finalize the problem."]], "iwopy.interfaces.pymoo.load": [[186, 2, 2, "", "verbosity", "Loads the pymoo package dynamically"]], "iwopy.interfaces.scipy": [[187, 0, 1, "", "Optimizer_scipy", "Interface to the scipy optimizers."]], "iwopy.interfaces.scipy.Optimizer_scipy": [[188, 1, 1, "", "__init__", "Constructor"], [189, 1, 1, "", "initialize", "Initialize the object."], [190, 1, 1, "", "print_info", "Print solver info, called before solving"], [191, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.interfaces.scipy.Optimizer_scipy.__init__": [[188, 2, 2, "", "kwargs", "Constructor"], [188, 2, 2, "", "mem_size", "Constructor"], [188, 2, 2, "", "problem", "Constructor"], [188, 2, 2, "", "scipy_pars", "Constructor"]], "iwopy.interfaces.scipy.Optimizer_scipy.initialize": [[189, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.interfaces.scipy.Optimizer_scipy.solve": [[191, 2, 2, "", "verbosity", "Run the optimization solver."]], "iwopy.optimizers": [[192, 0, 1, "", "GG", "Greedy Gradient (GG) optimizer, for local optimum search with constraints."]], "iwopy.optimizers.GG": [[193, 1, 1, "", "__init__", "Constructor"], [194, 1, 1, "", "initialize", "Initialize the object."], [195, 1, 1, "", "print_info", "Print solver info, called before solving"], [196, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.optimizers.GG.__init__": [[193, 2, 2, "", "f_tol", "Constructor"], [193, 2, 2, "", "memory_size", "Constructor"], [193, 2, 2, "", "n_max_steps", "Constructor"], [193, 2, 2, "", "name", "Constructor"], [193, 2, 2, "", "problem", "Constructor"], [193, 2, 2, "", "step_div_factor", "Constructor"], [193, 2, 2, "", "step_max", "Constructor"], [193, 2, 2, "", "step_min", "Constructor"], [193, 2, 2, "", "vectorized", "Constructor"]], "iwopy.optimizers.GG.initialize": [[194, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.optimizers.GG.solve": [[196, 2, 2, "", "verbosity", "Run the optimization solver."]], "iwopy.utils": [[197, 0, 1, "", "RegularDiscretizationGrid", "A lightweight regular grid in n dimensions, without points storage."], [228, 5, 1, "", "all_subclasses", "Searches all classes derived from some base class."], [229, 5, 1, "", "import_module", "Imports a module dynamically."], [230, 5, 1, "", "new_cls", "Run-time class selector."], [231, 5, 1, "", "new_instance", "Run-time factory."], [232, 5, 1, "", "suppress_stdout", "Surpresses print outputs"]], "iwopy.utils.RegularDiscretizationGrid": [[198, 4, 1, "", "INT_INF", ""], [199, 1, 1, "", "__init__", "Constructor"], [200, 1, 1, "", "all_gridpoints", "Checks if all points are on grid."], [201, 1, 1, "", "apply_tol", "Get tolerance corrected point"], [202, 1, 1, "", "apply_tols", "Get tolerance corrected points"], [203, 1, 1, "", "deriv_coeffs", "Calculates the derivative coefficients at points."], [204, 1, 1, "", "deriv_coeffs_gridpoints", "Calculates the derivative coefficients at grid points."], [205, 1, 1, "", "find_grid_inds", "Finds indices that are on grid"], [206, 1, 1, "", "find_gridpoints", "Finds points that are on grid."], [207, 1, 1, "", "find_ingrid", "Finds points that are on grid."], [208, 1, 1, "", "get_cell", "Get the grid cell that contains a point."], [209, 1, 1, "", "get_cells", "Get the grid cells that contain the given points, one cell per point."], [210, 1, 1, "", "get_corner", "Get the lower-left grid corner of a point."], [211, 1, 1, "", "get_corners", "Get the lower-left grid corners of points."], [212, 1, 1, "", "gp2i", "Get grid index of a grid point"], [213, 1, 1, "", "gpts2inds", "Get grid indices of grid points."], [214, 1, 1, "", "grad_coeffs", "Calculates the gradient coefficients at grid points."], [215, 1, 1, "", "grad_coeffs_gridpoints", "Calculates the gradient coefficients at grid points."], [216, 1, 1, "", "i2gp", "Translates grid point indices to grid point."], [217, 1, 1, "", "in_grid", "Checks if a point is located within the grid."], [218, 1, 1, "", "inds2gpts", "Translates grid point indices to grid points."], [219, 1, 1, "", "interpolation_coeffs_point", "Get the interpolation coefficients for a point."], [220, 1, 1, "", "interpolation_coeffs_points", "Get the interpolation coefficients for a set of points."], [221, 1, 1, "", "is_gridi", "Checks if grid indices are valid"], [222, 1, 1, "", "is_gridpoint", "Checks if a point is on grid."], [223, 3, 1, "", "n_dims", "The number of dimensions"], [224, 3, 1, "", "n_points", "The number of points in each dimension"], [225, 3, 1, "", "p_max", "The maximal grid point values"], [226, 3, 1, "", "p_min", "The minimal grid point values"], [227, 1, 1, "", "print_info", "Prints basic information"]], "iwopy.utils.RegularDiscretizationGrid.__init__": [[199, 2, 2, "", "deltas", "Constructor"], [199, 2, 2, "", "digits", "Constructor"], [199, 2, 2, "", "interpolation", "Constructor"], [199, 2, 2, "", "n_steps", "Constructor"], [199, 2, 2, "", "origin", "Constructor"], [199, 2, 2, "", "tol", "Constructor"]], "iwopy.utils.RegularDiscretizationGrid.all_gridpoints": [[200, 2, 2, "", "allow_outer", "Checks if all points are on grid."], [200, 2, 2, "", "pts", "Checks if all points are on grid."]], "iwopy.utils.RegularDiscretizationGrid.apply_tol": [[201, 2, 2, "", "p", "Get tolerance corrected point"]], "iwopy.utils.RegularDiscretizationGrid.apply_tols": [[202, 2, 2, "", "pts", "Get tolerance corrected points"]], "iwopy.utils.RegularDiscretizationGrid.deriv_coeffs": [[203, 2, 2, "", "order", "Calculates the derivative coefficients at points."], [203, 2, 2, "", "orderb", "Calculates the derivative coefficients at points."], [203, 2, 2, "", "pts", "Calculates the derivative coefficients at points."], [203, 2, 2, "", "var", "Calculates the derivative coefficients at points."]], "iwopy.utils.RegularDiscretizationGrid.deriv_coeffs_gridpoints": [[204, 2, 2, "", "inds", "Calculates the derivative coefficients at grid points."], [204, 2, 2, "", "order", "Calculates the derivative coefficients at grid points."], [204, 2, 2, "", "orderb", "Calculates the derivative coefficients at grid points."], [204, 2, 2, "", "var", "Calculates the derivative coefficients at grid points."]], "iwopy.utils.RegularDiscretizationGrid.find_grid_inds": [[205, 2, 2, "", "inds", "Finds indices that are on grid"]], "iwopy.utils.RegularDiscretizationGrid.find_gridpoints": [[206, 2, 2, "", "allow_outer", "Finds points that are on grid."], [206, 2, 2, "", "pts", "Finds points that are on grid."], [206, 2, 2, "", "ret_inds", "Finds points that are on grid."]], "iwopy.utils.RegularDiscretizationGrid.find_ingrid": [[207, 2, 2, "", "pts", "Finds points that are on grid."]], "iwopy.utils.RegularDiscretizationGrid.get_cell": [[208, 2, 2, "", "p", "Get the grid cell that contains a point."]], "iwopy.utils.RegularDiscretizationGrid.get_cells": [[209, 2, 2, "", "pts", "Get the grid cells that contain the given points, one cell per point."]], "iwopy.utils.RegularDiscretizationGrid.get_corner": [[210, 2, 2, "", "allow_outer", "Get the lower-left grid corner of a point."], [210, 2, 2, "", "p", "Get the lower-left grid corner of a point."]], "iwopy.utils.RegularDiscretizationGrid.get_corners": [[211, 2, 2, "", "allow_outer", "Get the lower-left grid corners of points."], [211, 2, 2, "", "pts", "Get the lower-left grid corners of points."]], "iwopy.utils.RegularDiscretizationGrid.gp2i": [[212, 2, 2, "", "allow_outer", "Get grid index of a grid point"], [212, 2, 2, "", "error", "Get grid index of a grid point"], [212, 2, 2, "", "gp", "Get grid index of a grid point"]], "iwopy.utils.RegularDiscretizationGrid.gpts2inds": [[213, 2, 2, "", "allow_outer", "Get grid indices of grid points."], [213, 2, 2, "", "error", "Get grid indices of grid points."], [213, 2, 2, "", "gpts", "Get grid indices of grid points."]], "iwopy.utils.RegularDiscretizationGrid.grad_coeffs": [[214, 2, 2, "", "order", "Calculates the gradient coefficients at grid points."], [214, 2, 2, "", "orderb", "Calculates the gradient coefficients at grid points."], [214, 2, 2, "", "pts", "Calculates the gradient coefficients at grid points."], [214, 2, 2, "", "vars", "Calculates the gradient coefficients at grid points."]], "iwopy.utils.RegularDiscretizationGrid.grad_coeffs_gridpoints": [[215, 2, 2, "", "inds", "Calculates the gradient coefficients at grid points."], [215, 2, 2, "", "order", "Calculates the gradient coefficients at grid points."], [215, 2, 2, "", "orderb", "Calculates the gradient coefficients at grid points."], [215, 2, 2, "", "vars", "Calculates the gradient coefficients at grid points."]], "iwopy.utils.RegularDiscretizationGrid.i2gp": [[216, 2, 2, "", "error", "Translates grid point indices to grid point."], [216, 2, 2, "", "inds", "Translates grid point indices to grid point."]], "iwopy.utils.RegularDiscretizationGrid.in_grid": [[217, 2, 2, "", "p", "Checks if a point is located within the grid."]], "iwopy.utils.RegularDiscretizationGrid.inds2gpts": [[218, 2, 2, "", "inds", "Translates grid point indices to grid points."]], "iwopy.utils.RegularDiscretizationGrid.interpolation_coeffs_point": [[219, 2, 2, "", "p", "Get the interpolation coefficients for a point."]], "iwopy.utils.RegularDiscretizationGrid.interpolation_coeffs_points": [[220, 2, 2, "", "pts", "Get the interpolation coefficients for a set of points."], [220, 2, 2, "", "ret_pmap", "Get the interpolation coefficients for a set of points."]], "iwopy.utils.RegularDiscretizationGrid.is_gridi": [[221, 2, 2, "", "inds", "Checks if grid indices are valid"]], "iwopy.utils.RegularDiscretizationGrid.is_gridpoint": [[222, 2, 2, "", "allow_outer", "Checks if a point is on grid."], [222, 2, 2, "", "p", "Checks if a point is on grid."], [222, 2, 2, "", "ret_inds", "Checks if a point is on grid."]], "iwopy.utils.RegularDiscretizationGrid.print_info": [[227, 2, 2, "", "spaces", "Prints basic information"]], "iwopy.utils.all_subclasses": [[228, 2, 2, "", "cls", "Searches all classes derived from some base class."]], "iwopy.utils.import_module": [[229, 2, 2, "", "hint", "Imports a module dynamically."], [229, 2, 2, "", "name", "Imports a module dynamically."], [229, 2, 2, "", "package", "Imports a module dynamically."]], "iwopy.utils.new_cls": [[230, 2, 2, "", "base_cls", "Run-time class selector."], [230, 2, 2, "", "cls_name", "Run-time class selector."]], "iwopy.utils.new_instance": [[231, 2, 2, "", "args", "Run-time factory."], [231, 2, 2, "", "base_cls", "Run-time factory."], [231, 2, 2, "", "cls_name", "Run-time factory."], [231, 2, 2, "", "kwargs", "Run-time factory."]], "iwopy.utils.suppress_stdout": [[232, 2, 2, "", "silent", "Surpresses print outputs"]], "iwopy.wrappers": [[233, 0, 1, "", "DiscretizeRegGrid", "A wrapper that provides finite distance differentiation on a regular grid for selected or all problem float variables."], [242, 0, 1, "", "LocalFD", "A wrapper that provides finite distance differentiation by local stepwise evaluation."], [246, 0, 1, "", "ProblemWrapper", "Generic abstract problem wrapper class."], [261, 0, 1, "", "SimpleConstraint", "A simple constraint that assumes the same variables as defined by the problem."], [270, 0, 1, "", "SimpleObjective", "A simple objective that assumes the same variables as defined by the problem."], [280, 0, 1, "", "SimpleProblem", "A problem which simply pipes variables to its objectives and constraints."]], "iwopy.wrappers.DiscretizeRegGrid": [[234, 1, 1, "", "__init__", "Constructor"], [235, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [236, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [237, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [238, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [239, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [240, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [241, 1, 1, "", "initialize", "Initialize the problem."]], "iwopy.wrappers.DiscretizeRegGrid.__init__": [[234, 2, 2, "", "base_problem", "Constructor"], [234, 2, 2, "", "deltas", "Constructor"], [234, 2, 2, "", "dpars", "Constructor"], [234, 2, 2, "", "fd_bounds_order", "Constructor"], [234, 2, 2, "", "fd_order", "Constructor"], [234, 2, 2, "", "mem_size", "Constructor"], [234, 2, 2, "", "name", "Constructor"]], "iwopy.wrappers.DiscretizeRegGrid.apply_individual": [[235, 2, 2, "", "vars_float", "Apply new variables to the problem."], [235, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "iwopy.wrappers.DiscretizeRegGrid.apply_population": [[236, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [236, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "iwopy.wrappers.DiscretizeRegGrid.evaluate_individual": [[237, 2, 2, "", "ret_prob_res", "Evaluate a single individual of the problem."], [237, 2, 2, "", "vars_float", "Evaluate a single individual of the problem."], [237, 2, 2, "", "vars_int", "Evaluate a single individual of the problem."]], "iwopy.wrappers.DiscretizeRegGrid.evaluate_population": [[238, 2, 2, "", "ret_prob_res", "Evaluate all individuals of a population."], [238, 2, 2, "", "vars_float", "Evaluate all individuals of a population."], [238, 2, 2, "", "vars_int", "Evaluate all individuals of a population."]], "iwopy.wrappers.DiscretizeRegGrid.finalize_individual": [[239, 2, 2, "", "vars_float", "Finalization, given the champion data."], [239, 2, 2, "", "vars_int", "Finalization, given the champion data."], [239, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "iwopy.wrappers.DiscretizeRegGrid.finalize_population": [[240, 2, 2, "", "vars_float", "Finalization, given the final population data."], [240, 2, 2, "", "vars_int", "Finalization, given the final population data."], [240, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "iwopy.wrappers.DiscretizeRegGrid.initialize": [[241, 2, 2, "", "verbosity", "Initialize the problem."]], "iwopy.wrappers.LocalFD": [[243, 1, 1, "", "__init__", "Constructor"], [244, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [245, 1, 1, "", "initialize", "Initialize the problem."]], "iwopy.wrappers.LocalFD.__init__": [[243, 2, 2, "", "base_problem", "Constructor"], [243, 2, 2, "", "deltas", "Constructor"], [243, 2, 2, "", "fd_bounds_order", "Constructor"], [243, 2, 2, "", "fd_order", "Constructor"], [243, 2, 2, "", "name", "Constructor"]], "iwopy.wrappers.LocalFD.calc_gradients": [[244, 2, 2, "", "components", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [244, 2, 2, "", "func", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [244, 2, 2, "", "fvars", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [244, 2, 2, "", "ivars", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [244, 2, 2, "", "pop", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [244, 2, 2, "", "vars_float", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [244, 2, 2, "", "vars_int", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [244, 2, 2, "", "verbosity", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [244, 2, 2, "", "vrs", "The actual gradient calculation, not to be called directly (call get_gradients instead)."]], "iwopy.wrappers.LocalFD.initialize": [[245, 2, 2, "", "verbosity", "Initialize the problem."]], "iwopy.wrappers.ProblemWrapper": [[247, 1, 1, "", "__init__", "Constructor"], [248, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [249, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [250, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [251, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [252, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [253, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [254, 1, 1, "", "initialize", "Initialize the problem."], [255, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [256, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [257, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [258, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [259, 1, 1, "", "var_names_float", "The names of float variables."], [260, 1, 1, "", "var_names_int", "The names of integer variables."]], "iwopy.wrappers.ProblemWrapper.__init__": [[247, 2, 2, "", "base_problem", "Constructor"], [247, 2, 2, "", "kwargs", "Constructor"], [247, 2, 2, "", "name", "Constructor"]], "iwopy.wrappers.ProblemWrapper.apply_individual": [[248, 2, 2, "", "vars_float", "Apply new variables to the problem."], [248, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "iwopy.wrappers.ProblemWrapper.apply_population": [[249, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [249, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "iwopy.wrappers.ProblemWrapper.finalize_individual": [[250, 2, 2, "", "vars_float", "Finalization, given the champion data."], [250, 2, 2, "", "vars_int", "Finalization, given the champion data."], [250, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "iwopy.wrappers.ProblemWrapper.finalize_population": [[251, 2, 2, "", "vars_float", "Finalization, given the final population data."], [251, 2, 2, "", "vars_int", "Finalization, given the final population data."], [251, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "iwopy.wrappers.ProblemWrapper.initialize": [[254, 2, 2, "", "verbosity", "Initialize the problem."]], "iwopy.wrappers.SimpleConstraint": [[262, 1, 1, "", "__init__", "Constructor"], [263, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [264, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [265, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [266, 1, 1, "", "f", "The function."], [267, 1, 1, "", "g", "The analytical derivative of the function f, df/dvar, if available."], [268, 1, 1, "", "get_bounds", "Returns the bounds for all components."], [269, 1, 1, "", "n_components", "Returns the number of components of the function."]], "iwopy.wrappers.SimpleConstraint.__init__": [[262, 2, 2, "", "cnames", "Constructor"], [262, 2, 2, "", "has_ana_derivs", "Constructor"], [262, 2, 2, "", "maxs", "Constructor"], [262, 2, 2, "", "mins", "Constructor"], [262, 2, 2, "", "n_components", "Constructor"], [262, 2, 2, "", "name", "Constructor"], [262, 2, 2, "", "problem", "Constructor"]], "iwopy.wrappers.SimpleConstraint.ana_deriv": [[263, 2, 2, "", "components", "Calculates the analytic derivative, if possible."], [263, 2, 2, "", "var", "Calculates the analytic derivative, if possible."], [263, 2, 2, "", "vars_float", "Calculates the analytic derivative, if possible."], [263, 2, 2, "", "vars_int", "Calculates the analytic derivative, if possible."]], "iwopy.wrappers.SimpleConstraint.calc_individual": [[264, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [264, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [264, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [264, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "iwopy.wrappers.SimpleConstraint.calc_population": [[265, 2, 2, "", "components", "Calculate values for all individuals of a population."], [265, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [265, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [265, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "iwopy.wrappers.SimpleConstraint.f": [[266, 2, 2, "", "x", "The function."]], "iwopy.wrappers.SimpleConstraint.g": [[267, 2, 2, "", "components", "The analytical derivative of the function f, df/dvar, if available."], [267, 2, 2, "", "var", "The analytical derivative of the function f, df/dvar, if available."], [267, 2, 2, "", "x", "The analytical derivative of the function f, df/dvar, if available."]], "iwopy.wrappers.SimpleObjective": [[271, 1, 1, "", "__init__", "Constructor"], [272, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [273, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [274, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [275, 1, 1, "", "f", "The function."], [276, 1, 1, "", "g", "The analytical derivative of the function f, df/dvar, if available."], [277, 3, 1, "", "has_ana_derivs", "Returns analyical derivatives flag"], [278, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [279, 1, 1, "", "n_components", "Returns the number of components of the function."]], "iwopy.wrappers.SimpleObjective.__init__": [[271, 2, 2, "", "cnames", "Constructor"], [271, 2, 2, "", "has_ana_derivs", "Constructor"], [271, 2, 2, "", "maximize", "Constructor"], [271, 2, 2, "", "n_components", "Constructor"], [271, 2, 2, "", "name", "Constructor"], [271, 2, 2, "", "problem", "Constructor"]], "iwopy.wrappers.SimpleObjective.ana_deriv": [[272, 2, 2, "", "components", "Calculates the analytic derivative, if possible."], [272, 2, 2, "", "var", "Calculates the analytic derivative, if possible."], [272, 2, 2, "", "vars_float", "Calculates the analytic derivative, if possible."], [272, 2, 2, "", "vars_int", "Calculates the analytic derivative, if possible."]], "iwopy.wrappers.SimpleObjective.calc_individual": [[273, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [273, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [273, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [273, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "iwopy.wrappers.SimpleObjective.calc_population": [[274, 2, 2, "", "components", "Calculate values for all individuals of a population."], [274, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [274, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [274, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "iwopy.wrappers.SimpleObjective.f": [[275, 2, 2, "", "x", "The function."]], "iwopy.wrappers.SimpleObjective.g": [[276, 2, 2, "", "components", "The analytical derivative of the function f, df/dvar, if available."], [276, 2, 2, "", "var", "The analytical derivative of the function f, df/dvar, if available."], [276, 2, 2, "", "x", "The analytical derivative of the function f, df/dvar, if available."]], "iwopy.wrappers.SimpleProblem": [[281, 1, 1, "", "__init__", "Constructor"], [282, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [283, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [284, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [285, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [286, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [287, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [288, 1, 1, "", "var_names_float", "The names of float variables."], [289, 1, 1, "", "var_names_int", "The names of integer variables."]], "iwopy.wrappers.SimpleProblem.__init__": [[281, 2, 2, "", "float_vars", "Constructor"], [281, 2, 2, "", "init_values_float", "Constructor"], [281, 2, 2, "", "init_values_int", "Constructor"], [281, 2, 2, "", "int_vars", "Constructor"], [281, 2, 2, "", "kwargs", "Constructor"], [281, 2, 2, "", "max_values_float", "Constructor"], [281, 2, 2, "", "max_values_int", "Constructor"], [281, 2, 2, "", "min_values_float", "Constructor"], [281, 2, 2, "", "min_values_int", "Constructor"], [281, 2, 2, "", "name", "Constructor"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:parameter", "3": "py:property", "4": "py:attribute", "5": "py:function"}, "terms": {"": [0, 1, 35, 39, 77, 94, 99, 107, 129, 244, 290, 292, 298, 303, 305, 306, 307, 308], "0": [1, 5, 6, 7, 8, 11, 12, 13, 16, 17, 19, 21, 22, 35, 39, 40, 43, 49, 50, 51, 61, 67, 68, 70, 77, 82, 86, 88, 91, 92, 95, 96, 99, 100, 101, 105, 106, 107, 110, 127, 136, 138, 139, 140, 142, 159, 174, 179, 181, 184, 186, 189, 191, 192, 193, 194, 196, 197, 199, 227, 233, 239, 240, 241, 242, 244, 245, 246, 250, 251, 254, 261, 262, 267, 270, 276, 280, 303, 305, 306, 307, 308], "00": [305, 306, 307, 308], "001922e": 305, "003962e": 306, "004978e": 305, "005823e": 306, "007586e": 305, "008532e": 306, "009250e": 306, "01": [305, 306], "02": [305, 306], "020000e": 306, "03": 305, "030000e": 306, "04": [305, 307], "042442e": 305, "047046e": 305, "047608e": 305, "05": [19, 20, 305], "052208e": 305, "053750e": 306, "053824e": 305, "06": 305, "06014": 301, "061685e": 305, "064096e": 305, "066317e": 305, "069032e": 305, "07": 305, "08": [193, 305, 308], "082072e": 305, "085500e": 306, "086939e": 305, "087311e": 305, "088348e": 305, "09": 305, "090210e": 305, "092386e": 305, "098864e": 305, "099603e": 305, "1": [1, 5, 6, 7, 8, 11, 35, 39, 49, 50, 67, 68, 86, 88, 91, 92, 105, 110, 134, 136, 138, 139, 142, 159, 172, 174, 176, 179, 181, 182, 184, 186, 187, 189, 191, 192, 196, 197, 203, 204, 214, 215, 233, 234, 239, 241, 242, 243, 245, 246, 250, 261, 262, 267, 270, 271, 276, 280, 294, 295, 303, 305, 306, 307, 308], "10": [1, 11, 12, 192, 193, 301, 304, 305, 306, 307, 308], "100": [7, 8, 187, 188, 193, 305, 307, 308], "1000": [234, 306], "100000e": [306, 308], "102": 301, "106500e": 306, "11": [303, 304, 305, 306, 308], "111336e": 305, "112099e": 305, "12": [1, 199, 303, 304, 305, 306], "120": 306, "120000e": 306, "120221e": 305, "122978e": 305, "127440e": 305, "129005e": 305, "13": [303, 305, 306], "130000e": 306, "14": [303, 305, 306], "140000e": 306, "140025e": 305, "141494e": 305, "144952e": 305, "146349e": 305, "15": [1, 303, 305, 306], "150000e": 306, "151292e": 305, "152908e": 305, "153245e": 305, "16": [305, 306, 308], "160": 306, "161302e": 305, "163198e": 305, "166486e": 305, "17": [305, 306], "170680e": 305, "175796e": 305, "179612e": 305, "179930e": 305, "18": [305, 306], "180": 307, "180473e": 305, "19": [305, 306], "192331e": 305, "194387e": 305, "199172e": 305, "199634e": 305, "1e": [19, 20, 193, 305, 306, 307, 308], "2": [1, 7, 197, 203, 204, 208, 209, 214, 215, 233, 234, 242, 243, 303, 305, 306, 307, 308], "20": [305, 306], "200": [306, 307], "2024": 301, "21": [305, 306], "21105": 301, "211760e": 305, "2125702": 232, "213613e": 305, "215000e": 306, "22": [305, 306], "225390e": 305, "227472e": 305, "23": [305, 306], "232622e": 305, "233574e": 305, "235636e": 305, "236112e": 305, "239395e": 305, "24": [305, 306], "240": 306, "240002e": 305, "240040e": 305, "246986e": 305, "247216e": 305, "249910e": 305, "25": [305, 306], "255719e": 305, "258628e": 305, "26": 305, "262789e": 305, "27": 305, "272775e": 305, "275": 1, "275371e": 305, "276369e": 305, "28": 305, "280": 306, "283250e": 306, "288465e": 305, "29": 305, "290250e": 306, "290517e": 305, "293392e": 305, "3": [303, 304, 305, 306, 307, 308], "30": 305, "300": 305, "309271e": 305, "31": 305, "314707e": 305, "315": 306, "32": 305, "320": 306, "327298e": 305, "33": 305, "331988e": 305, "34": 305, "344344e": 305, "345300e": 305, "345435e": 305, "35": 305, "351725e": 305, "354546e": 305, "358615e": 305, "36": [305, 307], "360": [306, 307], "363": 306, "366573e": 305, "37": 305, "370": 306, "371277e": 305, "38": 305, "382281e": 305, "383923e": 305, "389087e": 305, "39": [305, 306, 307, 308], "390472e": 305, "391485e": 305, "396197e": 305, "397887": 1, "398633e": 305, "3rd": 307, "4": [1, 303, 305, 306, 307, 308], "40": [305, 306], "400": 306, "402227e": 305, "408324e": 305, "41": 305, "410000e": 306, "414893e": 305, "417813e": 305, "419237e": 305, "42": [305, 306, 307], "420385e": 305, "421637e": 305, "423500e": 306, "424350e": 305, "424672e": 305, "42478": 1, "429528e": 305, "43": 305, "431231e": 305, "435152e": 305, "436554e": 305, "437065e": 305, "44": 305, "440": 306, "444495e": 305, "45": 305, "453717e": 305, "458509e": 305, "459065e": 305, "46": 305, "460000e": 306, "463435e": 305, "47": 305, "470148e": 305, "470885e": 305, "475": 1, "48": 305, "480": 306, "484520e": 305, "485097e": 305, "49": 305, "5": [1, 11, 12, 35, 39, 303, 305, 306, 307, 308], "50": [35, 39, 305], "505766e": 305, "51": 305, "516980e": 305, "517358e": 305, "52": 305, "520": 306, "527966e": 305, "53": 305, "530091e": 305, "531000e": 306, "536083e": 305, "536876e": 305, "54": 305, "541352e": 306, "547500e": 306, "548850e": 305, "549782e": 305, "55": 305, "552179e": 305, "553991e": 305, "56": 305, "560": 306, "562191e": 305, "568959e": 305, "57": 305, "5754719667092": 305, "579257e": 305, "579416e": 305, "58": 305, "585": 305, "587500e": 306, "59": 305, "5950328599492": 307, "595215e": 305, "599746e": 305, "6": [1, 303, 305, 306, 307, 308], "60": 305, "600": 306, "600000e": 308, "6014": 301, "606192e": 305, "606218e": 305, "607438e": 305, "608240e": 305, "61": 305, "615375e": 305, "615461e": 305, "617500e": 306, "62": 305, "624664e": 305, "63": 305, "630003e": 305, "639390e": 305, "64": 305, "640": 306, "640000e": 306, "642586e": 305, "645875e": 305, "65": 305, "652250e": 306, "652947e": 305, "657750e": 305, "658783e": 305, "66": [305, 307], "66552658619115e": 308, "665527e": 308, "67": 305, "670812e": 305, "673215e": 305, "68": 305, "680": 306, "681007e": 305, "683691e": 305, "69": 305, "697765e": 305, "69922244245727": 305, "699806e": 305, "7": [303, 304, 305, 306, 307, 308], "70": 305, "700000e": 306, "701957e": 305, "702197e": 305, "71": 305, "712766e": 305, "72": 305, "720": 306, "722163e": 305, "729153e": 305, "73": 305, "730500e": 306, "74": 305, "740609e": 305, "742264e": 305, "743000e": 306, "743332e": 305, "75": 305, "750000e": 306, "750043e": 305, "757321e": 305, "76": 305, "760": 306, "762982e": 305, "765166e": 305, "77": 305, "78": 305, "79": 305, "795050e": 305, "796535e": 305, "796963e": 305, "797687e": 305, "8": [1, 303, 304, 305, 306, 307, 308], "80": [305, 306], "800": 306, "800000e": 306, "801432e": 305, "801572e": 305, "802090e": 305, "806220e": 305, "80792221071172": 307, "81": 305, "810981e": 305, "811203e": 305, "812000e": 306, "819316e": 305, "82": 305, "821135e": 305, "827574e": 305, "828613e": 305, "83": 305, "831121e": 306, "834537e": 305, "834607e": 305, "84": 305, "840": 306, "845131e": 305, "849789e": 305, "85": 305, "855755e": 305, "858055e": 305, "86": 305, "860000e": 306, "869922e": 305, "87": 305, "878439e": 305, "88": 305, "880": 306, "886000e": 306, "887334e": 305, "887607e": 305, "89": 305, "890000e": 306, "890124e": 305, "9": [1, 301, 303, 304, 305, 306, 307, 308], "90": [305, 306], "900000e": 306, "900849e": 305, "900949e": 305, "902047e": 305, "903010e": 305, "906946e": 305, "907955e": 305, "91": 305, "910000e": 306, "911250e": 306, "911636e": 305, "913568e": 305, "92": 305, "920": 306, "925003e": 305, "93": 305, "931458e": 305, "932276e": 305, "938612e": 305, "94": 305, "942042e": 305, "943250e": 306, "944930e": 305, "949815e": 305, "95": 305, "953370e": 305, "96": 305, "960": 306, "960526e": 305, "97": 305, "972586e": 305, "973250e": 306, "976805e": 305, "98": 305, "980000e": 306, "981631e": 305, "982356e": 305, "99": 305, "990310e": 305, "991725e": 305, "992287e": 305, "993564e": 305, "999775e": 305, "999799e": 305, "999989e": 305, "999999": [5, 11, 92, 93, 197, 198, 233, 242, 246, 280], "A": [0, 61, 77, 164, 197, 233, 242, 261, 270, 280, 292, 295, 299, 300, 307, 308], "As": [304, 305], "At": [172, 182], "By": 107, "For": [61, 266, 267, 271, 275, 276, 303, 304, 305, 307, 309], "If": [44, 309], "In": [305, 306, 307, 308], "It": [303, 304, 305], "Of": 305, "One": [305, 307], "Such": 304, "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 138, 139, 140, 142, 159, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 297, 301, 303, 304, 305, 306, 307, 308, 309], "Then": 304, "There": [305, 307, 308], "These": [305, 306], "To": 302, "Will": [234, 243], "With": 305, "__init__": [305, 306, 307, 308], "__str__": [1, 5, 7, 11, 13, 15, 19, 35, 37, 40, 43, 61, 77, 86, 92, 127, 129, 131, 134, 176, 187, 192, 233, 242, 246, 261, 270, 280], "abl": 305, "about": 307, "abov": [303, 304, 308], "abstract": [19, 40, 41, 43, 52, 86, 91, 92, 246, 261, 266, 270, 275, 290, 292, 297, 300, 303], "access": [297, 303], "accord": 307, "accordingli": 305, "accur": [164, 165], "achiev": 303, "activ": 304, "actual": [5, 11, 92, 99, 233, 242, 244, 246, 280, 304, 307], "ad": [0, 61, 69, 72, 107, 127, 304, 305, 307, 308], "adapt": [139, 294], "add": [5, 11, 61, 64, 92, 95, 96, 127, 178, 233, 242, 246, 280, 305, 307, 308], "add_constraint": [5, 11, 92, 95, 233, 242, 246, 280, 305, 307, 308], "add_object": [5, 11, 92, 96, 233, 242, 246, 280, 305, 306, 307, 308], "add_patch": [305, 306, 307], "addig": 304, "addit": [24, 42, 89, 122, 133, 187, 188, 231, 234, 247, 281, 303, 308], "addition": [103, 104, 206, 220, 222, 237, 238, 308], "adjust": [234, 243, 305, 306, 307], "advanc": 305, "advic": [229, 304], "after": [86, 88, 134, 176, 187, 192, 304, 308], "afterward": 304, "again": [0, 304, 305], "aim": 307, "algo": [132, 133, 134, 176], "algo_par": [134, 135, 176, 177, 305, 306, 307], "algofactori": [132, 133, 294], "algorithm": [0, 132, 133, 134, 160, 163, 164, 166, 176, 294, 303, 305, 306, 307], "all": [0, 1, 5, 7, 11, 19, 23, 31, 40, 43, 44, 45, 46, 47, 59, 60, 61, 63, 65, 66, 75, 76, 77, 79, 80, 81, 84, 85, 92, 99, 104, 107, 118, 119, 127, 197, 200, 214, 215, 228, 233, 234, 238, 242, 243, 244, 246, 261, 263, 264, 265, 267, 268, 270, 272, 273, 274, 280, 281, 297, 299, 300, 303, 304, 305, 307, 308], "all_gridpoint": [197, 200], "all_subclass": [228, 299], "all_valid": 192, "allow": [0, 200, 206, 210, 211, 212, 213, 222, 307], "allow_out": [197, 200, 206, 210, 211, 212, 213, 222], "along": 307, "alorithm": [134, 135, 176, 177], "alpha": [303, 306, 307], "alpha_": 307, "alreadi": 305, "also": [0, 303, 305, 307, 308], "altern": [304, 305], "am": 303, "among": 310, "an": [5, 11, 92, 96, 233, 242, 246, 280, 303, 304, 305, 306, 307, 308], "ana_deriv": [1, 2, 6, 7, 8, 12, 19, 40, 43, 45, 61, 63, 77, 79, 127, 261, 263, 270, 272], "analit": 277, "analy": [1, 7, 270, 277], "analyt": [1, 2, 6, 7, 8, 12, 19, 40, 43, 45, 61, 63, 77, 79, 99, 127, 244, 261, 262, 263, 267, 270, 271, 272, 276, 305, 308], "angl": 307, "ani": [46, 47, 49, 50, 65, 66, 67, 68, 80, 81, 97, 98, 105, 106, 235, 236, 239, 240, 248, 249, 250, 251, 264, 265, 273, 274, 303, 305, 307], "anoth": [0, 307], "api": [303, 305, 308], "append": [61, 64, 127], "appli": [0, 5, 11, 92, 97, 98, 233, 235, 236, 242, 246, 248, 249, 280, 307, 308], "applic": [35, 36, 46, 47, 49, 50, 65, 66, 67, 68, 80, 81, 97, 98, 105, 106, 129, 130, 235, 236, 239, 240, 248, 249, 250, 251, 264, 265, 273, 274, 310], "apply_individu": [5, 11, 92, 97, 233, 235, 242, 246, 248, 280, 305, 306, 307], "apply_popul": [5, 11, 92, 98, 233, 236, 242, 246, 249, 280, 305, 306, 307], "apply_tol": [197, 201, 202], "approach": [303, 305], "appropri": 306, "approxim": [35, 38], "ar": [0, 1, 5, 7, 11, 19, 21, 22, 23, 92, 99, 100, 101, 107, 133, 178, 192, 197, 200, 205, 206, 207, 221, 233, 242, 244, 246, 261, 266, 268, 275, 280, 303, 304, 305, 306, 307, 308, 309], "arad": 307, "arang": 306, "area": 305, "arg": [1, 5, 7, 11, 19, 20, 24, 40, 42, 86, 89, 92, 122, 134, 164, 171, 176, 187, 192, 231, 233, 242, 246, 261, 270, 280, 299], "argmax": 307, "argmin": 307, "argument": 308, "around": [172, 182, 295], "arrai": [21, 22, 23, 28, 29, 30, 31, 33, 34, 35, 36, 41, 45, 46, 47, 49, 50, 63, 65, 66, 67, 68, 79, 80, 81, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 129, 130, 199, 218, 235, 236, 237, 238, 239, 240, 244, 248, 249, 250, 251, 262, 263, 264, 265, 266, 268, 272, 273, 274, 275, 278, 281, 305, 306, 307, 308], "articl": 301, "ask": 307, "assum": [44, 261, 270, 300, 308], "attack": [305, 307], "attempt": 303, "attribut": 308, "author": 301, "autograd": 0, "automat": 0, "avail": [28, 29, 261, 267, 270, 276, 304], "avoid": [304, 307], "await": 0, "awar": 308, "awesom": 303, "ax": [35, 39, 176, 178, 305, 306, 307], "axi": [39, 178, 305, 306, 307], "b": [1, 7, 8, 303], "backward": [203, 204, 214, 215, 233, 234, 242, 243, 307], "base": [0, 13, 14, 15, 16, 17, 18, 19, 40, 43, 86, 92, 99, 188, 228, 230, 231, 244, 290, 292, 297, 299, 300, 303, 304, 305, 307, 308, 309], "base_cl": [230, 231, 299], "base_problem": [233, 234, 242, 243, 246, 247], "basic": [197, 227, 303], "batch_fit": [139, 141], "been": [0, 18, 303, 305], "befor": [86, 90, 134, 137, 176, 180, 187, 190, 192, 195], "begin": [305, 308], "being": [107, 305], "benchmark": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 290], "benefici": 305, "benefit": 308, "best": [35, 38, 303, 305, 306, 307, 308], "beta": 303, "between": [305, 308], "bibtex": 301, "bin": 304, "blob": 307, "bool": [2, 6, 8, 12, 18, 28, 29, 35, 36, 38, 41, 59, 60, 75, 76, 84, 85, 99, 103, 104, 107, 129, 130, 139, 140, 172, 173, 182, 183, 192, 193, 200, 205, 206, 207, 210, 211, 212, 213, 216, 217, 220, 221, 222, 232, 237, 238, 244, 262, 271, 277, 278, 305], "boolean": [21, 22, 100, 101, 114, 305, 306, 308], "both": 305, "bound": [19, 23, 197, 199, 234, 243, 261, 268, 308], "boundari": [203, 204, 214, 215, 233, 234, 242, 243], "box": [305, 306, 307], "branch": [303, 304], "branin": [1, 2, 3, 4, 5, 6], "braninobject": [1, 2, 3, 4, 291], "braninproblem": [5, 6, 291], "bug": 0, "build": 304, "bx": 1, "c": [1, 219, 220, 304, 305, 307], "c_tol": [139, 140], "calc": [219, 220], "calc_gradi": [5, 11, 92, 99, 233, 242, 244, 246, 280], "calc_individu": [1, 7, 19, 40, 43, 46, 61, 65, 77, 80, 127, 261, 264, 270, 273, 305, 306, 307], "calc_popul": [1, 7, 19, 40, 43, 47, 61, 66, 77, 81, 127, 261, 265, 270, 274, 305, 306, 307], "calcul": [0, 1, 5, 7, 11, 19, 40, 43, 45, 46, 47, 61, 63, 65, 66, 77, 79, 80, 81, 92, 99, 107, 123, 124, 127, 134, 135, 172, 173, 176, 177, 182, 183, 197, 203, 204, 214, 215, 233, 242, 244, 246, 261, 263, 264, 265, 270, 272, 273, 274, 280, 292, 303, 305, 307, 308], "calculate_individu": 306, "calculate_popul": 306, "call": [0, 5, 11, 86, 88, 90, 92, 99, 134, 137, 176, 180, 187, 190, 192, 195, 233, 242, 244, 246, 280, 305, 306, 308], "callback": [160, 162, 176, 181, 295], "can": [0, 99, 244, 297, 302, 303, 304, 305, 306, 307, 308, 310], "candid": 205, "cannot": [45, 63, 79, 263, 272], "capabl": [305, 307, 308], "carri": [305, 308], "case": [212, 213, 216, 229, 266, 267, 275, 276, 281, 308], "cd": [304, 307, 309], "cell": [197, 200, 206, 208, 209, 210, 211, 212, 213, 222], "centr": [203, 204, 214, 215, 233, 234, 242, 243, 307], "certain": 305, "cf": [107, 308], "cfg": 0, "chain": [302, 303], "chain_problem": 307, "chainpopul": 307, "chainproblem": 307, "champion": [1, 5, 7, 11, 19, 40, 43, 49, 61, 67, 77, 92, 105, 127, 233, 239, 242, 246, 250, 261, 270, 280], "chanc": 305, "chang": [0, 303, 304, 305], "changelog": 0, "channel": 304, "charg": [0, 305], "charges_problem": 305, "charges_problem_fd": 305, "chargesproblem": 305, "check": [5, 11, 19, 21, 22, 25, 28, 29, 92, 100, 101, 197, 200, 217, 221, 222, 233, 242, 246, 261, 280, 303], "check_constraints_individu": [5, 11, 92, 100, 233, 242, 246, 280], "check_constraints_popul": [5, 11, 92, 101, 233, 242, 246, 280], "check_individu": [19, 21, 261], "check_popul": [19, 22, 261], "checkout": 303, "choic": [39, 77, 78, 304, 308], "chosen": 305, "circl": [305, 306, 307], "citat": 303, "cite": 301, "cl": [228, 230, 299], "class": [0, 1, 5, 7, 11, 13, 19, 24, 25, 35, 40, 42, 43, 61, 77, 86, 89, 92, 99, 107, 122, 127, 129, 132, 134, 139, 160, 162, 164, 172, 175, 176, 182, 185, 187, 188, 192, 197, 228, 230, 231, 233, 242, 244, 246, 247, 261, 270, 280, 281, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 305, 306, 307, 308], "classmethod": [1, 5, 7, 11, 19, 24, 40, 42, 86, 89, 92, 122, 134, 160, 162, 172, 175, 176, 182, 185, 187, 192, 233, 242, 246, 261, 270, 280], "clean": 307, "clear": [25, 27], "clearli": [305, 306], "clone": [304, 309], "close": 306, "cls_name": [230, 231, 299], "cma": 111, "cmi": 115, "cmpnt": [306, 307], "cname": [35, 44, 129, 262, 271, 308], "co": [1, 306, 307], "code": [303, 309], "coeff": [5, 11, 92, 123, 124, 203, 204, 214, 215, 219, 220, 233, 242, 246, 280], "coeffici": [123, 124, 197, 203, 204, 214, 215, 219, 220], "color": [39, 305, 306, 307], "color_iv": 39, "color_v": 39, "com": [0, 232, 303, 304, 309], "combin": 307, "come": 303, "command": [178, 304], "comment": 0, "commit": [0, 303], "complet": [0, 303, 305, 307], "complex": 310, "complic": 305, "compon": [1, 4, 5, 7, 10, 11, 19, 23, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 59, 60, 61, 63, 65, 66, 67, 68, 71, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 92, 99, 107, 118, 119, 127, 164, 233, 242, 244, 246, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 292, 295, 305, 307, 308], "component_nam": [1, 7, 19, 40, 43, 48, 61, 77, 127, 261, 270], "compos": [77, 292, 305], "comput": [139, 140], "con": [25, 30, 33, 34, 35, 36, 92, 103, 104, 105, 106, 129, 130, 187, 188, 237, 238, 239, 240, 250, 251, 308], "concern": 304, "concret": [234, 243, 246, 247, 303], "conda": 303, "condit": 176, "config": 304, "confin": 305, "consid": [99, 107, 244, 305], "consol": 232, "constrain": 305, "constraint": [0, 5, 11, 19, 20, 21, 22, 23, 24, 33, 34, 35, 36, 92, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 115, 118, 129, 130, 139, 140, 192, 233, 237, 238, 239, 240, 242, 244, 246, 250, 251, 261, 280, 292, 297, 298, 300, 303, 305, 307, 308], "constraint_typ": [19, 24, 261], "constraint_valu": [5, 11, 19, 21, 22, 92, 100, 101, 233, 242, 246, 261, 280], "constraints_tol": [5, 11, 92, 102, 233, 242, 246, 280], "constructor": [1, 2, 5, 6, 11, 12, 13, 14, 19, 20, 24, 25, 26, 35, 36, 40, 42, 43, 44, 61, 62, 77, 78, 86, 87, 89, 92, 94, 122, 127, 128, 129, 130, 134, 135, 139, 140, 160, 161, 172, 173, 176, 177, 182, 183, 187, 188, 192, 193, 197, 199, 231, 233, 234, 242, 243, 246, 247, 261, 262, 270, 271, 280, 281, 305], "construtor": [7, 8], "contact": 303, "contain": [35, 107, 129, 197, 208, 209, 292, 307], "content": 307, "context": [], "contradictori": 307, "conveni": 305, "converg": [305, 306, 308], "coordin": 305, "core": [0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 172, 173, 176, 182, 183, 187, 192, 196, 244, 246, 261, 270, 280, 290, 294, 295, 296, 297, 298, 300], "corner": [197, 200, 206, 210, 211, 212, 213, 222], "correct": [197, 201, 202], "correspond": [303, 304, 305, 307, 308], "costraint": 307, "could": [0, 305], "count": 139, "coupl": 305, "cours": 305, "cover": 307, "crash": 307, "creat": [132, 133, 160, 162, 172, 175, 176, 178, 182, 185, 294, 303, 304, 305, 306, 307, 308], "credit": 303, "criteria": 305, "cross": [164, 167, 306, 307], "crossov": [164, 167], "ctol": [102, 306], "current": [0, 25, 32, 303, 306, 308], "cx": 1, "d": 307, "darkr": [305, 306], "data": [1, 5, 7, 11, 19, 25, 28, 29, 33, 34, 40, 43, 49, 50, 61, 67, 68, 73, 74, 77, 92, 105, 106, 127, 192, 233, 239, 240, 242, 246, 250, 251, 261, 270, 280, 290, 305, 307], "deactiv": 304, "deal": 305, "decent": [192, 305], "decid": 304, "deduc": 229, "def": [305, 306, 307, 308], "default": [44, 94, 107, 127, 160, 176, 181, 199, 214, 215, 234, 243, 292, 295, 304, 305, 307], "defaultcallbacktempl": [160, 161, 162, 163, 295], "defaultmultiobjectivetermin": 307, "defaultsingleobjectivetermin": 305, "defin": [1, 7, 261, 270, 291, 300, 305, 306, 307, 308], "definit": [5, 11, 291, 308], "deg2rad": 306, "degre": 307, "delta": [197, 199, 233, 234, 242, 243, 305, 308], "demonstr": [0, 306, 307, 308], "denot": 305, "dep": [59, 60, 75, 76, 84, 85, 305], "depend": [0, 1, 7, 19, 40, 43, 44, 59, 60, 61, 75, 76, 77, 84, 85, 127, 133, 261, 270, 304, 305, 309], "deriv": [0, 1, 2, 4, 6, 7, 8, 10, 12, 19, 24, 40, 42, 43, 45, 61, 63, 77, 79, 89, 99, 107, 122, 127, 160, 162, 172, 175, 182, 185, 197, 203, 204, 228, 230, 231, 244, 261, 262, 263, 267, 270, 271, 272, 276, 277, 299, 303, 308], "deriv_coeff": [197, 203], "deriv_coeffs_gridpoint": [197, 204], "descib": 307, "describ": [304, 305, 306, 307], "descript": [290, 291, 293, 307], "design": 305, "detail": 303, "determin": [306, 307], "dev": 304, "develop": [176, 178, 309], "df": [261, 267, 270, 276, 308], "diagon": 307, "dict": [24, 25, 42, 55, 56, 89, 95, 96, 122, 133, 134, 135, 176, 177, 178, 187, 188, 193, 231, 233, 234, 242, 243, 247, 281, 305, 306, 307, 308], "differ": [0, 203, 204, 214, 215, 233, 234, 242, 243, 303, 305, 307, 308], "differenti": [45, 63, 79, 99, 107, 203, 204, 214, 215, 233, 242, 244, 263, 272, 300], "digit": [197, 199], "dim": 218, "dimens": [197, 203, 204, 208, 209, 214, 215, 223, 224, 299, 305, 307], "dimension": 305, "direct": [0, 192, 297, 305, 306, 307], "directli": [5, 11, 92, 99, 233, 242, 244, 246, 280, 297, 304, 305, 307, 308], "directori": 304, "discret": [0, 233, 305], "discretizereggrid": [233, 234, 235, 236, 237, 238, 239, 240, 241, 300, 308], "discuss": 303, "displai": 305, "dist": [305, 307], "distanc": [0, 233, 242, 300, 305], "divis": [192, 193], "do": [187, 302, 305], "document": 0, "doe": [304, 305], "doi": 301, "domain": [1, 7], "don": 61, "done": [18, 304], "dpar": 234, "driver": 133, "dtype": 305, "due": 0, "dure": [176, 178, 305], "dv": [139, 141, 143], "dvar": [261, 267, 270, 276], "dx": [306, 308], "dy": [306, 308], "dynam": [0, 159, 160, 162, 172, 175, 182, 185, 186, 229, 294, 295, 299, 309], "e": [0, 5, 11, 92, 118, 119, 233, 242, 246, 280, 297, 304, 305, 309], "each": [1, 7, 40, 41, 61, 73, 74, 192, 193, 197, 208, 209, 224, 270, 271, 278, 305, 307], "easili": [305, 308], "egg": 304, "einsum": [5, 11, 92, 123, 124, 219, 220, 233, 242, 246, 280, 307], "either": [193, 234, 243, 266, 275, 281, 304, 308], "electr": 305, "electrostat": [0, 302, 303], "element": [25, 32, 307], "els": [200, 206, 210, 211, 212, 213, 216, 222, 266, 267, 275, 276, 305, 307, 308], "end": [305, 307, 308], "engin": 305, "enjoi": 0, "enter": 304, "entri": [25, 28, 29, 73, 74, 193, 307], "enumer": 307, "equal": [305, 306, 307], "equival": 305, "error": [197, 212, 213, 216, 304], "evalu": [5, 11, 92, 103, 104, 187, 188, 203, 214, 233, 237, 238, 242, 246, 280, 300, 303, 305, 306, 307, 308], "evaluate_individu": [5, 11, 92, 103, 233, 237, 242, 246, 280], "evaluate_popul": [5, 11, 92, 104, 233, 238, 242, 246, 280], "even": 305, "everi": 308, "exampl": [0, 303, 304, 305, 307, 308, 310], "except": 307, "exclud": 305, "execut": 304, "exist": [23, 268, 304], "expect": [307, 308], "explicit": 229, "explor": 308, "express": [23, 268], "extend": 0, "extens": 307, "extern": [290, 293], "extract": 133, "f": [0, 1, 2, 3, 7, 8, 9, 261, 266, 267, 270, 271, 275, 276, 305, 306, 307, 308], "f_avg": 306, "f_min": 306, "f_tol": [192, 193], "fact": [303, 305], "factor": [192, 193], "factori": [0, 1, 5, 7, 11, 19, 24, 40, 42, 86, 89, 92, 122, 134, 164, 165, 166, 167, 168, 169, 170, 171, 176, 187, 192, 231, 233, 242, 246, 261, 270, 280, 295, 299], "fail": 229, "fals": [1, 2, 5, 6, 8, 11, 12, 35, 38, 92, 99, 103, 104, 107, 132, 133, 139, 140, 197, 206, 220, 222, 233, 237, 238, 242, 244, 246, 271, 280, 305, 306, 308], "far": [0, 305], "farm": [302, 303], "fast": [305, 307], "faster": 308, "favour": 305, "fd_bounds_ord": [234, 242, 243], "fd_order": [233, 234, 242, 243, 305, 308], "fdata": [73, 74], "feel": 303, "fig": [176, 178, 305, 306, 307], "figsiz": [35, 39, 305], "figur": [35, 39, 176, 178, 305], "fill": [305, 306], "fill_diagon": 305, "final": [1, 5, 7, 11, 13, 16, 19, 40, 43, 49, 50, 61, 67, 68, 77, 86, 88, 92, 105, 106, 127, 134, 139, 142, 172, 174, 176, 182, 184, 187, 192, 233, 239, 240, 242, 246, 250, 251, 261, 270, 280, 305, 306, 307, 308], "finalize_individu": [1, 5, 7, 11, 19, 40, 43, 49, 61, 67, 77, 92, 105, 127, 233, 239, 242, 246, 250, 261, 270, 280], "finalize_popul": [1, 5, 7, 11, 19, 40, 43, 50, 61, 68, 77, 92, 106, 127, 233, 240, 242, 246, 251, 261, 270, 280], "find": [35, 38, 197, 205, 206, 207, 305, 308], "find_grid_ind": [197, 205], "find_gridpoint": [197, 206], "find_ingrid": [197, 207], "find_pareto_objmix": [35, 38, 307], "fine": 305, "finish": [1, 5, 7, 11, 13, 18, 19, 40, 43, 61, 77, 86, 88, 92, 127, 134, 176, 187, 192, 233, 242, 246, 261, 270, 280, 305, 306, 307, 308], "finit": [0, 192, 203, 204, 214, 215, 233, 234, 242, 243, 300, 303, 308], "first": [178, 304, 305, 307], "fit": [139, 140, 143, 306], "fix": [0, 308], "flag": [1, 5, 7, 11, 13, 18, 19, 40, 41, 43, 61, 77, 86, 92, 99, 103, 104, 107, 114, 127, 134, 172, 176, 182, 187, 192, 193, 212, 213, 216, 232, 233, 237, 238, 242, 244, 246, 261, 262, 270, 271, 277, 278, 280, 305, 308], "flake8": 309, "float": [0, 1, 5, 6, 7, 11, 12, 19, 20, 28, 29, 30, 31, 33, 34, 35, 38, 39, 40, 43, 44, 45, 46, 47, 49, 50, 53, 55, 57, 59, 61, 63, 65, 66, 67, 68, 75, 77, 79, 80, 81, 84, 92, 97, 98, 99, 103, 104, 105, 106, 107, 108, 112, 116, 120, 125, 127, 129, 130, 139, 140, 172, 182, 192, 193, 199, 233, 235, 236, 237, 238, 239, 240, 242, 244, 246, 248, 249, 250, 251, 252, 255, 257, 259, 261, 262, 263, 264, 265, 266, 267, 270, 272, 273, 274, 275, 276, 280, 281, 282, 284, 286, 288, 300, 305, 306, 308], "float_random": [305, 307], "float_var": [280, 281, 308], "floatrandomsampl": [305, 307], "folder": 304, "follow": [0, 192, 308], "forc": [0, 304], "forg": 304, "forget": 61, "fork": [303, 304], "form": [305, 307], "forward": [0, 178, 203, 204, 214, 215, 233, 234, 242, 243, 305, 307, 308], "found": [25, 28, 29, 30, 31, 305, 310], "found_individu": [25, 28], "found_popul": [25, 29], "fox": 310, "frac": 305, "framework": 307, "fraunhof": [0, 301, 303], "fraunhoferiw": [0, 303, 304, 309], "fresh": [192, 193], "from": [0, 25, 30, 31, 95, 96, 132, 133, 142, 160, 162, 172, 174, 175, 182, 184, 185, 220, 228, 229, 294, 299, 304, 305, 306, 307, 308, 309], "front": [35, 36, 38, 39, 307], "ftol": [305, 307], "full": [0, 305, 306, 307], "fullfil": [5, 11, 19, 21, 22, 92, 100, 101, 233, 242, 246, 261, 280], "fulli": [305, 306, 307], "fun": 305, "func": [5, 11, 69, 92, 99, 107, 233, 242, 244, 246, 280], "func_org": 77, "func_vars_float": 61, "func_vars_int": 61, "function": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 19, 25, 26, 33, 34, 35, 36, 40, 42, 43, 44, 52, 59, 60, 61, 62, 64, 69, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 88, 92, 94, 99, 103, 104, 105, 106, 107, 118, 119, 127, 129, 130, 134, 139, 164, 166, 167, 168, 169, 170, 176, 178, 187, 192, 193, 233, 237, 238, 239, 240, 242, 244, 246, 250, 251, 261, 262, 266, 267, 269, 270, 271, 275, 276, 279, 280, 290, 291, 292, 297, 302, 303, 305, 306, 307], "funtion": [61, 69, 127], "futur": 303, "fvar": [99, 244], "g": [1, 4, 7, 10, 219, 220, 261, 267, 270, 276, 297, 305, 308], "ga": [0, 305], "gener": [13, 50, 68, 106, 139, 240, 246, 251, 292, 294, 300, 304, 305, 307], "genet": [303, 305, 306], "geometr": [302, 303], "geometri": 307, "get": [0, 1, 5, 7, 11, 13, 15, 19, 35, 39, 40, 43, 59, 60, 61, 75, 76, 77, 84, 85, 86, 92, 102, 111, 115, 127, 134, 176, 187, 192, 197, 201, 202, 208, 209, 210, 211, 212, 213, 219, 220, 233, 242, 246, 261, 270, 280, 305], "get_algorithm": [164, 166], "get_bound": [19, 23, 139, 144, 261, 268, 305], "get_cel": [197, 208, 209], "get_class": [160, 162, 172, 173, 175, 182, 185], "get_corn": [197, 210, 211], "get_crossov": [164, 167], "get_extra_info": [139, 145], "get_fig": [305, 306, 307], "get_figur": 307, "get_figure_f": [176, 178], "get_gradi": [5, 11, 92, 99, 107, 233, 242, 244, 246, 280], "get_mut": [164, 168], "get_nam": [139, 146], "get_nec": [139, 147], "get_nic": [139, 148], "get_nix": [139, 149], "get_nobj": [139, 150], "get_sampl": [164, 169], "get_termin": [164, 170], "gg": [0, 192, 193, 194, 195, 196, 298, 303, 305], "git": [303, 304, 309], "github": [0, 303, 304, 309], "give": 307, "given": [1, 5, 7, 11, 19, 21, 22, 35, 38, 39, 40, 43, 49, 50, 61, 67, 68, 77, 92, 100, 101, 105, 106, 127, 197, 209, 229, 233, 239, 240, 242, 246, 250, 251, 261, 270, 280, 305, 306, 307], "global": [1, 7, 234, 243, 305, 308], "go": 307, "goal": [271, 305], "goe": 303, "good": 305, "gp": [197, 212, 216], "gp2i": [197, 212], "gproblem": [305, 308], "gpt": [197, 203, 204, 213, 214, 215, 218, 219, 220], "gpts2ind": [197, 213], "grad": 192, "grad_coeff": [197, 214], "grad_coeffs_gridpoint": [197, 215], "gradient": [0, 5, 11, 92, 99, 107, 127, 139, 151, 192, 193, 197, 203, 204, 214, 215, 233, 242, 244, 246, 280, 292, 298, 303, 305, 308], "gradient_spars": [139, 152], "greedi": [0, 192, 298, 303, 305], "grid": [197, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 233, 299, 300, 303, 306, 308], "grid_problem": 306, "gridproblem": 306, "guarante": 305, "gx": [219, 220], "ha": [1, 7, 18, 303, 305, 306, 308], "handi": 305, "handl": [305, 308], "has_ana_deriv": [1, 7, 262, 270, 271, 277, 308], "has_batch_fit": [139, 153], "has_gradi": [139, 154], "has_gradient_spars": [139, 155], "has_hessian": [139, 156], "has_hessians_spars": [139, 157], "has_set_se": [139, 158], "have": [0, 302, 305, 307], "help": [164, 165, 303, 305], "helper": [290, 299], "henc": [305, 307, 308], "here": [0, 297, 303, 305, 306, 307, 308], "heurist": [303, 305], "higher": 307, "hint": [229, 299, 304], "histori": 303, "hoo": 1, "hous": 0, "how": [0, 232, 303, 307, 308], "howev": [303, 305, 308], "http": [0, 232, 301, 303, 304, 309], "i": [0, 1, 5, 7, 11, 25, 28, 29, 39, 44, 61, 92, 107, 118, 119, 192, 193, 197, 199, 214, 215, 217, 222, 233, 234, 242, 243, 246, 267, 276, 280, 291, 303, 304, 305, 306, 307, 308], "i0": 307, "i1": 307, "i2gp": [197, 216], "idea": 303, "ignor": [307, 308], "imagin": [305, 307], "imnport": 229, "implement": [0, 290, 298, 303, 305, 307, 308], "import": [0, 133, 134, 229, 299, 305, 306, 307, 308], "import_modul": [0, 229, 299], "impos": 305, "improv": [0, 303, 305], "in_grid": [197, 217], "includ": 303, "incomplet": 303, "increas": [0, 308], "ind": [197, 204, 205, 206, 212, 213, 215, 216, 218, 221, 222], "independ": 307, "index": [38, 45, 63, 79, 197, 205, 212, 263, 267, 272, 276, 305], "indic": [99, 197, 200, 204, 205, 206, 210, 211, 212, 213, 215, 216, 218, 221, 222, 244, 305, 308], "indirect": 0, "individu": [1, 5, 7, 11, 19, 21, 40, 43, 46, 47, 61, 65, 66, 73, 74, 77, 80, 81, 92, 100, 103, 104, 127, 172, 173, 182, 183, 233, 237, 238, 242, 246, 261, 264, 265, 270, 273, 274, 280, 305, 307], "inds2gpt": [197, 218], "inf": [7, 23, 112, 116, 255, 257, 261, 262, 268, 281, 284, 286], "infinit": 199, "info": [1, 5, 7, 11, 13, 15, 19, 40, 43, 61, 77, 86, 90, 92, 127, 134, 137, 176, 180, 187, 190, 192, 195, 233, 242, 246, 261, 270, 280], "inform": [197, 227, 307], "init": 305, "init_values_float": [281, 308], "init_values_int": 281, "initi": [0, 1, 5, 6, 7, 11, 12, 13, 17, 18, 19, 40, 43, 51, 61, 70, 77, 82, 86, 92, 108, 109, 110, 127, 134, 136, 164, 165, 176, 179, 187, 189, 192, 194, 233, 241, 242, 245, 246, 252, 253, 254, 261, 270, 280, 281, 282, 283, 305, 306, 307, 308], "initial_valu": [5, 6, 11], "initial_values_float": [5, 11, 92, 108, 233, 242, 246, 252, 280, 282, 305, 306, 307], "initial_values_int": [5, 11, 92, 109, 233, 242, 246, 253, 280, 283, 306], "insid": 306, "instal": [229, 302, 303, 309], "instanc": [231, 308], "instanti": 308, "instead": [5, 11, 92, 99, 233, 242, 244, 246, 280, 304, 305], "int": [0, 1, 5, 7, 11, 16, 17, 19, 21, 22, 25, 26, 32, 35, 38, 39, 40, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 91, 92, 94, 95, 96, 99, 100, 101, 105, 106, 107, 109, 110, 113, 117, 118, 119, 120, 121, 127, 129, 136, 138, 139, 140, 142, 159, 172, 174, 179, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 199, 203, 204, 214, 215, 216, 221, 223, 227, 233, 234, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 253, 254, 256, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 283, 285, 287, 307], "int_inf": [5, 11, 92, 93, 113, 117, 197, 198, 199, 233, 242, 246, 256, 258, 280, 281, 285, 287], "int_var": [280, 281], "integ": [1, 5, 7, 11, 19, 28, 29, 30, 31, 33, 34, 40, 43, 44, 45, 46, 47, 49, 50, 56, 58, 61, 63, 65, 66, 67, 68, 77, 79, 80, 81, 92, 97, 98, 99, 103, 104, 105, 106, 107, 109, 113, 117, 126, 127, 172, 182, 204, 215, 218, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 248, 249, 250, 251, 253, 256, 258, 260, 261, 263, 264, 265, 270, 272, 273, 274, 280, 281, 283, 285, 287, 289, 306, 308], "intend": [0, 305], "intent": 307, "interfac": [0, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 290, 303, 305, 306, 307, 308, 310], "interpol": [0, 197, 199, 219, 220, 308], "interpolation_coeffs_point": [197, 219, 220], "introduc": [0, 307], "invalid": 39, "invers": 305, "invit": 303, "invok": [303, 308], "ipopt": [0, 305, 306], "ipynb": 0, "ir": [219, 220], "irrelev": 305, "is_gridi": [197, 221], "is_gridpoint": [197, 222], "is_intprob": [172, 182], "is_mix": 182, "issu": [0, 303], "its": [280, 300, 305], "ivar": [5, 11, 92, 99, 233, 242, 244, 246, 280], "iw": [0, 301, 303], "iwopi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 301, 304, 305, 306, 307, 308, 309, 310], "j": 305, "job": 305, "jona": 301, "joss": 301, "journal": 303, "just": 0, "keep": [0, 304], "kei": [25, 26, 55, 56, 94, 95, 96, 233, 234, 242, 243], "keyf": [25, 26], "kind": [303, 305], "kwarg": [1, 5, 7, 11, 19, 20, 24, 40, 42, 86, 89, 92, 122, 132, 133, 134, 164, 169, 171, 176, 178, 187, 188, 192, 231, 233, 242, 246, 247, 261, 270, 280, 281, 299], "larg": 305, "last": 309, "later": [0, 307], "latest": [0, 304], "latter": 305, "layout": [], "ldot": 305, "lead": 303, "leav": 304, "left": [197, 200, 206, 210, 211, 212, 213, 222, 281, 305, 308], "len": [199, 305, 306], "length": [267, 276, 307, 308], "leq": 305, "let": [305, 306, 307, 308], "level": [16, 17, 21, 22, 49, 50, 51, 67, 68, 70, 82, 88, 91, 95, 96, 99, 100, 101, 105, 106, 107, 110, 136, 138, 139, 140, 142, 159, 174, 179, 181, 184, 186, 189, 191, 194, 196, 239, 240, 241, 244, 245, 250, 251, 254, 290, 297], "libmamba": 304, "licens": 303, "lie": 306, "lightweight": [197, 299], "like": [0, 199, 218, 281, 303, 307], "linalg": [305, 306, 307], "line": [304, 309], "linear": [0, 197, 199], "link": [5, 11, 92, 107, 233, 242, 246, 280, 303, 308], "list": [5, 6, 11, 12, 35, 38, 44, 45, 46, 47, 48, 57, 58, 61, 63, 64, 65, 66, 69, 73, 74, 77, 78, 79, 80, 81, 99, 107, 123, 124, 125, 126, 127, 129, 139, 193, 199, 214, 215, 228, 244, 259, 260, 262, 263, 264, 265, 266, 267, 271, 272, 273, 274, 275, 276, 281, 288, 289, 292, 297, 303, 308], "littl": [290, 299], "ll": [302, 308], "load": [0, 159, 186, 294, 295, 305, 306, 307], "local": [0, 192, 242, 298, 300, 308, 309], "localfd": [0, 233, 242, 243, 244, 245, 300, 303, 305, 308], "locat": [197, 217, 305, 307, 308], "look": 307, "lookup": [25, 30, 31], "lookup_individu": [25, 30], "lookup_popul": [25, 31], "loop": 305, "lot": 308, "lower": [11, 12, 23, 197, 200, 206, 210, 211, 212, 213, 222, 268], "m": 304, "mai": [86, 88, 134, 176, 187, 192, 307], "main": [61, 304, 305], "mainli": 303, "make": [305, 306], "manag": 61, "mani": [0, 305], "manner": [305, 308], "map": [44, 55, 56, 95, 96, 220, 281], "marbl": 307, "mark": 306, "mathrm": [305, 308], "matplotlib": [305, 306, 307], "matrix": 307, "max": [23, 35, 38, 208, 209, 262, 268, 306, 307], "max_dist": 306, "max_siz": 25, "max_values_constraint": [5, 11, 92, 111, 233, 242, 246, 280], "max_values_float": [5, 11, 92, 112, 233, 242, 246, 255, 280, 281, 284, 305, 306, 307, 308], "max_values_int": [5, 11, 92, 113, 233, 242, 246, 256, 280, 281, 285, 306], "maxim": [1, 5, 7, 11, 12, 25, 26, 38, 40, 41, 92, 111, 112, 113, 114, 192, 193, 197, 225, 233, 242, 246, 255, 256, 262, 270, 271, 278, 280, 281, 284, 285, 305, 306, 307], "maximize_obj": [5, 11, 92, 114, 233, 242, 246, 280], "maximum": 305, "maxn": 306, "maxradiu": 305, "maxstretch": 307, "mayb": 0, "mdl": 229, "mean": 307, "meaning": 305, "measur": 307, "meet": 307, "mem_keyf": [92, 94], "mem_siz": [92, 94, 187, 188, 234], "memor": [192, 193, 308], "memori": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 92, 94, 187, 188, 192, 234, 292, 297, 308], "memory_s": [192, 193], "messag": [303, 304], "meta": 303, "method": [197, 199, 305, 308], "might": 309, "min": [23, 208, 209, 261, 262, 268, 307], "min_dist": 306, "min_values_constraint": [5, 11, 92, 115, 233, 242, 246, 280], "min_values_float": [5, 11, 92, 116, 233, 242, 246, 257, 280, 281, 286, 305, 306, 307, 308], "min_values_int": [5, 11, 92, 117, 233, 242, 246, 258, 280, 281, 287, 306], "mindist": 0, "minf": 308, "minf_fd": 308, "minfunc": 308, "minim": [0, 5, 11, 12, 38, 92, 115, 116, 117, 187, 188, 192, 193, 197, 226, 233, 242, 246, 257, 258, 262, 280, 281, 286, 287, 302, 303, 307], "minima": [1, 7], "minimum": 308, "minpotenti": 305, "miss": 304, "mit": 303, "mitig": 307, "mix": [0, 172, 182, 302, 303], "mixedvariablega": [0, 306], "mode": [192, 193], "model": [0, 310], "modifi": [290, 300], "modul": [0, 229, 299], "moment": [172, 182], "more": [0, 303, 305, 310], "mostli": 0, "multi": [0, 35, 292, 302, 303, 308], "multi_obj_chain": 0, "multiobjoptresult": [0, 35, 36, 37, 38, 39, 181, 292], "multiobjproblemtempl": [172, 173, 174, 175, 295], "multipl": [172, 295, 308], "must": 305, "mut": [164, 168], "mutat": [164, 168], "mx": 306, "my": 306, "my_venv": 304, "n": [53, 54, 72, 120, 121, 197, 299, 304, 305, 306, 307], "n_charg": 305, "n_compon": [1, 7, 19, 21, 22, 23, 40, 41, 43, 49, 50, 52, 59, 60, 61, 67, 68, 71, 73, 74, 75, 76, 77, 83, 84, 85, 99, 100, 101, 106, 107, 127, 240, 244, 251, 261, 262, 268, 269, 270, 271, 278, 279, 305, 306, 307, 308], "n_con": 118, "n_con_cmptn": [305, 306, 307, 308], "n_cons_cmpnt": 31, "n_constraint": [5, 11, 33, 34, 35, 36, 92, 102, 103, 104, 105, 106, 111, 115, 118, 129, 130, 233, 237, 238, 239, 240, 242, 246, 250, 251, 280, 305, 306, 307, 308], "n_dim": [197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "n_eval": 306, "n_fit": 139, "n_func_compon": [73, 74], "n_function": [61, 72, 127], "n_gen": 306, "n_gp": 220, "n_gpt": [203, 204, 206, 213, 214, 215, 218, 219, 220], "n_ind": [204, 205, 215], "n_max_gen": [305, 307], "n_max_step": [192, 193], "n_obj": 119, "n_obj_cmptn": [305, 306, 307, 308], "n_object": [5, 11, 33, 34, 35, 36, 92, 103, 104, 105, 114, 119, 233, 237, 238, 239, 242, 246, 250, 280, 305, 306, 307, 308], "n_objs_cmpnt": 31, "n_point": [197, 224], "n_pop": [22, 29, 31, 34, 35, 36, 47, 50, 66, 68, 74, 81, 98, 101, 104, 106, 236, 238, 240, 249, 251, 265, 266, 274, 275, 305, 306, 307], "n_pt": [200, 202, 203, 206, 207, 209, 211, 214, 220], "n_row_max": 306, "n_sel_compon": [45, 46, 47, 63, 65, 66, 79, 80, 81, 263, 264, 265, 267, 272, 273, 274, 276], "n_step": [197, 199], "n_var": [107, 192, 214, 215], "n_vars_al": 139, "n_vars_float": [1, 5, 7, 11, 19, 28, 29, 30, 31, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 49, 50, 53, 59, 61, 63, 65, 66, 67, 68, 75, 77, 79, 80, 81, 84, 92, 97, 98, 99, 103, 104, 105, 106, 107, 108, 112, 116, 120, 127, 129, 130, 192, 233, 235, 236, 237, 238, 239, 240, 242, 244, 246, 248, 249, 250, 251, 252, 255, 257, 261, 263, 264, 265, 270, 272, 273, 274, 280, 282, 284, 286, 305, 306, 307, 308], "n_vars_int": [1, 5, 7, 11, 19, 28, 29, 30, 31, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 49, 50, 54, 60, 61, 63, 65, 66, 67, 68, 76, 77, 79, 80, 81, 85, 92, 97, 98, 99, 103, 104, 105, 106, 107, 109, 113, 117, 121, 127, 129, 130, 233, 235, 236, 237, 238, 239, 240, 242, 244, 246, 248, 249, 250, 251, 253, 256, 258, 261, 263, 264, 265, 270, 272, 273, 274, 280, 283, 285, 287, 305, 306, 307, 308], "n_vr": [99, 244], "nai": 306, "name": [0, 1, 2, 5, 6, 7, 8, 11, 12, 13, 14, 19, 24, 35, 40, 42, 43, 44, 48, 55, 56, 57, 58, 61, 62, 77, 78, 86, 87, 89, 92, 94, 122, 125, 126, 127, 129, 133, 193, 229, 230, 231, 233, 234, 242, 243, 246, 247, 259, 260, 261, 262, 270, 271, 280, 281, 288, 289, 299, 305, 306, 307, 308], "nan": [45, 63, 79, 263, 272], "nax": 306, "naz": 306, "ndarrai": [29, 31, 45, 59, 60, 63, 73, 74, 75, 76, 79, 84, 85, 99, 102, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 123, 124, 139, 192, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 244, 252, 253, 255, 256, 257, 258, 263, 266, 272, 275, 282, 283, 284, 285, 286, 287], "nearbi": 307, "nearest": [0, 197, 199], "necessari": [234, 243], "need": [302, 305, 307, 308], "neg": 305, "neighbour": 307, "neq": 305, "new": [0, 1, 5, 7, 11, 19, 24, 40, 42, 55, 56, 86, 89, 92, 97, 98, 122, 132, 133, 134, 176, 187, 192, 233, 235, 236, 242, 246, 248, 249, 261, 270, 280, 305, 307], "new_branch": 303, "new_cl": [230, 299], "new_inst": [231, 299], "next": [305, 307, 308], "ngen": 0, "nice": 307, "nlopt": 0, "nocross": 307, "non": [23, 268, 304], "none": [0, 1, 4, 5, 7, 10, 11, 19, 25, 26, 30, 31, 35, 39, 40, 43, 44, 45, 46, 47, 61, 63, 65, 66, 77, 78, 79, 80, 81, 92, 94, 95, 96, 99, 107, 127, 176, 178, 197, 199, 212, 213, 216, 229, 233, 234, 242, 243, 244, 246, 261, 262, 263, 264, 265, 267, 270, 271, 272, 273, 274, 280, 281, 299, 305, 306, 307], "norm": [305, 306, 307], "note": [187, 304, 305, 307, 308], "notebook": 0, "notic": [304, 305, 306, 307, 308], "notifi": [160, 163], "now": [0, 305, 306, 307, 308], "np": [21, 22, 23, 28, 29, 30, 31, 33, 34, 35, 36, 41, 45, 46, 47, 49, 50, 63, 65, 66, 67, 68, 79, 80, 81, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 129, 130, 219, 220, 235, 236, 237, 238, 239, 240, 244, 248, 249, 250, 251, 263, 264, 265, 268, 272, 273, 274, 278, 281, 305, 306, 307], "npop": 0, "nsga2": [0, 307], "number": [1, 5, 7, 11, 19, 25, 26, 32, 40, 43, 44, 52, 53, 54, 61, 71, 72, 77, 83, 92, 118, 119, 120, 121, 127, 187, 188, 192, 193, 197, 199, 223, 224, 233, 242, 246, 261, 262, 269, 270, 271, 279, 280, 301, 306, 307, 308], "numer": [0, 308], "numpi": [0, 29, 31, 45, 59, 60, 63, 73, 74, 75, 76, 79, 84, 85, 99, 102, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 123, 124, 139, 192, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 244, 252, 253, 255, 256, 257, 258, 263, 266, 272, 275, 282, 283, 284, 285, 286, 287, 305, 306, 307], "nx": 306, "ny": 306, "obj": [25, 30, 33, 34, 35, 36, 92, 103, 104, 105, 106, 129, 130, 187, 188, 192, 231, 237, 238, 239, 240, 250, 251, 308], "obj_0": [35, 39], "obj_1": [35, 39], "obj_weight": [35, 38], "object": [0, 1, 5, 7, 11, 13, 16, 17, 19, 25, 26, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 51, 61, 70, 77, 82, 86, 88, 91, 92, 94, 95, 96, 99, 103, 104, 105, 106, 107, 114, 119, 123, 124, 127, 129, 130, 133, 134, 136, 138, 139, 142, 172, 174, 176, 178, 179, 181, 182, 184, 187, 189, 191, 192, 193, 194, 196, 230, 231, 233, 237, 238, 239, 240, 242, 244, 246, 250, 251, 261, 270, 280, 291, 292, 295, 297, 300, 302, 303, 305, 306, 308], "objective_typ": [1, 7, 40, 42, 270], "obtain": [5, 11, 92, 107, 233, 242, 246, 280], "obviou": 308, "obvious": [303, 307], "off": [212, 213, 216], "offer": 308, "often": [305, 308], "old": [55, 56], "onam": [35, 129, 308], "onc": 304, "one": [197, 209, 266, 267, 275, 276, 305, 307], "onli": [99, 172, 182, 244, 304, 305, 307], "onward": 307, "open": [301, 303], "oper": 305, "opt": [0, 304, 310], "opt_result": [86, 88, 134, 176, 187, 192], "optfunct": [19, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 69, 77, 78, 292, 297], "optfunctionlist": [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 99, 107, 127, 244, 292], "optfunctionsubset": [77, 78, 79, 80, 81, 82, 83, 84, 85, 292], "optim": [0, 2, 8, 19, 35, 36, 43, 44, 49, 62, 67, 86, 87, 88, 89, 90, 91, 92, 105, 129, 130, 133, 134, 135, 138, 139, 140, 142, 174, 176, 177, 178, 181, 184, 187, 188, 191, 192, 193, 194, 195, 196, 239, 250, 262, 271, 290, 292, 293, 294, 295, 296, 297, 301, 302, 303, 304, 305, 306, 307, 308], "optimizer_pygmo": [134, 135, 136, 137, 138, 294], "optimizer_pymoo": [176, 177, 178, 179, 180, 181, 295, 305, 306, 307], "optimizer_scipi": [187, 188, 189, 190, 191, 296, 308], "optimizer_typ": [86, 89, 134, 176, 187, 192], "optimum": [192, 298, 305], "optimz": [187, 188, 304], "option": [0, 24, 26, 31, 39, 42, 44, 46, 47, 65, 66, 78, 80, 81, 89, 94, 95, 96, 99, 103, 104, 107, 122, 133, 173, 178, 181, 183, 188, 193, 199, 206, 214, 215, 220, 222, 229, 231, 234, 237, 238, 243, 244, 247, 262, 264, 265, 267, 271, 273, 274, 281, 305, 308], "optoin": 304, "optresult": [0, 88, 91, 308], "orang": [39, 305, 306, 307], "order": [0, 99, 107, 197, 203, 204, 214, 215, 233, 234, 242, 243, 244, 266, 267, 275, 276, 302, 305, 308], "orderb": [197, 203, 204, 214, 215, 233, 242], "org": 301, "origin": [77, 78, 197, 199, 303, 308], "osx": 0, "other": [61, 73, 74, 127, 303, 305, 307], "otherwis": [30, 31, 38, 44, 266, 267, 275, 276], "our": [305, 306, 307, 308], "out": [0, 192, 303, 305], "outermost": [200, 206, 210, 211, 212, 213, 222, 307], "output": [232, 299], "outsid": 306, "over": 305, "overal": 307, "overload": [99, 244, 305], "overwritten": [172, 173], "own": [290, 298], "p": [197, 201, 208, 210, 217, 219, 222], "p0": [210, 211], "p_max": [197, 225], "p_min": [197, 226], "packag": [0, 159, 186, 229, 290, 291, 293, 294, 295, 296, 297, 299, 303, 304, 308, 310], "page": 301, "pair": 305, "paper": 303, "par": [7, 8, 164, 166, 167, 168], "paramet": [0, 1, 7, 25, 132, 134, 176, 187, 294, 303, 306, 308], "pareto": [35, 36, 38, 39, 307], "part": [], "parteo": [35, 36], "parti": 304, "particl": 305, "particular": 305, "particularli": 305, "pass": [0, 308], "path": 304, "pc": 307, "pcd": 307, "per": [197, 209, 305, 307], "perfectli": 305, "pg": 220, "pi": [1, 307], "pick": 307, "pip": [302, 303, 309], "pipe": [280, 300], "placehold": 304, "plan": 307, "pleas": [301, 303, 309], "plot": [39, 178, 307], "plot_pareto": [35, 39, 307], "plt": [178, 305, 306, 307], "pmap": 220, "pname": [35, 129], "point": [35, 38, 39, 61, 178, 192, 193, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 233, 234, 242, 243, 299, 305, 306, 308], "polul": 307, "pop": [99, 107, 132, 133, 139, 140, 244], "pop_siz": [305, 306, 307], "popul": [1, 5, 7, 11, 19, 22, 25, 34, 40, 43, 47, 50, 61, 66, 68, 77, 81, 92, 98, 99, 101, 104, 106, 107, 127, 142, 172, 173, 182, 183, 233, 236, 238, 240, 242, 244, 246, 249, 251, 261, 265, 266, 270, 274, 275, 280, 303, 305, 307], "posit": [305, 307], "possibl": [1, 7, 19, 40, 43, 45, 61, 63, 77, 79, 127, 261, 263, 270, 272, 303], "potenti": [302, 303], "pre": 304, "precis": [197, 199], "predecessor": 0, "prepend": 227, "pretti": 0, "prevent": 307, "previous": 107, "print": [0, 86, 90, 134, 137, 164, 171, 176, 180, 187, 190, 192, 195, 197, 227, 232, 299, 305, 306, 308], "print_info": [86, 90, 134, 137, 176, 180, 187, 190, 192, 195, 197, 227, 305, 306, 307, 308], "prob_r": [103, 104, 123, 124, 237, 238], "prob_res_einsum_individu": [5, 11, 92, 123, 233, 242, 246, 280], "prob_res_einsum_popul": [5, 11, 92, 124, 233, 242, 246, 280], "prob_res_list": [5, 11, 92, 123, 124, 233, 242, 246, 280], "problem": [0, 1, 2, 5, 6, 7, 8, 11, 12, 19, 35, 36, 40, 43, 44, 46, 47, 49, 50, 61, 62, 65, 66, 67, 68, 77, 80, 81, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 139, 140, 142, 172, 173, 174, 176, 177, 182, 183, 184, 185, 187, 188, 192, 193, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 261, 262, 264, 265, 270, 271, 273, 274, 280, 281, 291, 292, 294, 295, 297, 300, 302, 303, 305, 307, 308], "problem_par": [134, 135, 176, 177, 305, 306, 307], "problem_result": [1, 7, 19, 35, 36, 40, 43, 46, 47, 49, 50, 61, 65, 66, 67, 68, 77, 80, 81, 97, 98, 105, 106, 127, 129, 130, 235, 236, 239, 240, 248, 249, 250, 251, 261, 264, 265, 270, 273, 274, 305, 306, 307, 308], "problem_typ": [5, 11, 92, 122, 233, 242, 246, 280], "problemdefaultfunc": [107, 127, 128, 292], "problemwrapp": [242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 300], "proce": 308, "produc": 307, "project": [0, 192, 305], "proof": 305, "properti": [1, 5, 7, 11, 13, 18, 19, 25, 32, 40, 43, 48, 53, 54, 57, 58, 61, 69, 72, 77, 86, 92, 102, 111, 114, 115, 118, 119, 120, 121, 127, 134, 176, 187, 192, 197, 223, 224, 225, 226, 233, 242, 246, 261, 270, 277, 280], "provid": [233, 242, 297, 300, 303, 305, 308], "pso": 0, "pt": [197, 200, 202, 203, 206, 207, 209, 211, 214, 220], "publish": 301, "pull": 303, "pure": [172, 182], "purpos": [0, 305], "push": 303, "put": 303, "px": 220, "pxy": 307, "pygmo": [0, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 176, 293, 302, 303, 305, 309], "pygmo_pop": [139, 142], "pymoo": [0, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 293, 302, 303, 305, 306, 307, 309], "pymoo_problem": [164, 165, 176], "pymoo_result": [172, 174, 182, 184], "pyplot": [39, 305, 306, 307], "pytest": 309, "python": [0, 232, 301, 303, 310], "q": [201, 202], "quad": 305, "question": 232, "r": [1, 305, 307], "r_i": 305, "r_j": 305, "radial": 305, "radii": 307, "radiu": [305, 306, 307], "radius_0": 305, "radius_1": 305, "radius_10": 305, "radius_11": 305, "radius_12": 305, "radius_13": 305, "radius_14": 305, "radius_15": 305, "radius_16": 305, "radius_17": 305, "radius_18": 305, "radius_19": 305, "radius_2": 305, "radius_20": 305, "radius_21": 305, "radius_22": 305, "radius_23": 305, "radius_24": 305, "radius_25": 305, "radius_26": 305, "radius_27": 305, "radius_28": 305, "radius_29": 305, "radius_3": 305, "radius_30": 305, "radius_31": 305, "radius_32": 305, "radius_33": 305, "radius_34": 305, "radius_35": 305, "radius_36": 305, "radius_37": 305, "radius_38": 305, "radius_39": 305, "radius_4": 305, "radius_40": 305, "radius_41": 305, "radius_42": 305, "radius_43": 305, "radius_44": 305, "radius_45": 305, "radius_46": 305, "radius_47": 305, "radius_48": 305, "radius_49": 305, "radius_5": 305, "radius_6": 305, "radius_7": 305, "radius_8": 305, "radius_9": 305, "rais": 303, "random": [305, 307], "rang": [305, 306, 307], "ratg": [219, 220], "re": 308, "reach": [192, 193, 297], "readi": [0, 306, 307, 308], "recommend": [1, 7, 304, 305], "recov": 0, "red": 39, "reduc": [192, 200, 206, 210, 211, 212, 213, 222], "regular": [197, 233, 299, 300, 306, 308], "regulardiscretizationgrid": [0, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 234, 299, 303], "releas": [0, 304], "relev": [203, 204, 214, 215, 219, 220, 305], "remov": [0, 304, 308], "renam": [1, 7, 19, 40, 43, 55, 56, 61, 77, 127, 261, 270], "rename_vars_float": [1, 7, 19, 40, 43, 55, 61, 77, 127, 261, 270], "rename_vars_int": [1, 7, 19, 40, 43, 56, 61, 77, 127, 261, 270], "repeat": [307, 308], "replac": [304, 309], "report": 303, "repositori": [303, 304, 309], "repres": [203, 204, 214, 215, 305, 307], "request": [303, 308], "requir": [303, 305, 307, 308, 309], "reshap": [305, 306], "respect": [305, 306], "restrict": 0, "result": [5, 11, 21, 22, 25, 26, 30, 31, 35, 36, 38, 46, 47, 49, 50, 61, 65, 66, 67, 68, 73, 74, 80, 81, 88, 91, 92, 97, 98, 100, 101, 103, 104, 105, 106, 123, 124, 127, 129, 130, 138, 142, 174, 181, 184, 191, 196, 219, 220, 233, 235, 236, 237, 238, 239, 240, 242, 246, 248, 249, 250, 251, 264, 265, 266, 267, 273, 274, 275, 276, 280, 292, 297, 305, 306, 307, 308], "ret_ind": [197, 206, 222], "ret_pmap": [197, 220], "ret_prob_r": [5, 11, 92, 103, 104, 233, 237, 238, 242, 246, 280], "return": [1, 7, 19, 21, 25, 26, 35, 37, 40, 43, 61, 77, 94, 127, 129, 131, 261, 270, 305, 306, 307, 308], "revers": [0, 192], "revert": 305, "right": [281, 305, 308], "rmax": 307, "rmin": 307, "root": 304, "rosenbrock": [0, 7, 8, 9, 10, 11, 12], "rosenbrockobject": [7, 8, 9, 10, 291], "rosenbrockproblem": [11, 12, 291], "rule": [0, 308], "run": [1, 5, 7, 11, 19, 24, 40, 42, 86, 89, 91, 92, 122, 134, 138, 176, 181, 187, 191, 192, 193, 196, 230, 231, 233, 242, 246, 261, 270, 280, 294, 299, 302, 305, 306, 307, 308, 309], "s_": 305, "sake": 305, "same": [0, 234, 243, 261, 270, 300, 305, 308], "samp_nam": [164, 169], "sampl": [164, 169, 305, 307], "scalar": [43, 266, 275, 292, 305, 308], "scatter": [39, 178, 305, 306], "schult": 301, "schulte2024": 301, "scipi": [0, 187, 188, 189, 190, 191, 293, 303, 308], "scipy_par": [187, 188, 308], "script": 0, "search": [192, 228, 298, 299], "secondari": 307, "section": 0, "see": [164, 165, 305], "seed": [305, 306, 307], "sel_grid": [205, 206, 207], "select": [0, 24, 42, 45, 46, 47, 63, 65, 66, 79, 80, 81, 89, 99, 107, 122, 205, 206, 207, 233, 244, 263, 264, 265, 267, 272, 273, 274, 276, 290, 297, 300, 305, 306, 307], "selector": [230, 299], "self": [35, 37, 113, 117, 129, 131, 164, 165, 256, 258, 281, 285, 287, 305, 306, 307, 308], "serial": [134, 294], "serv": 307, "set": [178, 197, 220, 281, 304, 305, 307], "set_alpha": 307, "set_aspect": [305, 306, 307], "set_titl": [305, 306, 307], "set_xlabel": [305, 306, 307], "set_xlim": 307, "set_ylabel": [305, 306, 307], "set_ylim": 307, "setup": [0, 134, 135, 176, 177, 305, 307, 308], "setup_par": [134, 135, 176, 177, 305, 306, 307], "shape": [21, 22, 23, 28, 29, 30, 31, 33, 34, 35, 36, 41, 45, 46, 47, 49, 50, 59, 60, 63, 65, 66, 67, 68, 73, 74, 75, 76, 79, 80, 81, 84, 85, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 129, 130, 139, 192, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 235, 236, 237, 238, 239, 240, 244, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 262, 263, 264, 265, 266, 268, 272, 273, 274, 275, 278, 282, 283, 284, 285, 286, 287, 306], "shoot": 303, "shortcut": 290, "shortli": 305, "should": [303, 304], "show": [35, 39, 176, 178, 305, 306, 307], "signatur": [164, 165], "silent": [16, 17, 21, 22, 49, 50, 51, 67, 68, 70, 82, 88, 91, 95, 96, 99, 100, 101, 105, 106, 107, 110, 136, 138, 139, 140, 142, 159, 174, 179, 181, 184, 186, 189, 191, 194, 196, 232, 239, 240, 241, 244, 245, 250, 251, 254, 299], "similar": 308, "simpl": [0, 261, 270, 300, 302, 303, 305, 307], "simpleconstraint": [0, 261, 262, 263, 264, 265, 266, 267, 268, 269, 300, 308], "simpleobject": [0, 1, 7, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 291, 300, 308], "simpleproblem": [5, 11, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 300, 308], "simpli": [280, 300, 307, 308], "simplifi": [290, 300], "sin": [306, 307], "sinc": [0, 303, 305, 307, 308], "singl": [1, 5, 7, 11, 19, 40, 43, 46, 61, 65, 77, 80, 92, 103, 127, 129, 182, 233, 237, 242, 246, 261, 264, 267, 270, 273, 276, 280, 292, 295, 305, 308], "singleobjoptresult": [0, 129, 130, 131, 138, 142, 174, 181, 184, 191, 196, 292], "singleobjproblem": [172, 175, 176], "singleobjproblemtempl": [182, 183, 184, 185, 295], "size": [25, 26, 32, 39, 61, 94, 187, 188, 192, 193, 197, 199, 234, 243, 305, 306, 308], "slsqp": 308, "small": 0, "so": [0, 302, 305, 307], "softwar": [301, 310], "solut": [178, 305, 306, 307, 308], "solv": [0, 86, 90, 91, 134, 137, 138, 172, 173, 176, 180, 181, 182, 183, 187, 190, 191, 192, 195, 196, 303, 305, 306, 307, 308], "solvabl": 0, "solver": [86, 90, 91, 134, 137, 138, 142, 174, 176, 180, 181, 184, 187, 190, 191, 192, 195, 196, 292, 295, 303, 304, 305, 306, 307, 308], "some": [228, 299, 303], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 116, 117, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304], "space": [197, 200, 211, 227], "sparsiti": 305, "specif": 305, "specifi": 44, "speed": [303, 305], "sphinx": 0, "split": [0, 61, 73, 74, 127], "split_individu": [61, 73, 127], "split_popul": [61, 74, 127], "squar": 305, "stabl": 304, "stack": [306, 307], "stackoverflow": 232, "stand": 305, "start": [0, 303, 305, 308], "static": [132, 133], "steepest": [192, 305], "step": [192, 193, 197, 199, 234, 243, 304], "step_div_factor": [192, 193], "step_max": [192, 193, 305], "step_min": [192, 193, 305], "stepwis": [242, 300], "storag": [25, 197, 292, 297, 299], "store": [25, 26, 32, 33, 34, 187, 188], "store_individu": [25, 33], "store_popul": [25, 34], "str": [2, 6, 8, 12, 13, 14, 15, 24, 35, 37, 39, 42, 44, 48, 55, 56, 57, 58, 62, 78, 86, 87, 89, 94, 95, 96, 107, 122, 125, 126, 129, 131, 133, 193, 197, 199, 229, 233, 234, 242, 243, 247, 259, 260, 262, 271, 281, 288, 289], "straight": [0, 307, 308], "stretch": 307, "stretch_i": 307, "stretch_x": 307, "strictli": 305, "string": [1, 5, 7, 11, 13, 15, 19, 40, 43, 61, 77, 86, 92, 127, 134, 176, 187, 192, 230, 231, 233, 242, 246, 261, 270, 280, 307], "strongli": 304, "style": 0, "subplot": [305, 306, 307], "subsequ": 304, "subset": [61, 77, 78, 205, 206, 207, 292], "success": [35, 36, 129, 130, 305, 306, 307, 308], "successfulli": [305, 306, 307], "sum": [5, 11, 92, 118, 119, 123, 124, 139, 233, 242, 246, 280, 305, 306], "sum_": 305, "super": [305, 306, 307], "support": [0, 172, 182, 187, 304, 305, 306], "suppress": 232, "suppress_stdout": [232, 299], "surpress": [232, 299], "switch": [2, 6, 8, 12, 172, 173, 182, 183], "system": [0, 305], "t": [1, 61], "target": [25, 31], "task": 305, "tell": 304, "templat": [160, 172, 173, 182, 295], "term_par": [164, 170, 176, 177, 305, 306, 307], "termin": [164, 170, 176, 305, 306, 307], "test": [0, 303], "text": [305, 308], "than": 305, "thank": [0, 303], "thei": [0, 305, 307], "them": [305, 307, 308], "therefor": [305, 308], "thi": [0, 61, 86, 88, 107, 134, 172, 176, 182, 187, 192, 303, 304, 305, 306, 307, 308], "thing": 307, "third": 304, "those": [200, 206, 210, 211, 212, 213, 222, 304, 305, 307, 308], "three": 1, "throw": [212, 213, 216], "thu": 303, "time": [1, 5, 7, 11, 19, 24, 40, 42, 86, 89, 92, 122, 134, 176, 187, 192, 230, 231, 233, 242, 246, 261, 270, 280, 299], "titl": [39, 301, 307], "tol": [19, 20, 197, 199, 305, 306, 307, 308], "toler": [5, 11, 19, 20, 92, 102, 139, 140, 192, 193, 197, 199, 201, 202, 233, 242, 246, 280, 306, 308], "too": 307, "tool": [233, 301, 303], "top": [290, 297], "total": [5, 11, 72, 92, 118, 119, 233, 242, 246, 280, 306], "touch": 307, "tracker": 303, "transfer": 0, "translat": [197, 216, 218], "treatment": 232, "troubl": 303, "true": [18, 28, 29, 193, 197, 200, 206, 210, 211, 212, 213, 216, 217, 221, 222, 232, 262, 271, 299, 305, 306, 307, 308], "try": 0, "tupl": [8, 24, 25, 30, 39, 42, 89, 122, 192, 231, 266, 267, 275, 276], "two": [305, 306, 307, 308], "type": [0, 25, 132, 133, 164, 165, 281, 305, 306, 307, 308], "typic": 107, "u": 307, "uda": 134, "udp": [134, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 294], "unbound": [112, 113, 116, 117, 255, 256, 257, 258, 281, 284, 285, 286, 287], "unconstrain": 308, "unconstraint": 7, "under": 303, "underli": [1, 2, 7, 8, 19, 40, 43, 44, 46, 61, 62, 65, 77, 80, 127, 234, 243, 246, 247, 261, 262, 264, 270, 271, 273], "understood": 303, "unequ": 305, "uniform": [193, 305, 307], "unit": 305, "unless": 308, "until": [192, 193], "up": [303, 305], "updat": [0, 305, 307], "upper": [11, 12, 23, 268, 307], "url": 301, "us": [0, 44, 45, 63, 79, 112, 113, 116, 117, 199, 255, 256, 257, 258, 263, 272, 281, 284, 285, 286, 287, 303, 304, 305, 306, 307, 308], "usag": [290, 300, 308], "user": 303, "userdefinedproblem": [139, 294], "usual": 308, "util": [0, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 290], "uv": 307, "v": [305, 308], "v0": 303, "valid": [39, 178, 197, 221, 305, 306], "valid_dict": [176, 178], "valu": [1, 5, 6, 7, 11, 12, 19, 21, 22, 25, 28, 29, 30, 31, 33, 34, 35, 36, 38, 40, 43, 45, 46, 47, 49, 50, 55, 56, 61, 63, 65, 66, 67, 68, 73, 74, 77, 79, 80, 81, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 127, 129, 130, 139, 193, 197, 208, 209, 225, 226, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 261, 262, 263, 264, 265, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 287, 305, 306, 307, 308], "var": [1, 4, 7, 10, 19, 40, 43, 45, 61, 63, 77, 79, 107, 127, 197, 203, 204, 214, 215, 261, 263, 267, 270, 272, 276], "var_names_float": [1, 5, 7, 11, 19, 40, 43, 57, 61, 77, 92, 125, 127, 233, 242, 246, 259, 261, 270, 280, 288, 305, 306, 307], "var_names_int": [1, 5, 7, 11, 19, 40, 43, 58, 61, 77, 92, 126, 127, 233, 242, 246, 260, 261, 270, 280, 289, 306], "vardeps_float": [1, 7, 19, 40, 43, 59, 61, 75, 77, 84, 127, 261, 270, 305], "vardeps_int": [1, 7, 19, 40, 43, 60, 61, 76, 77, 85, 127, 261, 270], "variabl": [1, 5, 7, 11, 12, 19, 28, 29, 30, 31, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 75, 76, 77, 79, 80, 81, 84, 85, 92, 95, 96, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 112, 113, 116, 117, 120, 121, 125, 126, 127, 129, 130, 139, 192, 193, 203, 204, 214, 215, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 270, 272, 273, 274, 275, 276, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 300, 305, 306, 307, 308], "varib": [267, 276], "variou": [13, 292], "varmap": [1, 7, 19, 40, 43, 55, 56, 61, 77, 127, 261, 270], "varmap_float": [5, 11, 92, 95, 96, 233, 242, 246, 280], "varmap_int": [5, 11, 92, 95, 96, 233, 242, 246, 280], "vars_float": [1, 5, 7, 11, 19, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 40, 43, 45, 46, 47, 49, 50, 61, 63, 65, 66, 67, 68, 77, 79, 80, 81, 92, 94, 97, 98, 99, 103, 104, 105, 106, 107, 127, 129, 130, 233, 235, 236, 237, 238, 239, 240, 242, 244, 246, 248, 249, 250, 251, 261, 263, 264, 265, 270, 272, 273, 274, 280, 305, 306, 307, 308], "vars_int": [1, 5, 7, 11, 19, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 40, 43, 45, 46, 47, 49, 50, 61, 63, 65, 66, 67, 68, 77, 79, 80, 81, 92, 94, 97, 98, 99, 103, 104, 105, 106, 107, 127, 129, 130, 233, 235, 236, 237, 238, 239, 240, 242, 244, 246, 248, 249, 250, 251, 261, 263, 264, 265, 270, 272, 273, 274, 280, 305, 306, 307, 308], "vast": [303, 305], "vector": [99, 107, 139, 140, 172, 173, 182, 183, 187, 192, 193, 244, 303, 305, 306, 307], "vectoriz": 305, "venv": 304, "verbos": [1, 5, 7, 11, 13, 16, 17, 19, 21, 22, 40, 43, 49, 50, 51, 61, 67, 68, 70, 77, 82, 86, 88, 91, 92, 95, 96, 99, 100, 101, 105, 106, 107, 110, 127, 134, 136, 138, 139, 140, 142, 159, 164, 165, 172, 174, 176, 179, 181, 182, 184, 186, 187, 189, 191, 192, 194, 196, 233, 239, 240, 241, 242, 244, 245, 246, 250, 251, 254, 261, 270, 280, 294, 295, 305, 306, 307], "version": [0, 303, 304], "via": [0, 61, 99, 107, 244, 297, 303, 305, 306, 307, 308], "violat": [0, 19, 20, 192, 305], "visit": [192, 193], "visual": 307, "vname": 305, "vnames_float": [35, 44, 129, 305, 306, 307, 308], "vnames_int": [35, 44, 129, 306, 308], "volum": 301, "vr": [99, 244], "w": 307, "wa": [305, 307], "wai": [192, 308], "wake": 310, "want": [305, 307, 308, 309], "we": [0, 304, 305, 306, 307, 308], "weight": [35, 38, 123, 124, 307], "well": 307, "were": 107, "when": [303, 305, 307, 308], "whenev": [303, 305], "where": 305, "wherea": 305, "which": [99, 107, 178, 203, 204, 214, 215, 244, 280, 300, 305, 307, 308], "while": 304, "whole": [5, 11, 92, 98, 233, 236, 242, 246, 249, 280], "whose": 307, "wind": [302, 303], "within": [197, 217, 267, 276, 304, 305, 306, 307], "without": [192, 193, 197, 299, 304], "work": [0, 304, 305, 308], "world": 303, "worth": 0, "would": [305, 307], "wrap": 308, "wrapper": [0, 1, 5, 7, 11, 172, 182, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 303, 308], "write": 31, "wrt": [99, 107, 172, 173, 182, 183, 203, 204, 214, 215, 244], "x": [0, 1, 3, 4, 7, 9, 10, 39, 139, 151, 192, 219, 220, 261, 266, 267, 270, 275, 276, 305, 306, 307, 308], "x0": [305, 306], "x1": 305, "x10": 305, "x11": 305, "x12": 305, "x13": 305, "x14": 305, "x15": 305, "x16": 305, "x17": 305, "x18": 305, "x19": 305, "x2": 305, "x20": 305, "x21": 305, "x22": 305, "x23": 305, "x24": 305, "x25": 305, "x26": 305, "x27": 305, "x28": 305, "x29": 305, "x3": 305, "x30": 305, "x31": 305, "x32": 305, "x33": 305, "x34": 305, "x35": 305, "x36": 305, "x37": 305, "x38": 305, "x39": 305, "x4": 305, "x40": 305, "x41": 305, "x42": 305, "x43": 305, "x44": 305, "x45": 305, "x46": 305, "x47": 305, "x48": 305, "x49": 305, "x5": 305, "x6": 305, "x7": 305, "x8": 305, "x9": 305, "x_": 305, "x_0": 305, "x_i": 305, "xtol": [305, 307], "xy": [305, 306, 307], "xy0": 307, "xy_del": 307, "xy_imax": 307, "xy_imin": 307, "xy_init": 305, "xy_max": 307, "xy_min": 307, "y": [0, 1, 3, 4, 7, 9, 10, 39, 305, 306, 307, 308], "y0": [305, 306], "y1": 305, "y10": 305, "y11": 305, "y12": 305, "y13": 305, "y14": 305, "y15": 305, "y16": 305, "y17": 305, "y18": 305, "y19": 305, "y2": 305, "y20": 305, "y21": 305, "y22": 305, "y23": 305, "y24": 305, "y25": 305, "y26": 305, "y27": 305, "y28": 305, "y29": 305, "y3": 305, "y30": 305, "y31": 305, "y32": 305, "y33": 305, "y34": 305, "y35": 305, "y36": 305, "y37": 305, "y38": 305, "y39": 305, "y4": 305, "y40": 305, "y41": 305, "y42": 305, "y43": 305, "y44": 305, "y45": 305, "y46": 305, "y47": 305, "y48": 305, "y49": 305, "y5": 305, "y6": 305, "y7": 305, "y8": 305, "y9": 305, "y_": 305, "y_0": 305, "y_i": 305, "year": 301, "yet": 303, "you": [302, 304, 308, 309], "your": [303, 304], "zero": [305, 306, 307], "zeros_lik": 306}, "titles": ["History", "iwopy.benchmarks.branin.BraninObjective", "iwopy.benchmarks.branin.BraninObjective.__init__", "iwopy.benchmarks.branin.BraninObjective.f", "iwopy.benchmarks.branin.BraninObjective.g", "iwopy.benchmarks.branin.BraninProblem", "iwopy.benchmarks.branin.BraninProblem.__init__", "iwopy.benchmarks.rosenbrock.RosenbrockObjective", "iwopy.benchmarks.rosenbrock.RosenbrockObjective.__init__", "iwopy.benchmarks.rosenbrock.RosenbrockObjective.f", "iwopy.benchmarks.rosenbrock.RosenbrockObjective.g", "iwopy.benchmarks.rosenbrock.RosenbrockProblem", "iwopy.benchmarks.rosenbrock.RosenbrockProblem.__init__", "iwopy.core.Base", "iwopy.core.Base.__init__", "iwopy.core.Base.__str__", "iwopy.core.Base.finalize", "iwopy.core.Base.initialize", "iwopy.core.Base.initialized", "iwopy.core.Constraint", "iwopy.core.Constraint.__init__", "iwopy.core.Constraint.check_individual", "iwopy.core.Constraint.check_population", "iwopy.core.Constraint.get_bounds", "iwopy.core.Constraint.new", "iwopy.core.Memory", "iwopy.core.Memory.__init__", "iwopy.core.Memory.clear", "iwopy.core.Memory.found_individual", "iwopy.core.Memory.found_population", "iwopy.core.Memory.lookup_individual", "iwopy.core.Memory.lookup_population", "iwopy.core.Memory.size", "iwopy.core.Memory.store_individual", "iwopy.core.Memory.store_population", "iwopy.core.MultiObjOptResults", "iwopy.core.MultiObjOptResults.__init__", "iwopy.core.MultiObjOptResults.__str__", "iwopy.core.MultiObjOptResults.find_pareto_objmix", "iwopy.core.MultiObjOptResults.plot_pareto", "iwopy.core.Objective", "iwopy.core.Objective.maximize", "iwopy.core.Objective.new", "iwopy.core.OptFunction", "iwopy.core.OptFunction.__init__", "iwopy.core.OptFunction.ana_deriv", "iwopy.core.OptFunction.calc_individual", "iwopy.core.OptFunction.calc_population", "iwopy.core.OptFunction.component_names", "iwopy.core.OptFunction.finalize_individual", "iwopy.core.OptFunction.finalize_population", "iwopy.core.OptFunction.initialize", "iwopy.core.OptFunction.n_components", "iwopy.core.OptFunction.n_vars_float", "iwopy.core.OptFunction.n_vars_int", "iwopy.core.OptFunction.rename_vars_float", "iwopy.core.OptFunction.rename_vars_int", "iwopy.core.OptFunction.var_names_float", "iwopy.core.OptFunction.var_names_int", "iwopy.core.OptFunction.vardeps_float", "iwopy.core.OptFunction.vardeps_int", "iwopy.core.OptFunctionList", "iwopy.core.OptFunctionList.__init__", "iwopy.core.OptFunctionList.ana_deriv", "iwopy.core.OptFunctionList.append", "iwopy.core.OptFunctionList.calc_individual", "iwopy.core.OptFunctionList.calc_population", "iwopy.core.OptFunctionList.finalize_individual", "iwopy.core.OptFunctionList.finalize_population", "iwopy.core.OptFunctionList.functions", "iwopy.core.OptFunctionList.initialize", "iwopy.core.OptFunctionList.n_components", "iwopy.core.OptFunctionList.n_functions", "iwopy.core.OptFunctionList.split_individual", "iwopy.core.OptFunctionList.split_population", "iwopy.core.OptFunctionList.vardeps_float", "iwopy.core.OptFunctionList.vardeps_int", "iwopy.core.OptFunctionSubset", "iwopy.core.OptFunctionSubset.__init__", "iwopy.core.OptFunctionSubset.ana_deriv", "iwopy.core.OptFunctionSubset.calc_individual", "iwopy.core.OptFunctionSubset.calc_population", "iwopy.core.OptFunctionSubset.initialize", "iwopy.core.OptFunctionSubset.n_components", "iwopy.core.OptFunctionSubset.vardeps_float", "iwopy.core.OptFunctionSubset.vardeps_int", "iwopy.core.Optimizer", "iwopy.core.Optimizer.__init__", "iwopy.core.Optimizer.finalize", "iwopy.core.Optimizer.new", "iwopy.core.Optimizer.print_info", "iwopy.core.Optimizer.solve", "iwopy.core.Problem", "iwopy.core.Problem.INT_INF", "iwopy.core.Problem.__init__", "iwopy.core.Problem.add_constraint", "iwopy.core.Problem.add_objective", "iwopy.core.Problem.apply_individual", "iwopy.core.Problem.apply_population", "iwopy.core.Problem.calc_gradients", "iwopy.core.Problem.check_constraints_individual", "iwopy.core.Problem.check_constraints_population", "iwopy.core.Problem.constraints_tol", "iwopy.core.Problem.evaluate_individual", "iwopy.core.Problem.evaluate_population", "iwopy.core.Problem.finalize_individual", "iwopy.core.Problem.finalize_population", "iwopy.core.Problem.get_gradients", "iwopy.core.Problem.initial_values_float", "iwopy.core.Problem.initial_values_int", "iwopy.core.Problem.initialize", "iwopy.core.Problem.max_values_constraints", "iwopy.core.Problem.max_values_float", "iwopy.core.Problem.max_values_int", "iwopy.core.Problem.maximize_objs", "iwopy.core.Problem.min_values_constraints", "iwopy.core.Problem.min_values_float", "iwopy.core.Problem.min_values_int", "iwopy.core.Problem.n_constraints", "iwopy.core.Problem.n_objectives", "iwopy.core.Problem.n_vars_float", "iwopy.core.Problem.n_vars_int", "iwopy.core.Problem.new", "iwopy.core.Problem.prob_res_einsum_individual", "iwopy.core.Problem.prob_res_einsum_population", "iwopy.core.Problem.var_names_float", "iwopy.core.Problem.var_names_int", "iwopy.core.ProblemDefaultFunc", "iwopy.core.ProblemDefaultFunc.__init__", "iwopy.core.SingleObjOptResults", "iwopy.core.SingleObjOptResults.__init__", "iwopy.core.SingleObjOptResults.__str__", "iwopy.interfaces.pygmo.AlgoFactory", "iwopy.interfaces.pygmo.AlgoFactory.new", "iwopy.interfaces.pygmo.Optimizer_pygmo", "iwopy.interfaces.pygmo.Optimizer_pygmo.__init__", "iwopy.interfaces.pygmo.Optimizer_pygmo.initialize", "iwopy.interfaces.pygmo.Optimizer_pygmo.print_info", "iwopy.interfaces.pygmo.Optimizer_pygmo.solve", "iwopy.interfaces.pygmo.UDP", "iwopy.interfaces.pygmo.UDP.__init__", "iwopy.interfaces.pygmo.UDP.batch_fitness", "iwopy.interfaces.pygmo.UDP.finalize", "iwopy.interfaces.pygmo.UDP.fitness", "iwopy.interfaces.pygmo.UDP.get_bounds", "iwopy.interfaces.pygmo.UDP.get_extra_info", "iwopy.interfaces.pygmo.UDP.get_name", "iwopy.interfaces.pygmo.UDP.get_nec", "iwopy.interfaces.pygmo.UDP.get_nic", "iwopy.interfaces.pygmo.UDP.get_nix", "iwopy.interfaces.pygmo.UDP.get_nobj", "iwopy.interfaces.pygmo.UDP.gradient", "iwopy.interfaces.pygmo.UDP.gradient_sparsity", "iwopy.interfaces.pygmo.UDP.has_batch_fitness", "iwopy.interfaces.pygmo.UDP.has_gradient", "iwopy.interfaces.pygmo.UDP.has_gradient_sparsity", "iwopy.interfaces.pygmo.UDP.has_hessians", "iwopy.interfaces.pygmo.UDP.has_hessians_sparsity", "iwopy.interfaces.pygmo.UDP.has_set_seed", "iwopy.interfaces.pygmo.load", "iwopy.interfaces.pymoo.DefaultCallbackTemplate", "iwopy.interfaces.pymoo.DefaultCallbackTemplate.__init__", "iwopy.interfaces.pymoo.DefaultCallbackTemplate.get_class", "iwopy.interfaces.pymoo.DefaultCallbackTemplate.notify", "iwopy.interfaces.pymoo.Factory", "iwopy.interfaces.pymoo.Factory.__init__", "iwopy.interfaces.pymoo.Factory.get_algorithm", "iwopy.interfaces.pymoo.Factory.get_crossover", "iwopy.interfaces.pymoo.Factory.get_mutation", "iwopy.interfaces.pymoo.Factory.get_sampling", "iwopy.interfaces.pymoo.Factory.get_termination", "iwopy.interfaces.pymoo.Factory.print", "iwopy.interfaces.pymoo.MultiObjProblemTemplate", "iwopy.interfaces.pymoo.MultiObjProblemTemplate.__init__", "iwopy.interfaces.pymoo.MultiObjProblemTemplate.finalize", "iwopy.interfaces.pymoo.MultiObjProblemTemplate.get_class", "iwopy.interfaces.pymoo.Optimizer_pymoo", "iwopy.interfaces.pymoo.Optimizer_pymoo.__init__", "iwopy.interfaces.pymoo.Optimizer_pymoo.get_figure_f", "iwopy.interfaces.pymoo.Optimizer_pymoo.initialize", "iwopy.interfaces.pymoo.Optimizer_pymoo.print_info", "iwopy.interfaces.pymoo.Optimizer_pymoo.solve", "iwopy.interfaces.pymoo.SingleObjProblemTemplate", "iwopy.interfaces.pymoo.SingleObjProblemTemplate.__init__", "iwopy.interfaces.pymoo.SingleObjProblemTemplate.finalize", "iwopy.interfaces.pymoo.SingleObjProblemTemplate.get_class", "iwopy.interfaces.pymoo.load", "iwopy.interfaces.scipy.Optimizer_scipy", "iwopy.interfaces.scipy.Optimizer_scipy.__init__", "iwopy.interfaces.scipy.Optimizer_scipy.initialize", "iwopy.interfaces.scipy.Optimizer_scipy.print_info", "iwopy.interfaces.scipy.Optimizer_scipy.solve", "iwopy.optimizers.GG", "iwopy.optimizers.GG.__init__", "iwopy.optimizers.GG.initialize", "iwopy.optimizers.GG.print_info", "iwopy.optimizers.GG.solve", "iwopy.utils.RegularDiscretizationGrid", "iwopy.utils.RegularDiscretizationGrid.INT_INF", "iwopy.utils.RegularDiscretizationGrid.__init__", "iwopy.utils.RegularDiscretizationGrid.all_gridpoints", "iwopy.utils.RegularDiscretizationGrid.apply_tol", "iwopy.utils.RegularDiscretizationGrid.apply_tols", "iwopy.utils.RegularDiscretizationGrid.deriv_coeffs", "iwopy.utils.RegularDiscretizationGrid.deriv_coeffs_gridpoints", "iwopy.utils.RegularDiscretizationGrid.find_grid_inds", "iwopy.utils.RegularDiscretizationGrid.find_gridpoints", "iwopy.utils.RegularDiscretizationGrid.find_ingrid", "iwopy.utils.RegularDiscretizationGrid.get_cell", "iwopy.utils.RegularDiscretizationGrid.get_cells", "iwopy.utils.RegularDiscretizationGrid.get_corner", "iwopy.utils.RegularDiscretizationGrid.get_corners", "iwopy.utils.RegularDiscretizationGrid.gp2i", "iwopy.utils.RegularDiscretizationGrid.gpts2inds", "iwopy.utils.RegularDiscretizationGrid.grad_coeffs", "iwopy.utils.RegularDiscretizationGrid.grad_coeffs_gridpoints", "iwopy.utils.RegularDiscretizationGrid.i2gp", "iwopy.utils.RegularDiscretizationGrid.in_grid", "iwopy.utils.RegularDiscretizationGrid.inds2gpts", "iwopy.utils.RegularDiscretizationGrid.interpolation_coeffs_point", "iwopy.utils.RegularDiscretizationGrid.interpolation_coeffs_points", "iwopy.utils.RegularDiscretizationGrid.is_gridi", "iwopy.utils.RegularDiscretizationGrid.is_gridpoint", "iwopy.utils.RegularDiscretizationGrid.n_dims", "iwopy.utils.RegularDiscretizationGrid.n_points", "iwopy.utils.RegularDiscretizationGrid.p_max", "iwopy.utils.RegularDiscretizationGrid.p_min", "iwopy.utils.RegularDiscretizationGrid.print_info", "iwopy.utils.all_subclasses", "iwopy.utils.import_module", "iwopy.utils.new_cls", "iwopy.utils.new_instance", "iwopy.utils.suppress_stdout", "iwopy.wrappers.DiscretizeRegGrid", "iwopy.wrappers.DiscretizeRegGrid.__init__", "iwopy.wrappers.DiscretizeRegGrid.apply_individual", "iwopy.wrappers.DiscretizeRegGrid.apply_population", "iwopy.wrappers.DiscretizeRegGrid.evaluate_individual", "iwopy.wrappers.DiscretizeRegGrid.evaluate_population", "iwopy.wrappers.DiscretizeRegGrid.finalize_individual", "iwopy.wrappers.DiscretizeRegGrid.finalize_population", "iwopy.wrappers.DiscretizeRegGrid.initialize", "iwopy.wrappers.LocalFD", "iwopy.wrappers.LocalFD.__init__", "iwopy.wrappers.LocalFD.calc_gradients", "iwopy.wrappers.LocalFD.initialize", "iwopy.wrappers.ProblemWrapper", "iwopy.wrappers.ProblemWrapper.__init__", "iwopy.wrappers.ProblemWrapper.apply_individual", "iwopy.wrappers.ProblemWrapper.apply_population", "iwopy.wrappers.ProblemWrapper.finalize_individual", "iwopy.wrappers.ProblemWrapper.finalize_population", "iwopy.wrappers.ProblemWrapper.initial_values_float", "iwopy.wrappers.ProblemWrapper.initial_values_int", "iwopy.wrappers.ProblemWrapper.initialize", "iwopy.wrappers.ProblemWrapper.max_values_float", "iwopy.wrappers.ProblemWrapper.max_values_int", "iwopy.wrappers.ProblemWrapper.min_values_float", "iwopy.wrappers.ProblemWrapper.min_values_int", "iwopy.wrappers.ProblemWrapper.var_names_float", "iwopy.wrappers.ProblemWrapper.var_names_int", "iwopy.wrappers.SimpleConstraint", "iwopy.wrappers.SimpleConstraint.__init__", "iwopy.wrappers.SimpleConstraint.ana_deriv", "iwopy.wrappers.SimpleConstraint.calc_individual", "iwopy.wrappers.SimpleConstraint.calc_population", "iwopy.wrappers.SimpleConstraint.f", "iwopy.wrappers.SimpleConstraint.g", "iwopy.wrappers.SimpleConstraint.get_bounds", "iwopy.wrappers.SimpleConstraint.n_components", "iwopy.wrappers.SimpleObjective", "iwopy.wrappers.SimpleObjective.__init__", "iwopy.wrappers.SimpleObjective.ana_deriv", "iwopy.wrappers.SimpleObjective.calc_individual", "iwopy.wrappers.SimpleObjective.calc_population", "iwopy.wrappers.SimpleObjective.f", "iwopy.wrappers.SimpleObjective.g", "iwopy.wrappers.SimpleObjective.has_ana_derivs", "iwopy.wrappers.SimpleObjective.maximize", "iwopy.wrappers.SimpleObjective.n_components", "iwopy.wrappers.SimpleProblem", "iwopy.wrappers.SimpleProblem.__init__", "iwopy.wrappers.SimpleProblem.initial_values_float", "iwopy.wrappers.SimpleProblem.initial_values_int", "iwopy.wrappers.SimpleProblem.max_values_float", "iwopy.wrappers.SimpleProblem.max_values_int", "iwopy.wrappers.SimpleProblem.min_values_float", "iwopy.wrappers.SimpleProblem.min_values_int", "iwopy.wrappers.SimpleProblem.var_names_float", "iwopy.wrappers.SimpleProblem.var_names_int", "API", "iwopy.benchmarks", "iwopy.core", "iwopy.interfaces", "iwopy.interfaces.pygmo", "iwopy.interfaces.pymoo", "iwopy.interfaces.scipy", "iwopy", "iwopy.optimizers", "iwopy.utils", "iwopy.wrappers", "Citation", "Examples", "Welcome to IWOPY", "Installation", "Electrostatic potential minimization", "Mixed problems", "Multi objective geometric chain", "Simple function minimization", "Testing", "Wind farm optimizations"], "titleterms": {"0": 0, "1": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "alpha": 0, "api": 290, "attribut": [5, 11, 13, 19, 25, 35, 43, 61, 77, 86, 92, 129, 134, 139, 172, 176, 182, 187, 192, 197, 233, 242, 246], "benchmark": 291, "beta": 0, "branin": 291, "chain": 307, "citat": 301, "conda": 304, "content": 303, "contribut": 303, "core": 292, "develop": 304, "electrostat": 305, "environ": 304, "exampl": [219, 220, 232, 302], "farm": 310, "function": 308, "geometr": 307, "histori": 0, "instal": 304, "interfac": [293, 294, 295, 296], "iwopi": [291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303], "journal": 301, "layout": [], "member": [1, 5, 7, 11, 13, 19, 25, 35, 40, 43, 61, 77, 86, 92, 127, 129, 132, 134, 139, 160, 164, 172, 176, 182, 187, 192, 197, 233, 242, 246, 261, 270, 280], "minim": [305, 308], "mix": 306, "multi": 307, "object": 307, "optim": [298, 310], "option": 304, "paper": 301, "paramet": [2, 6, 8, 12, 14, 16, 17, 20, 21, 22, 24, 26, 28, 29, 30, 31, 33, 34, 36, 39, 42, 44, 45, 46, 47, 49, 50, 51, 55, 56, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 78, 79, 80, 81, 82, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 110, 122, 123, 124, 128, 130, 133, 135, 136, 138, 140, 142, 159, 173, 174, 177, 178, 179, 181, 183, 184, 186, 188, 189, 191, 193, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 247, 248, 249, 250, 251, 254, 262, 263, 264, 265, 266, 267, 271, 272, 273, 274, 275, 276, 281], "paramt": 38, "pip": 304, "potenti": 305, "prepar": 304, "problem": 306, "public": [1, 5, 7, 11, 13, 19, 25, 35, 40, 43, 61, 77, 86, 92, 127, 129, 132, 134, 139, 160, 164, 172, 176, 182, 187, 192, 197, 233, 242, 246, 261, 270, 280], "pygmo": 294, "pymoo": 295, "python": 304, "requir": 304, "return": [15, 18, 22, 23, 28, 29, 30, 31, 32, 38, 39, 41, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 79, 80, 81, 83, 84, 85, 91, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 133, 138, 142, 174, 178, 181, 184, 191, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 244, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289], "rosenbrock": 291, "scipi": 296, "simpl": 308, "standard": 304, "support": 303, "test": 309, "user": 304, "util": 299, "v0": 0, "via": 304, "virtual": 304, "welcom": 303, "wind": 310, "wrapper": 300}})