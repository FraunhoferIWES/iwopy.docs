Search.setIndex({"alltitles": {"API": [[282, "api"]], "Attributes": [[4, "attributes"], [10, "attributes"], [12, "attributes"], [18, "attributes"], [23, "attributes"], [33, "attributes"], [40, "attributes"], [58, "attributes"], [74, "attributes"], [83, "attributes"], [88, "attributes"], [124, "attributes"], [129, "attributes"], [134, "attributes"], [167, "attributes"], [171, "attributes"], [177, "attributes"], [182, "attributes"], [187, "attributes"], [192, "attributes"], [225, "attributes"], [234, "attributes"], [238, "attributes"]], "Contents": [[295, "contents"]], "Contributing": [[295, "contributing"]], "Developers": [[296, "developers"], [296, "id2"]], "Electrostatic potential minimization": [[297, "Electrostatic-potential-minimization"]], "Example": [[214, "example"], [215, "example"], [224, "example"]], "Examples": [[293, "examples"]], "History": [[294, "history"]], "Installation": [[296, "installation"]], "Installation via conda": [[296, "installation-via-conda"]], "Installation via pip": [[296, "installation-via-pip"]], "Mixed problems": [[298, "Mixed-problems"]], "Multi objective geometric chain": [[299, "Multi-objective-geometric-chain"]], "Parameters": [[1, "parameters"], [5, "parameters"], [7, "parameters"], [11, "parameters"], [13, "parameters"], [15, "parameters"], [16, "parameters"], [19, "parameters"], [20, "parameters"], [21, "parameters"], [24, "parameters"], [26, "parameters"], [27, "parameters"], [28, "parameters"], [29, "parameters"], [31, "parameters"], [32, "parameters"], [34, "parameters"], [37, "parameters"], [41, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [46, "parameters"], [47, "parameters"], [48, "parameters"], [52, "parameters"], [53, "parameters"], [59, "parameters"], [60, "parameters"], [61, "parameters"], [62, "parameters"], [63, "parameters"], [64, "parameters"], [65, "parameters"], [67, "parameters"], [70, "parameters"], [71, "parameters"], [75, "parameters"], [76, "parameters"], [77, "parameters"], [78, "parameters"], [79, "parameters"], [84, "parameters"], [85, "parameters"], [87, "parameters"], [90, "parameters"], [91, "parameters"], [92, "parameters"], [93, "parameters"], [94, "parameters"], [95, "parameters"], [96, "parameters"], [97, "parameters"], [99, "parameters"], [100, "parameters"], [101, "parameters"], [102, "parameters"], [103, "parameters"], [106, "parameters"], [118, "parameters"], [119, "parameters"], [123, "parameters"], [125, "parameters"], [128, "parameters"], [130, "parameters"], [131, "parameters"], [133, "parameters"], [135, "parameters"], [137, "parameters"], [154, "parameters"], [168, "parameters"], [169, "parameters"], [172, "parameters"], [173, "parameters"], [174, "parameters"], [176, "parameters"], [178, "parameters"], [179, "parameters"], [181, "parameters"], [183, "parameters"], [184, "parameters"], [186, "parameters"], [188, "parameters"], [189, "parameters"], [191, "parameters"], [194, "parameters"], [195, "parameters"], [196, "parameters"], [197, "parameters"], [198, "parameters"], [199, "parameters"], [200, "parameters"], [201, "parameters"], [202, "parameters"], [203, "parameters"], [204, "parameters"], [205, "parameters"], [206, "parameters"], [207, "parameters"], [208, "parameters"], [209, "parameters"], [210, "parameters"], [211, "parameters"], [212, "parameters"], [213, "parameters"], [214, "parameters"], [215, "parameters"], [216, "parameters"], [217, "parameters"], [222, "parameters"], [223, "parameters"], [224, "parameters"], [226, "parameters"], [227, "parameters"], [228, "parameters"], [229, "parameters"], [230, "parameters"], [231, "parameters"], [232, "parameters"], [233, "parameters"], [235, "parameters"], [236, "parameters"], [237, "parameters"], [239, "parameters"], [240, "parameters"], [241, "parameters"], [242, "parameters"], [243, "parameters"], [246, "parameters"], [254, "parameters"], [255, "parameters"], [256, "parameters"], [257, "parameters"], [258, "parameters"], [259, "parameters"], [263, "parameters"], [264, "parameters"], [265, "parameters"], [266, "parameters"], [267, "parameters"], [268, "parameters"], [273, "parameters"]], "Paramters": [[36, "paramters"]], "Preparation (optional)": [[296, "preparation-optional"]], "Public members": [[0, "public-members"], [4, "public-members"], [6, "public-members"], [10, "public-members"], [12, "public-members"], [18, "public-members"], [23, "public-members"], [33, "public-members"], [38, "public-members"], [40, "public-members"], [58, "public-members"], [74, "public-members"], [83, "public-members"], [88, "public-members"], [122, "public-members"], [124, "public-members"], [127, "public-members"], [129, "public-members"], [134, "public-members"], [155, "public-members"], [159, "public-members"], [167, "public-members"], [171, "public-members"], [177, "public-members"], [182, "public-members"], [187, "public-members"], [192, "public-members"], [225, "public-members"], [234, "public-members"], [238, "public-members"], [253, "public-members"], [262, "public-members"], [272, "public-members"]], "Requirements": [[296, "requirements"]], "Returns": [[14, "returns"], [17, "returns"], [21, "returns"], [22, "returns"], [26, "returns"], [27, "returns"], [28, "returns"], [29, "returns"], [30, "returns"], [36, "returns"], [37, "returns"], [39, "returns"], [42, "returns"], [43, "returns"], [44, "returns"], [45, "returns"], [46, "returns"], [47, "returns"], [49, "returns"], [50, "returns"], [51, "returns"], [54, "returns"], [55, "returns"], [56, "returns"], [57, "returns"], [60, "returns"], [62, "returns"], [63, "returns"], [64, "returns"], [65, "returns"], [66, "returns"], [68, "returns"], [69, "returns"], [70, "returns"], [71, "returns"], [72, "returns"], [73, "returns"], [76, "returns"], [77, "returns"], [78, "returns"], [80, "returns"], [81, "returns"], [82, "returns"], [87, "returns"], [93, "returns"], [94, "returns"], [95, "returns"], [96, "returns"], [97, "returns"], [98, "returns"], [99, "returns"], [100, "returns"], [101, "returns"], [102, "returns"], [103, "returns"], [104, "returns"], [105, "returns"], [107, "returns"], [108, "returns"], [109, "returns"], [110, "returns"], [111, "returns"], [112, "returns"], [113, "returns"], [114, "returns"], [115, "returns"], [116, "returns"], [117, "returns"], [118, "returns"], [119, "returns"], [120, "returns"], [121, "returns"], [128, "returns"], [133, "returns"], [137, "returns"], [169, "returns"], [173, "returns"], [176, "returns"], [179, "returns"], [186, "returns"], [191, "returns"], [195, "returns"], [196, "returns"], [197, "returns"], [198, "returns"], [199, "returns"], [200, "returns"], [201, "returns"], [202, "returns"], [203, "returns"], [204, "returns"], [205, "returns"], [206, "returns"], [207, "returns"], [208, "returns"], [209, "returns"], [210, "returns"], [211, "returns"], [212, "returns"], [213, "returns"], [214, "returns"], [215, "returns"], [216, "returns"], [217, "returns"], [218, "returns"], [219, "returns"], [220, "returns"], [221, "returns"], [223, "returns"], [227, "returns"], [228, "returns"], [229, "returns"], [230, "returns"], [231, "returns"], [232, "returns"], [236, "returns"], [240, "returns"], [241, "returns"], [242, "returns"], [243, "returns"], [244, "returns"], [245, "returns"], [247, "returns"], [248, "returns"], [249, "returns"], [250, "returns"], [251, "returns"], [252, "returns"], [255, "returns"], [256, "returns"], [257, "returns"], [258, "returns"], [259, "returns"], [260, "returns"], [261, "returns"], [264, "returns"], [265, "returns"], [266, "returns"], [267, "returns"], [268, "returns"], [269, "returns"], [270, "returns"], [271, "returns"], [274, "returns"], [275, "returns"], [276, "returns"], [277, "returns"], [278, "returns"], [279, "returns"], [280, "returns"], [281, "returns"]], "Simple function minimization": [[300, "Simple-function-minimization"]], "Standard users": [[296, "standard-users"], [296, "id1"]], "Support": [[295, "support"]], "Testing": [[301, "testing"]], "Virtual Python environment": [[296, "virtual-python-environment"]], "Welcome to IWOPY": [[295, "welcome-to-iwopy"]], "Wind farm layout optimization": [[302, "wind-farm-layout-optimization"]], "iwopy": [[289, "iwopy"]], "iwopy.benchmarks": [[283, "iwopy-benchmarks"]], "iwopy.benchmarks.branin": [[283, "iwopy-benchmarks-branin"]], "iwopy.benchmarks.rosenbrock": [[283, "iwopy-benchmarks-rosenbrock"]], "iwopy.core": [[284, "iwopy-core"]], "iwopy.interfaces": [[285, "iwopy-interfaces"]], "iwopy.interfaces.pygmo": [[286, "iwopy-interfaces-pygmo"]], "iwopy.interfaces.pymoo": [[287, "iwopy-interfaces-pymoo"]], "iwopy.interfaces.scipy": [[288, "iwopy-interfaces-scipy"]], "iwopy.optimizers": [[290, "iwopy-optimizers"]], "iwopy.utils": [[291, "iwopy-utils"]], "iwopy.wrappers": [[292, "iwopy-wrappers"]], "v0.0.11-alpha": [[294, "v0-0-11-alpha"]], "v0.0.12-alpha": [[294, "v0-0-12-alpha"]], "v0.0.13-alpha": [[294, "v0-0-13-alpha"]], "v0.0.14-alpha": [[294, "v0-0-14-alpha"]], "v0.0.15-alpha": [[294, "v0-0-15-alpha"]], "v0.1.0-alpha": [[294, "v0-1-0-alpha"]], "v0.1.1-alpha": [[294, "v0-1-1-alpha"]], "v0.1.2-alpha": [[294, "v0-1-2-alpha"]], "v0.1.3-alpha": [[294, "v0-1-3-alpha"]], "v0.1.4-alpha": [[294, "v0-1-4-alpha"]], "v0.1.5-alpha": [[294, "v0-1-5-alpha"]], "v0.1.6-alpha": [[294, "v0-1-6-alpha"]], "v0.1.7-beta": [[294, "v0-1-7-beta"]], "v0.1.8-beta": [[294, "v0-1-8-beta"]], "v0.1.9-beta": [[294, "v0-1-9-beta"]], "v0.2-beta": [[294, "v0-2-beta"]], "v0.2.1": [[294, "v0-2-1"]], "v0.2.2": [[294, "v0-2-2"]]}, "docurls": ["_iwopy/benchmarks/branin/BraninObjective.html", "_iwopy/benchmarks/branin/BraninObjective.__init__.html", "_iwopy/benchmarks/branin/BraninObjective.f.html", "_iwopy/benchmarks/branin/BraninObjective.g.html", "_iwopy/benchmarks/branin/BraninProblem.html", "_iwopy/benchmarks/branin/BraninProblem.__init__.html", "_iwopy/benchmarks/rosenbrock/RosenbrockObjective.html", "_iwopy/benchmarks/rosenbrock/RosenbrockObjective.__init__.html", "_iwopy/benchmarks/rosenbrock/RosenbrockObjective.f.html", "_iwopy/benchmarks/rosenbrock/RosenbrockObjective.g.html", "_iwopy/benchmarks/rosenbrock/RosenbrockProblem.html", "_iwopy/benchmarks/rosenbrock/RosenbrockProblem.__init__.html", "_iwopy/core/Base.html", "_iwopy/core/Base.__init__.html", "_iwopy/core/Base.__str__.html", "_iwopy/core/Base.finalize.html", "_iwopy/core/Base.initialize.html", "_iwopy/core/Base.initialized.html", "_iwopy/core/Constraint.html", "_iwopy/core/Constraint.__init__.html", "_iwopy/core/Constraint.check_individual.html", "_iwopy/core/Constraint.check_population.html", "_iwopy/core/Constraint.get_bounds.html", "_iwopy/core/Memory.html", "_iwopy/core/Memory.__init__.html", "_iwopy/core/Memory.clear.html", "_iwopy/core/Memory.found_individual.html", "_iwopy/core/Memory.found_population.html", "_iwopy/core/Memory.lookup_individual.html", "_iwopy/core/Memory.lookup_population.html", "_iwopy/core/Memory.size.html", "_iwopy/core/Memory.store_individual.html", "_iwopy/core/Memory.store_population.html", "_iwopy/core/MultiObjOptResults.html", "_iwopy/core/MultiObjOptResults.__init__.html", "_iwopy/core/MultiObjOptResults.__str__.html", "_iwopy/core/MultiObjOptResults.find_pareto_objmix.html", "_iwopy/core/MultiObjOptResults.plot_pareto.html", "_iwopy/core/Objective.html", "_iwopy/core/Objective.maximize.html", "_iwopy/core/OptFunction.html", "_iwopy/core/OptFunction.__init__.html", "_iwopy/core/OptFunction.ana_deriv.html", "_iwopy/core/OptFunction.calc_individual.html", "_iwopy/core/OptFunction.calc_population.html", "_iwopy/core/OptFunction.component_names.html", "_iwopy/core/OptFunction.finalize_individual.html", "_iwopy/core/OptFunction.finalize_population.html", "_iwopy/core/OptFunction.initialize.html", "_iwopy/core/OptFunction.n_components.html", "_iwopy/core/OptFunction.n_vars_float.html", "_iwopy/core/OptFunction.n_vars_int.html", "_iwopy/core/OptFunction.rename_vars_float.html", "_iwopy/core/OptFunction.rename_vars_int.html", "_iwopy/core/OptFunction.var_names_float.html", "_iwopy/core/OptFunction.var_names_int.html", "_iwopy/core/OptFunction.vardeps_float.html", "_iwopy/core/OptFunction.vardeps_int.html", "_iwopy/core/OptFunctionList.html", "_iwopy/core/OptFunctionList.__init__.html", "_iwopy/core/OptFunctionList.ana_deriv.html", "_iwopy/core/OptFunctionList.append.html", "_iwopy/core/OptFunctionList.calc_individual.html", "_iwopy/core/OptFunctionList.calc_population.html", "_iwopy/core/OptFunctionList.finalize_individual.html", "_iwopy/core/OptFunctionList.finalize_population.html", "_iwopy/core/OptFunctionList.functions.html", "_iwopy/core/OptFunctionList.initialize.html", "_iwopy/core/OptFunctionList.n_components.html", "_iwopy/core/OptFunctionList.n_functions.html", "_iwopy/core/OptFunctionList.split_individual.html", "_iwopy/core/OptFunctionList.split_population.html", "_iwopy/core/OptFunctionList.vardeps_float.html", "_iwopy/core/OptFunctionList.vardeps_int.html", "_iwopy/core/OptFunctionSubset.html", "_iwopy/core/OptFunctionSubset.__init__.html", "_iwopy/core/OptFunctionSubset.ana_deriv.html", "_iwopy/core/OptFunctionSubset.calc_individual.html", "_iwopy/core/OptFunctionSubset.calc_population.html", "_iwopy/core/OptFunctionSubset.initialize.html", "_iwopy/core/OptFunctionSubset.n_components.html", "_iwopy/core/OptFunctionSubset.vardeps_float.html", "_iwopy/core/OptFunctionSubset.vardeps_int.html", "_iwopy/core/Optimizer.html", "_iwopy/core/Optimizer.__init__.html", "_iwopy/core/Optimizer.finalize.html", "_iwopy/core/Optimizer.print_info.html", "_iwopy/core/Optimizer.solve.html", "_iwopy/core/Problem.html", "_iwopy/core/Problem.INT_INF.html", "_iwopy/core/Problem.__init__.html", "_iwopy/core/Problem.add_constraint.html", "_iwopy/core/Problem.add_objective.html", "_iwopy/core/Problem.apply_individual.html", "_iwopy/core/Problem.apply_population.html", "_iwopy/core/Problem.calc_gradients.html", "_iwopy/core/Problem.check_constraints_individual.html", "_iwopy/core/Problem.check_constraints_population.html", "_iwopy/core/Problem.constraints_tol.html", "_iwopy/core/Problem.evaluate_individual.html", "_iwopy/core/Problem.evaluate_population.html", "_iwopy/core/Problem.finalize_individual.html", "_iwopy/core/Problem.finalize_population.html", "_iwopy/core/Problem.get_gradients.html", "_iwopy/core/Problem.initial_values_float.html", "_iwopy/core/Problem.initial_values_int.html", "_iwopy/core/Problem.initialize.html", "_iwopy/core/Problem.max_values_constraints.html", "_iwopy/core/Problem.max_values_float.html", "_iwopy/core/Problem.max_values_int.html", "_iwopy/core/Problem.maximize_objs.html", "_iwopy/core/Problem.min_values_constraints.html", "_iwopy/core/Problem.min_values_float.html", "_iwopy/core/Problem.min_values_int.html", "_iwopy/core/Problem.n_constraints.html", "_iwopy/core/Problem.n_objectives.html", "_iwopy/core/Problem.n_vars_float.html", "_iwopy/core/Problem.n_vars_int.html", "_iwopy/core/Problem.prob_res_einsum_individual.html", "_iwopy/core/Problem.prob_res_einsum_population.html", "_iwopy/core/Problem.var_names_float.html", "_iwopy/core/Problem.var_names_int.html", "_iwopy/core/ProblemDefaultFunc.html", "_iwopy/core/ProblemDefaultFunc.__init__.html", "_iwopy/core/SingleObjOptResults.html", "_iwopy/core/SingleObjOptResults.__init__.html", "_iwopy/core/SingleObjOptResults.__str__.html", "_iwopy/interfaces/pygmo/AlgoFactory.html", "_iwopy/interfaces/pygmo/AlgoFactory.new.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.__init__.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.initialize.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.print_info.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.solve.html", "_iwopy/interfaces/pygmo/UDP.html", "_iwopy/interfaces/pygmo/UDP.__init__.html", "_iwopy/interfaces/pygmo/UDP.batch_fitness.html", "_iwopy/interfaces/pygmo/UDP.finalize.html", "_iwopy/interfaces/pygmo/UDP.fitness.html", "_iwopy/interfaces/pygmo/UDP.get_bounds.html", "_iwopy/interfaces/pygmo/UDP.get_extra_info.html", "_iwopy/interfaces/pygmo/UDP.get_name.html", "_iwopy/interfaces/pygmo/UDP.get_nec.html", "_iwopy/interfaces/pygmo/UDP.get_nic.html", "_iwopy/interfaces/pygmo/UDP.get_nix.html", "_iwopy/interfaces/pygmo/UDP.get_nobj.html", "_iwopy/interfaces/pygmo/UDP.gradient.html", "_iwopy/interfaces/pygmo/UDP.gradient_sparsity.html", "_iwopy/interfaces/pygmo/UDP.has_batch_fitness.html", "_iwopy/interfaces/pygmo/UDP.has_gradient.html", "_iwopy/interfaces/pygmo/UDP.has_gradient_sparsity.html", "_iwopy/interfaces/pygmo/UDP.has_hessians.html", "_iwopy/interfaces/pygmo/UDP.has_hessians_sparsity.html", "_iwopy/interfaces/pygmo/UDP.has_set_seed.html", "_iwopy/interfaces/pygmo/load.html", "_iwopy/interfaces/pymoo/DefaultCallbackTemplate.html", "_iwopy/interfaces/pymoo/DefaultCallbackTemplate.__init__.html", "_iwopy/interfaces/pymoo/DefaultCallbackTemplate.get_class.html", "_iwopy/interfaces/pymoo/DefaultCallbackTemplate.notify.html", "_iwopy/interfaces/pymoo/Factory.html", "_iwopy/interfaces/pymoo/Factory.__init__.html", "_iwopy/interfaces/pymoo/Factory.get_algorithm.html", "_iwopy/interfaces/pymoo/Factory.get_crossover.html", "_iwopy/interfaces/pymoo/Factory.get_mutation.html", "_iwopy/interfaces/pymoo/Factory.get_sampling.html", "_iwopy/interfaces/pymoo/Factory.get_termination.html", "_iwopy/interfaces/pymoo/Factory.print.html", "_iwopy/interfaces/pymoo/MultiObjProblemTemplate.html", "_iwopy/interfaces/pymoo/MultiObjProblemTemplate.__init__.html", "_iwopy/interfaces/pymoo/MultiObjProblemTemplate.finalize.html", "_iwopy/interfaces/pymoo/MultiObjProblemTemplate.get_class.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.__init__.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.get_figure_f.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.initialize.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.print_info.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.solve.html", "_iwopy/interfaces/pymoo/SingleObjProblemTemplate.html", "_iwopy/interfaces/pymoo/SingleObjProblemTemplate.__init__.html", "_iwopy/interfaces/pymoo/SingleObjProblemTemplate.finalize.html", "_iwopy/interfaces/pymoo/SingleObjProblemTemplate.get_class.html", "_iwopy/interfaces/pymoo/load.html", "_iwopy/interfaces/scipy/Optimizer_scipy.html", "_iwopy/interfaces/scipy/Optimizer_scipy.__init__.html", "_iwopy/interfaces/scipy/Optimizer_scipy.initialize.html", "_iwopy/interfaces/scipy/Optimizer_scipy.print_info.html", "_iwopy/interfaces/scipy/Optimizer_scipy.solve.html", "_iwopy/optimizers/GG.html", "_iwopy/optimizers/GG.__init__.html", "_iwopy/optimizers/GG.initialize.html", "_iwopy/optimizers/GG.print_info.html", "_iwopy/optimizers/GG.solve.html", "_iwopy/utils/RegularDiscretizationGrid.html", "_iwopy/utils/RegularDiscretizationGrid.INT_INF.html", "_iwopy/utils/RegularDiscretizationGrid.__init__.html", "_iwopy/utils/RegularDiscretizationGrid.all_gridpoints.html", "_iwopy/utils/RegularDiscretizationGrid.apply_tol.html", "_iwopy/utils/RegularDiscretizationGrid.apply_tols.html", "_iwopy/utils/RegularDiscretizationGrid.deriv_coeffs.html", "_iwopy/utils/RegularDiscretizationGrid.deriv_coeffs_gridpoints.html", "_iwopy/utils/RegularDiscretizationGrid.find_grid_inds.html", "_iwopy/utils/RegularDiscretizationGrid.find_gridpoints.html", "_iwopy/utils/RegularDiscretizationGrid.find_ingrid.html", "_iwopy/utils/RegularDiscretizationGrid.get_cell.html", "_iwopy/utils/RegularDiscretizationGrid.get_cells.html", "_iwopy/utils/RegularDiscretizationGrid.get_corner.html", "_iwopy/utils/RegularDiscretizationGrid.get_corners.html", "_iwopy/utils/RegularDiscretizationGrid.gp2i.html", "_iwopy/utils/RegularDiscretizationGrid.gpts2inds.html", "_iwopy/utils/RegularDiscretizationGrid.grad_coeffs.html", "_iwopy/utils/RegularDiscretizationGrid.grad_coeffs_gridpoints.html", "_iwopy/utils/RegularDiscretizationGrid.i2gp.html", "_iwopy/utils/RegularDiscretizationGrid.in_grid.html", "_iwopy/utils/RegularDiscretizationGrid.inds2gpts.html", "_iwopy/utils/RegularDiscretizationGrid.interpolation_coeffs_point.html", "_iwopy/utils/RegularDiscretizationGrid.interpolation_coeffs_points.html", "_iwopy/utils/RegularDiscretizationGrid.is_gridi.html", "_iwopy/utils/RegularDiscretizationGrid.is_gridpoint.html", "_iwopy/utils/RegularDiscretizationGrid.n_dims.html", "_iwopy/utils/RegularDiscretizationGrid.n_points.html", "_iwopy/utils/RegularDiscretizationGrid.p_max.html", "_iwopy/utils/RegularDiscretizationGrid.p_min.html", "_iwopy/utils/RegularDiscretizationGrid.print_info.html", "_iwopy/utils/import_module.html", "_iwopy/utils/suppress_stdout.html", "_iwopy/wrappers/DiscretizeRegGrid.html", "_iwopy/wrappers/DiscretizeRegGrid.__init__.html", "_iwopy/wrappers/DiscretizeRegGrid.apply_individual.html", "_iwopy/wrappers/DiscretizeRegGrid.apply_population.html", "_iwopy/wrappers/DiscretizeRegGrid.evaluate_individual.html", "_iwopy/wrappers/DiscretizeRegGrid.evaluate_population.html", "_iwopy/wrappers/DiscretizeRegGrid.finalize_individual.html", "_iwopy/wrappers/DiscretizeRegGrid.finalize_population.html", "_iwopy/wrappers/DiscretizeRegGrid.initialize.html", "_iwopy/wrappers/LocalFD.html", "_iwopy/wrappers/LocalFD.__init__.html", "_iwopy/wrappers/LocalFD.calc_gradients.html", "_iwopy/wrappers/LocalFD.initialize.html", "_iwopy/wrappers/ProblemWrapper.html", "_iwopy/wrappers/ProblemWrapper.__init__.html", "_iwopy/wrappers/ProblemWrapper.apply_individual.html", "_iwopy/wrappers/ProblemWrapper.apply_population.html", "_iwopy/wrappers/ProblemWrapper.finalize_individual.html", "_iwopy/wrappers/ProblemWrapper.finalize_population.html", "_iwopy/wrappers/ProblemWrapper.initial_values_float.html", "_iwopy/wrappers/ProblemWrapper.initial_values_int.html", "_iwopy/wrappers/ProblemWrapper.initialize.html", "_iwopy/wrappers/ProblemWrapper.max_values_float.html", "_iwopy/wrappers/ProblemWrapper.max_values_int.html", "_iwopy/wrappers/ProblemWrapper.min_values_float.html", "_iwopy/wrappers/ProblemWrapper.min_values_int.html", "_iwopy/wrappers/ProblemWrapper.var_names_float.html", "_iwopy/wrappers/ProblemWrapper.var_names_int.html", "_iwopy/wrappers/SimpleConstraint.html", "_iwopy/wrappers/SimpleConstraint.__init__.html", "_iwopy/wrappers/SimpleConstraint.ana_deriv.html", "_iwopy/wrappers/SimpleConstraint.calc_individual.html", "_iwopy/wrappers/SimpleConstraint.calc_population.html", "_iwopy/wrappers/SimpleConstraint.f.html", "_iwopy/wrappers/SimpleConstraint.g.html", "_iwopy/wrappers/SimpleConstraint.get_bounds.html", "_iwopy/wrappers/SimpleConstraint.n_components.html", "_iwopy/wrappers/SimpleObjective.html", "_iwopy/wrappers/SimpleObjective.__init__.html", "_iwopy/wrappers/SimpleObjective.ana_deriv.html", "_iwopy/wrappers/SimpleObjective.calc_individual.html", "_iwopy/wrappers/SimpleObjective.calc_population.html", "_iwopy/wrappers/SimpleObjective.f.html", "_iwopy/wrappers/SimpleObjective.g.html", "_iwopy/wrappers/SimpleObjective.has_ana_derivs.html", "_iwopy/wrappers/SimpleObjective.maximize.html", "_iwopy/wrappers/SimpleObjective.n_components.html", "_iwopy/wrappers/SimpleProblem.html", "_iwopy/wrappers/SimpleProblem.__init__.html", "_iwopy/wrappers/SimpleProblem.initial_values_float.html", "_iwopy/wrappers/SimpleProblem.initial_values_int.html", "_iwopy/wrappers/SimpleProblem.max_values_float.html", "_iwopy/wrappers/SimpleProblem.max_values_int.html", "_iwopy/wrappers/SimpleProblem.min_values_float.html", "_iwopy/wrappers/SimpleProblem.min_values_int.html", "_iwopy/wrappers/SimpleProblem.var_names_float.html", "_iwopy/wrappers/SimpleProblem.var_names_int.html", "api.html", "api_benchmarks.html", "api_core.html", "api_interfaces.html", "api_interfaces_pygmo.html", "api_interfaces_pymoo.html", "api_interfaces_scipy.html", "api_iwopy.html", "api_optimizers.html", "api_utils.html", "api_wrappers.html", "examples.html", "history.html", "index.html", "installation.html", "notebooks/electrostatics.html", "notebooks/mixed.html", "notebooks/multi_obj_chain.html", "notebooks/simple_function.html", "testing.html", "wind_farm_layout.html"], "envversion": {"nbsphinx": 4, "sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "indexentries": {}, "objects": {"iwopy.benchmarks.branin": [[0, 0, 1, "", "BraninObjective", "The objective function for the Branin problem."], [4, 0, 1, "", "BraninProblem", "Problem definition of benchmark function Branin."]], "iwopy.benchmarks.branin.BraninObjective": [[1, 1, 1, "", "__init__", "Constructor"], [2, 1, 1, "", "f", "The Branin function f(x, y)"], [3, 1, 1, "", "g", "The derivative of the Branin function"]], "iwopy.benchmarks.branin.BraninProblem": [[5, 1, 1, "", "__init__", "Constructor"]], "iwopy.benchmarks.rosenbrock": [[6, 0, 1, "", "RosenbrockObjective", "The Rosenbrock function is defined as"], [10, 0, 1, "", "RosenbrockProblem", "Problem definition of benchmark function Rosenbrock."]], "iwopy.benchmarks.rosenbrock.RosenbrockObjective": [[7, 1, 1, "", "__init__", "Construtor"], [8, 1, 1, "", "f", "The Rosenbrock function f(x, y)"], [9, 1, 1, "", "g", "The derivative of the Rosenbrock function"]], "iwopy.benchmarks.rosenbrock.RosenbrockProblem": [[11, 1, 1, "", "__init__", "Constructor"]], "iwopy.core": [[12, 0, 1, "", "Base", "Generic base for various iwopy objects."], [18, 0, 1, "", "Constraint", "Abstract base class for optimization constraints."], [23, 0, 1, "", "Memory", "Storage for function results."], [33, 0, 1, "", "MultiObjOptResults", "Container for optimization results for multi objective problems."], [38, 0, 1, "", "Objective", "Abstract base class for objective functions."], [40, 0, 1, "", "OptFunction", "Abstract base class for functions that calculate scalars based on a problem."], [58, 0, 1, "", "OptFunctionList", "A list of functions."], [74, 0, 1, "", "OptFunctionSubset", "A function composed of a subset of a function's components."], [83, 0, 1, "", "Optimizer", "Abstract base class for optimization solvers."], [88, 0, 1, "", "Problem", "Abstract base class for optimization problems."], [122, 0, 1, "", "ProblemDefaultFunc", "The default function of a problem for gradient calculations."], [124, 0, 1, "", "SingleObjOptResults", "Container for optimization results for single objective problems."]], "iwopy.core.Base": [[13, 1, 1, "", "__init__", "Constructor"], [14, 1, 1, "", "__str__", "Get info string"], [15, 1, 1, "", "finalize", "Finalize the object."], [16, 1, 1, "", "initialize", "Initialize the object."], [17, 2, 1, "", "initialized", "Flag for finished initialization"]], "iwopy.core.Constraint": [[19, 1, 1, "", "__init__", "Constructor"], [20, 1, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [21, 1, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [22, 1, 1, "", "get_bounds", "Returns the bounds for all components."]], "iwopy.core.Memory": [[24, 1, 1, "", "__init__", "Constructor"], [25, 1, 1, "", "clear", "Clears the memory"], [26, 1, 1, "", "found_individual", "Check if entry is found in memory."], [27, 1, 1, "", "found_population", "Check if entry is found in memory."], [28, 1, 1, "", "lookup_individual", "Lookup results from memory."], [29, 1, 1, "", "lookup_population", "Lookup results from memory."], [30, 2, 1, "", "size", "The number of elements currently stored in memory"], [31, 1, 1, "", "store_individual", "Store objs and cons data."], [32, 1, 1, "", "store_population", "Store objs and cons data of a population."]], "iwopy.core.MultiObjOptResults": [[34, 1, 1, "", "__init__", "Constructor"], [35, 1, 1, "", "__str__", "Return str(self)."], [36, 1, 1, "", "find_pareto_objmix", "Find the point on the pareto front that approximates best the given weights of objectives"], [37, 1, 1, "", "plot_pareto", "Get figure that shows the pareto front"]], "iwopy.core.Objective": [[39, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "iwopy.core.OptFunction": [[41, 1, 1, "", "__init__", "Constructor"], [42, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [43, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [44, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [45, 2, 1, "", "component_names", "The names of the components"], [46, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [47, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [48, 1, 1, "", "initialize", "Initialize the object."], [49, 1, 1, "", "n_components", "Returns the number of components of the function."], [50, 2, 1, "", "n_vars_float", "The number of float variables"], [51, 2, 1, "", "n_vars_int", "The number of int variables"], [52, 1, 1, "", "rename_vars_float", "Rename float variables."], [53, 1, 1, "", "rename_vars_int", "Rename integer variables."], [54, 2, 1, "", "var_names_float", "The names of the float variables"], [55, 2, 1, "", "var_names_int", "The names of the integer variables"], [56, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [57, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "iwopy.core.OptFunctionList": [[59, 1, 1, "", "__init__", "Constructor"], [60, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [61, 1, 1, "", "append", "Adds a function to the list."], [62, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [63, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [64, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [65, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [66, 2, 1, "", "functions", "The list of added funtions"], [67, 1, 1, "", "initialize", "Initialize the object."], [68, 1, 1, "", "n_components", "Returns the number of components of the function."], [69, 2, 1, "", "n_functions", "The number of added functions"], [70, 1, 1, "", "split_individual", "Splits result values or other data into individual function data."], [71, 1, 1, "", "split_population", "Splits result values or other data into individual function data."], [72, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [73, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "iwopy.core.OptFunctionSubset": [[75, 1, 1, "", "__init__", "Constructor"], [76, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [77, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [78, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [79, 1, 1, "", "initialize", "Initialize the object."], [80, 1, 1, "", "n_components", "Returns the number of components of the function."], [81, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [82, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "iwopy.core.Optimizer": [[84, 1, 1, "", "__init__", "Constructor"], [85, 1, 1, "", "finalize", "This function may be called after finishing the optimization."], [86, 1, 1, "", "print_info", "Print solver info, called before solving"], [87, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.core.Problem": [[89, 3, 1, "", "INT_INF", ""], [90, 1, 1, "", "__init__", "Constructor"], [91, 1, 1, "", "add_constraint", "Add a constraint to the problem."], [92, 1, 1, "", "add_objective", "Add an objective to the problem."], [93, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [94, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [95, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [96, 1, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [97, 1, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [98, 2, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [99, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [100, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [101, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [102, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [103, 1, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [104, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [105, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [106, 1, 1, "", "initialize", "Initialize the problem."], [107, 2, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [108, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [109, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [110, 2, 1, "", "maximize_objs", "Flags for objective maximization"], [111, 2, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [112, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [113, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [114, 2, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [115, 2, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [116, 2, 1, "", "n_vars_float", "The number of float variables"], [117, 2, 1, "", "n_vars_int", "The number of int variables"], [118, 1, 1, "", "prob_res_einsum_individual", "Calculate the einsum of problem results"], [119, 1, 1, "", "prob_res_einsum_population", "Calculate the einsum of problem results"], [120, 1, 1, "", "var_names_float", "The names of float variables."], [121, 1, 1, "", "var_names_int", "The names of integer variables."]], "iwopy.core.ProblemDefaultFunc": [[123, 1, 1, "", "__init__", "Constructor"]], "iwopy.core.SingleObjOptResults": [[125, 1, 1, "", "__init__", "Constructor"], [126, 1, 1, "", "__str__", "Return str(self)."]], "iwopy.interfaces.pygmo": [[127, 0, 1, "", "AlgoFactory", "Creates a pygmo algorithm from parameters"], [129, 0, 1, "", "Optimizer_pygmo", "Interface to the pygmo optimizers for serial runs."], [134, 0, 1, "", "UDP", "Generic Problem to Pygmo UserDefinedProblem adapter"], [154, 4, 1, "", "load", "Loads the pygmo package dynamically"]], "iwopy.interfaces.pygmo.AlgoFactory": [[128, 1, 1, "", "new", "Create a pygmo algo."]], "iwopy.interfaces.pygmo.Optimizer_pygmo": [[130, 1, 1, "", "__init__", "Constructor"], [131, 1, 1, "", "initialize", "Initialize the object."], [132, 1, 1, "", "print_info", "Print solver info, called before solving"], [133, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.interfaces.pygmo.UDP": [[135, 1, 1, "", "__init__", "Constructor"], [136, 1, 1, "", "batch_fitness", ""], [137, 1, 1, "", "finalize", "Finalize the problem."], [138, 1, 1, "", "fitness", ""], [139, 1, 1, "", "get_bounds", ""], [140, 1, 1, "", "get_extra_info", ""], [141, 1, 1, "", "get_name", ""], [142, 1, 1, "", "get_nec", ""], [143, 1, 1, "", "get_nic", ""], [144, 1, 1, "", "get_nix", ""], [145, 1, 1, "", "get_nobj", ""], [146, 1, 1, "", "gradient", ""], [147, 1, 1, "", "gradient_sparsity", ""], [148, 1, 1, "", "has_batch_fitness", ""], [149, 1, 1, "", "has_gradient", ""], [150, 1, 1, "", "has_gradient_sparsity", ""], [151, 1, 1, "", "has_hessians", ""], [152, 1, 1, "", "has_hessians_sparsity", ""], [153, 1, 1, "", "has_set_seed", ""]], "iwopy.interfaces.pymoo": [[155, 0, 1, "", "DefaultCallbackTemplate", "Template for the default callback"], [159, 0, 1, "", "Factory", "A factory for pymoo components"], [167, 0, 1, "", "MultiObjProblemTemplate", "Template for a wrapper around the pymoo problem for a multiple objectives problem."], [171, 0, 1, "", "Optimizer_pymoo", "Interface to the pymoo optimization solver."], [177, 0, 1, "", "SingleObjProblemTemplate", "Template for a wrapper around the pymoo problem for a single objective."], [181, 4, 1, "", "load", "Loads the pymoo package dynamically"]], "iwopy.interfaces.pymoo.DefaultCallbackTemplate": [[156, 1, 1, "", "__init__", "Constructor"], [157, 1, 1, "", "get_class", "Creates the class, dynamically derived from pymoo.Callback"], [158, 1, 1, "", "notify", ""]], "iwopy.interfaces.pymoo.Factory": [[160, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [161, 1, 1, "", "get_algorithm", "Algorithm factory function"], [162, 1, 1, "", "get_crossover", "Crossover factory function"], [163, 1, 1, "", "get_mutation", "Mutation factory function"], [164, 1, 1, "", "get_sampling", "Sampling factory function"], [165, 1, 1, "", "get_termination", "Termination factory function"], [166, 1, 1, "", "print", ""]], "iwopy.interfaces.pymoo.MultiObjProblemTemplate": [[168, 1, 1, "", "__init__", "Constructor template, will be overwritten by get_class"], [169, 1, 1, "", "finalize", "Finalize the problem."], [170, 1, 1, "", "get_class", "Creates the class, dynamically derived from SingleObjProblem"]], "iwopy.interfaces.pymoo.Optimizer_pymoo": [[172, 1, 1, "", "__init__", "Constructor"], [173, 1, 1, "", "get_figure_f", "Create a figure that shows the objective function development during optimization."], [174, 1, 1, "", "initialize", "Initialize the object."], [175, 1, 1, "", "print_info", "Print solver info, called before solving"], [176, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.interfaces.pymoo.SingleObjProblemTemplate": [[178, 1, 1, "", "__init__", "Constructor"], [179, 1, 1, "", "finalize", "Finalize the problem."], [180, 1, 1, "", "get_class", "Creates the class, dynamically derived from pymoo.Problem"]], "iwopy.interfaces.scipy": [[182, 0, 1, "", "Optimizer_scipy", "Interface to the scipy optimizers."]], "iwopy.interfaces.scipy.Optimizer_scipy": [[183, 1, 1, "", "__init__", "Constructor"], [184, 1, 1, "", "initialize", "Initialize the object."], [185, 1, 1, "", "print_info", "Print solver info, called before solving"], [186, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.optimizers": [[187, 0, 1, "", "GG", "Greedy Gradient (GG) optimizer, for local optimum search with constraints."]], "iwopy.optimizers.GG": [[188, 1, 1, "", "__init__", "Constructor"], [189, 1, 1, "", "initialize", "Initialize the object."], [190, 1, 1, "", "print_info", "Print solver info, called before solving"], [191, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.utils": [[192, 0, 1, "", "RegularDiscretizationGrid", "A lightweight regular grid in n dimensions, without points storage."], [223, 4, 1, "", "import_module", "Imports a module dynamically."], [224, 4, 1, "", "suppress_stdout", "Surpresses print outputs"]], "iwopy.utils.RegularDiscretizationGrid": [[193, 3, 1, "", "INT_INF", ""], [194, 1, 1, "", "__init__", "Constructor"], [195, 1, 1, "", "all_gridpoints", "Checks if all points are on grid."], [196, 1, 1, "", "apply_tol", "Get tolerance corrected point"], [197, 1, 1, "", "apply_tols", "Get tolerance corrected points"], [198, 1, 1, "", "deriv_coeffs", "Calculates the derivative coefficients at points."], [199, 1, 1, "", "deriv_coeffs_gridpoints", "Calculates the derivative coefficients at grid points."], [200, 1, 1, "", "find_grid_inds", "Finds indices that are on grid"], [201, 1, 1, "", "find_gridpoints", "Finds points that are on grid."], [202, 1, 1, "", "find_ingrid", "Finds points that are on grid."], [203, 1, 1, "", "get_cell", "Get the grid cell that contains a point."], [204, 1, 1, "", "get_cells", "Get the grid cells that contain the given points, one cell per point."], [205, 1, 1, "", "get_corner", "Get the lower-left grid corner of a point."], [206, 1, 1, "", "get_corners", "Get the lower-left grid corners of points."], [207, 1, 1, "", "gp2i", "Get grid index of a grid point"], [208, 1, 1, "", "gpts2inds", "Get grid indices of grid points."], [209, 1, 1, "", "grad_coeffs", "Calculates the gradient coefficients at grid points."], [210, 1, 1, "", "grad_coeffs_gridpoints", "Calculates the gradient coefficients at grid points."], [211, 1, 1, "", "i2gp", "Translates grid point indices to grid point."], [212, 1, 1, "", "in_grid", "Checks if a point is located within the grid."], [213, 1, 1, "", "inds2gpts", "Translates grid point indices to grid points."], [214, 1, 1, "", "interpolation_coeffs_point", "Get the interpolation coefficients for a point."], [215, 1, 1, "", "interpolation_coeffs_points", "Get the interpolation coefficients for a set of points."], [216, 1, 1, "", "is_gridi", "Checks if grid indices are valid"], [217, 1, 1, "", "is_gridpoint", "Checks if a point is on grid."], [218, 2, 1, "", "n_dims", "The number of dimensions"], [219, 2, 1, "", "n_points", "The number of points in each dimension"], [220, 2, 1, "", "p_max", "The maximal grid point values"], [221, 2, 1, "", "p_min", "The minimal grid point values"], [222, 1, 1, "", "print_info", "Prints basic information"]], "iwopy.wrappers": [[225, 0, 1, "", "DiscretizeRegGrid", "A wrapper that provides finite distance differentiation on a regular grid for selected or all problem float variables."], [234, 0, 1, "", "LocalFD", "A wrapper that provides finite distance differentiation by local stepwise evaluation."], [238, 0, 1, "", "ProblemWrapper", "Generic abstract problem wrapper class."], [253, 0, 1, "", "SimpleConstraint", "A simple constraint that assumes the same variables as defined by the problem."], [262, 0, 1, "", "SimpleObjective", "A simple objective that assumes the same variables as defined by the problem."], [272, 0, 1, "", "SimpleProblem", "A problem which simply pipes variables to its objectives and constraints."]], "iwopy.wrappers.DiscretizeRegGrid": [[226, 1, 1, "", "__init__", "Constructor"], [227, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [228, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [229, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [230, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [231, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [232, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [233, 1, 1, "", "initialize", "Initialize the problem."]], "iwopy.wrappers.LocalFD": [[235, 1, 1, "", "__init__", "Constructor"], [236, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [237, 1, 1, "", "initialize", "Initialize the problem."]], "iwopy.wrappers.ProblemWrapper": [[239, 1, 1, "", "__init__", "Constructor"], [240, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [241, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [242, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [243, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [244, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [245, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [246, 1, 1, "", "initialize", "Initialize the problem."], [247, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [248, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [249, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [250, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [251, 1, 1, "", "var_names_float", "The names of float variables."], [252, 1, 1, "", "var_names_int", "The names of integer variables."]], "iwopy.wrappers.SimpleConstraint": [[254, 1, 1, "", "__init__", "Constructor"], [255, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [256, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [257, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [258, 1, 1, "", "f", "The function."], [259, 1, 1, "", "g", "The analytical derivative of the function f, df/dvar, if available."], [260, 1, 1, "", "get_bounds", "Returns the bounds for all components."], [261, 1, 1, "", "n_components", "Returns the number of components of the function."]], "iwopy.wrappers.SimpleObjective": [[263, 1, 1, "", "__init__", "Constructor"], [264, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [265, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [266, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [267, 1, 1, "", "f", "The function."], [268, 1, 1, "", "g", "The analytical derivative of the function f, df/dvar, if available."], [269, 2, 1, "", "has_ana_derivs", "Returns analyical derivatives flag"], [270, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [271, 1, 1, "", "n_components", "Returns the number of components of the function."]], "iwopy.wrappers.SimpleProblem": [[273, 1, 1, "", "__init__", "Constructor"], [274, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [275, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [276, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [277, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [278, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [279, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [280, 1, 1, "", "var_names_float", "The names of float variables."], [281, 1, 1, "", "var_names_int", "The names of integer variables."]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function"}, "terms": {"": [0, 33, 37, 74, 90, 95, 103, 124, 236, 282, 284, 290, 294, 295, 297, 298, 299, 300], "0": [0, 4, 5, 6, 7, 10, 11, 12, 15, 16, 18, 20, 21, 33, 37, 38, 40, 46, 47, 48, 58, 64, 65, 67, 74, 79, 83, 85, 87, 88, 91, 92, 95, 96, 97, 101, 102, 103, 106, 122, 131, 133, 134, 135, 137, 154, 169, 174, 176, 179, 181, 184, 186, 187, 188, 189, 191, 192, 194, 222, 225, 231, 232, 233, 234, 236, 237, 238, 242, 243, 246, 253, 254, 259, 262, 268, 272, 295, 297, 298, 299, 300], "00": [297, 298, 299, 300], "0001": 300, "00157443": 300, "001922e": 297, "003962e": 298, "004978e": 297, "005823e": 298, "007586e": 297, "008532e": 298, "009250e": 298, "01": [297, 298], "02": [297, 298], "020000e": 298, "03": 297, "030000e": 298, "04": [297, 299], "042442e": 297, "0440281": 300, "047046e": 297, "047608e": 297, "05": [18, 19, 297], "052208e": 297, "053750e": 298, "053824e": 297, "06": [297, 300], "061685e": 297, "064096e": 297, "066317e": 297, "069032e": 297, "07": 297, "08": [188, 297], "082072e": 297, "085500e": 298, "086939e": 297, "087311e": 297, "088348e": 297, "09": 297, "090210e": 297, "092386e": 297, "098864e": 297, "099603e": 297, "1": [0, 4, 5, 6, 7, 10, 33, 37, 46, 47, 64, 65, 83, 85, 87, 88, 101, 106, 129, 131, 133, 134, 137, 154, 167, 169, 171, 174, 176, 177, 179, 181, 182, 184, 186, 187, 191, 192, 198, 199, 209, 210, 225, 226, 231, 233, 234, 235, 237, 238, 242, 253, 254, 259, 262, 263, 268, 272, 286, 287, 295, 297, 298, 299, 300], "10": [0, 10, 11, 187, 188, 296, 297, 298, 299, 300], "100": [6, 7, 182, 183, 188, 297, 299], "1000": [226, 298], "100000e": [298, 300], "10109106550337115353": 300, "106500e": 298, "11": [295, 296, 297, 298, 300], "111336e": 297, "112099e": 297, "12": [0, 194, 295, 296, 297, 298, 300], "120": 298, "120000e": 298, "120221e": 297, "122978e": 297, "127440e": 297, "12879951584046933432": [], "129005e": 297, "13": [295, 297, 298], "130000e": 298, "14": [295, 297, 298, 300], "140000e": 298, "140025e": 297, "141494e": 297, "144952e": 297, "146349e": 297, "15": [0, 295, 297, 298, 300], "150000e": 298, "151292e": 297, "152908e": 297, "153245e": 297, "16": [297, 298], "160": 298, "161302e": 297, "163198e": 297, "166486e": 297, "16890387282719974931": 300, "17": [297, 298], "170680e": 297, "175796e": 297, "179612e": 297, "179930e": 297, "18": [297, 298], "180": 299, "180473e": 297, "19": [297, 298], "192331e": 297, "194387e": 297, "199172e": 297, "199634e": 297, "1e": [18, 19, 188, 297, 298, 299, 300], "2": [0, 6, 192, 198, 199, 203, 204, 209, 210, 225, 226, 234, 235, 295, 297, 298, 299, 300], "20": [297, 298], "200": [298, 299], "21": [297, 298], "211760e": 297, "2125702": 224, "213613e": 297, "215000e": 298, "22": [297, 298], "225390e": 297, "227472e": 297, "23": [297, 298], "232622e": 297, "233574e": 297, "23375": 300, "235636e": 297, "236112e": 297, "239395e": 297, "24": [297, 298], "240": 298, "240002e": 297, "240040e": 297, "246986e": 297, "247216e": 297, "249910e": 297, "25": [297, 298], "255719e": 297, "258628e": 297, "26": 297, "262789e": 297, "27": 297, "272775e": 297, "275": 0, "275371e": 297, "276369e": 297, "28": 297, "280": 298, "283250e": 298, "2852212531163044e": 300, "285221254342924e": 300, "285221e": 300, "28522e": 300, "288465e": 297, "29": 297, "290250e": 298, "290517e": 297, "293392e": 297, "2981189235548": 299, "3": [295, 296, 297, 298, 299, 300], "30": 297, "300": 297, "309271e": 297, "31": 297, "314707e": 297, "315": 298, "32": 297, "320": 298, "32183045842547": 299, "327298e": 297, "33": 297, "331988e": 297, "34": 297, "344344e": 297, "345300e": 297, "345435e": 297, "35": 297, "351725e": 297, "354546e": 297, "358615e": 297, "35988e": 300, "36": [297, 299], "360": [298, 299], "363": 298, "366573e": 297, "37": 297, "370": 298, "371277e": 297, "38": [297, 300], "382281e": 297, "383923e": 297, "389087e": 297, "39": [297, 298, 299, 300], "390472e": 297, "391485e": 297, "396197e": 297, "397887": 0, "398633e": 297, "3rd": 299, "4": [0, 295, 297, 298, 299, 300], "40": [297, 298], "400": 298, "402227e": 297, "408324e": 297, "41": 297, "410000e": 298, "414893e": 297, "417813e": 297, "419237e": 297, "42": [297, 298, 299], "420385e": 297, "421637e": 297, "423500e": 298, "424350e": 297, "424672e": 297, "42478": 0, "429528e": 297, "43": 297, "431231e": 297, "435152e": 297, "436554e": 297, "437065e": 297, "44": 297, "440": 298, "444495e": 297, "45": 297, "453717e": 297, "458509e": 297, "459065e": 297, "46": 297, "460000e": 298, "463435e": 297, "47": 297, "470148e": 297, "470885e": 297, "475": 0, "47946961706329": [], "48": 297, "480": 298, "484520e": 297, "485097e": 297, "49": 297, "5": [0, 10, 11, 33, 37, 295, 297, 298, 299, 300], "50": [33, 37, 297], "505766e": 297, "51": 297, "516980e": 297, "517358e": 297, "52": 297, "520": 298, "52436382864866": [], "527966e": 297, "53": 297, "530091e": 297, "531000e": 298, "536083e": 297, "536876e": 297, "54": 297, "541352e": 298, "547500e": 298, "548850e": 297, "549782e": 297, "55": 297, "552179e": 297, "553991e": 297, "56": 297, "560": 298, "562191e": 297, "568959e": 297, "57": 297, "5754719667092": 297, "579257e": 297, "579416e": 297, "58": 297, "585": 297, "587500e": 298, "59": 297, "595215e": 297, "599746e": 297, "599999e": 300, "6": [0, 295, 297, 298, 299, 300], "60": 297, "600": 298, "60594": 300, "606192e": 297, "606218e": 297, "607438e": 297, "608240e": 297, "61": 297, "615375e": 297, "615461e": 297, "617500e": 298, "62": 297, "624664e": 297, "63": 297, "630003e": 297, "639390e": 297, "64": 297, "640": 298, "640000e": 298, "642586e": 297, "645875e": 297, "65": 297, "652250e": 298, "652947e": 297, "657750e": 297, "658783e": 297, "66": 297, "67": 297, "670812e": 297, "673215e": 297, "68": 297, "680": 298, "681007e": 297, "683691e": 297, "69": 297, "697765e": 297, "69922244245727": 297, "699806e": 297, "7": [295, 296, 297, 298, 299, 300], "70": [297, 299], "700000e": 298, "701957e": 297, "702197e": 297, "71": 297, "712766e": 297, "72": 297, "720": 298, "722163e": 297, "729153e": 297, "73": 297, "730500e": 298, "74": 297, "740609e": 297, "742264e": 297, "743000e": 298, "743332e": 297, "75": 297, "750000e": 298, "750043e": 297, "757321e": 297, "76": 297, "760": 298, "762982e": 297, "765166e": 297, "77": 297, "78": 297, "79": 297, "795050e": 297, "796535e": 297, "796963e": 297, "797687e": 297, "8": [0, 295, 296, 297, 298, 299, 300], "80": [297, 298], "800": 298, "800000e": 298, "801432e": 297, "801572e": 297, "802090e": 297, "806220e": 297, "81": 297, "810981e": 297, "811203e": 297, "812000e": 298, "819316e": 297, "82": 297, "821135e": 297, "827574e": 297, "828613e": 297, "83": 297, "831121e": 298, "834537e": 297, "834607e": 297, "84": 297, "840": 298, "845131e": 297, "849789e": 297, "85": 297, "855755e": 297, "858055e": 297, "86": 297, "860000e": 298, "869922e": 297, "87": 297, "878439e": 297, "88": 297, "880": 298, "886000e": 298, "887334e": 297, "887607e": 297, "89": 297, "890000e": 298, "890124e": 297, "9": [0, 295, 296, 297, 298, 299, 300], "90": [297, 298], "900000e": 298, "900849e": 297, "900949e": 297, "902047e": 297, "903010e": 297, "906946e": 297, "907955e": 297, "91": 297, "910000e": 298, "911250e": 298, "911636e": 297, "913568e": 297, "92": 297, "920": 298, "925003e": 297, "93": 297, "931458e": 297, "932276e": 297, "938612e": 297, "94": 297, "942042e": 297, "943250e": 298, "944930e": 297, "949815e": 297, "95": 297, "9505772739809237078": [], "953370e": 297, "96": 297, "960": 298, "960526e": 297, "97": 297, "972586e": 297, "973250e": 298, "976805e": 297, "98": 297, "980000e": 298, "981631e": 297, "982356e": 297, "99": 297, "990310e": 297, "991725e": 297, "992287e": 297, "993564e": 297, "999775e": 297, "999799e": 297, "999989e": 297, "999999": [4, 10, 88, 89, 192, 193, 225, 234, 238, 272], "A": [58, 74, 159, 192, 225, 234, 253, 262, 272, 284, 287, 291, 292, 294, 299, 300, 302], "As": [296, 297], "At": [167, 177], "By": 103, "For": [58, 258, 259, 263, 267, 268, 295, 296, 297, 299, 300, 301], "If": [41, 301], "In": [297, 298, 299, 300], "It": [295, 296, 297], "Of": 297, "One": [297, 299], "Such": 296, "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 133, 134, 135, 137, 154, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 289, 295, 296, 297, 298, 299, 300, 301], "Then": 296, "There": [297, 299, 300], "These": [297, 298], "To": 293, "Will": [226, 235], "With": 297, "__init__": [297, 298, 299, 300], "__str__": [0, 4, 6, 10, 12, 14, 18, 33, 35, 38, 40, 58, 74, 83, 88, 122, 124, 126, 129, 171, 182, 187, 225, 234, 238, 253, 262, 272], "abl": 297, "about": 299, "abov": [295, 296, 300], "abstract": [18, 38, 39, 40, 49, 83, 87, 88, 238, 253, 258, 262, 267, 282, 284, 289, 292, 295], "access": [289, 295], "accord": 299, "accordingli": 297, "accur": [159, 160], "achiev": 295, "activ": 296, "actual": [4, 10, 88, 95, 225, 234, 236, 238, 272, 296, 299], "ad": [58, 66, 69, 103, 122, 294, 296, 297, 299, 300], "adapt": [134, 286], "add": [4, 10, 58, 61, 88, 91, 92, 122, 173, 225, 234, 238, 272, 297, 299, 300], "add_constraint": [4, 10, 88, 91, 225, 234, 238, 272, 297, 299, 300], "add_object": [4, 10, 88, 92, 225, 234, 238, 272, 297, 298, 299, 300], "add_patch": [297, 298, 299], "addig": 296, "addit": [128, 182, 183, 226, 239, 273, 295, 300], "addition": [99, 100, 201, 215, 217, 229, 230, 300], "adjust": [226, 235, 297, 298, 299], "advanc": 297, "advic": [223, 296], "after": [83, 85, 129, 171, 182, 187, 296, 300], "afterward": 296, "again": [296, 297], "aim": 299, "algo": [127, 128, 129, 171], "algo_par": [129, 130, 171, 172, 297, 298, 299, 300], "algofactori": [127, 128, 286], "algorithm": [127, 128, 129, 155, 158, 159, 161, 171, 286, 294, 295, 297, 298, 299, 300], "all": [0, 4, 6, 10, 18, 22, 29, 38, 40, 41, 42, 43, 44, 56, 57, 58, 60, 62, 63, 72, 73, 74, 76, 77, 78, 81, 82, 88, 95, 100, 103, 114, 115, 122, 192, 195, 209, 210, 225, 226, 230, 234, 235, 236, 238, 253, 255, 256, 257, 259, 260, 262, 264, 265, 266, 272, 273, 289, 292, 294, 295, 296, 297, 299, 300], "all_gridpoint": [192, 195], "all_valid": 187, "allow": [195, 201, 205, 206, 207, 208, 217, 299], "allow_out": [192, 195, 201, 205, 206, 207, 208, 217], "along": 299, "alorithm": [129, 130, 171, 172], "alpha": [295, 298, 299], "alpha_": 299, "alreadi": 297, "also": [294, 295, 297, 299, 300], "altern": [296, 297], "am": 295, "among": 302, "an": [4, 10, 88, 92, 225, 234, 238, 272, 295, 296, 297, 298, 299, 300], "ana_deriv": [0, 1, 5, 6, 7, 11, 18, 38, 40, 42, 58, 60, 74, 76, 122, 253, 255, 262, 264], "analit": 269, "analy": [0, 6, 262, 269], "analyt": [0, 1, 5, 6, 7, 11, 18, 38, 40, 42, 58, 60, 74, 76, 95, 122, 236, 253, 254, 255, 259, 262, 263, 264, 268, 297, 300], "angl": 299, "ani": [43, 44, 46, 47, 62, 63, 64, 65, 77, 78, 93, 94, 101, 102, 227, 228, 231, 232, 240, 241, 242, 243, 256, 257, 265, 266, 295, 297, 299], "anoth": [294, 299], "api": [295, 297, 300], "append": [58, 61, 122], "appli": [4, 10, 88, 93, 94, 225, 227, 228, 234, 238, 240, 241, 272, 294, 299, 300], "applic": [33, 34, 43, 44, 46, 47, 62, 63, 64, 65, 77, 78, 93, 94, 101, 102, 124, 125, 227, 228, 231, 232, 240, 241, 242, 243, 256, 257, 265, 266, 302], "apply_individu": [4, 10, 88, 93, 225, 227, 234, 238, 240, 272, 297, 298, 299], "apply_popul": [4, 10, 88, 94, 225, 228, 234, 238, 241, 272, 297, 298, 299], "apply_tol": [192, 196, 197], "approach": [295, 297], "appropri": 298, "approxim": [33, 36], "ar": [0, 4, 6, 10, 18, 20, 21, 22, 88, 95, 96, 97, 103, 128, 173, 187, 192, 195, 200, 201, 202, 216, 225, 234, 236, 238, 253, 258, 260, 267, 272, 294, 295, 296, 297, 298, 299, 300, 301], "arad": 299, "arang": 298, "area": 297, "arg": [18, 19, 159, 166], "argmax": 299, "argmin": 299, "argument": 300, "around": [167, 177, 287], "arrai": [20, 21, 22, 26, 27, 28, 29, 31, 32, 33, 34, 39, 42, 43, 44, 46, 47, 60, 62, 63, 64, 65, 76, 77, 78, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 124, 125, 194, 213, 227, 228, 229, 230, 231, 232, 236, 240, 241, 242, 243, 254, 255, 256, 257, 258, 260, 264, 265, 266, 267, 270, 273, 297, 298, 299, 300], "ask": 299, "assum": [41, 253, 262, 292, 300], "attack": [297, 299], "attempt": 295, "attribut": 300, "avail": [26, 27, 253, 259, 262, 268, 296], "avoid": [296, 299], "await": 294, "awar": 300, "awesom": 295, "ax": [33, 37, 171, 173, 297, 298, 299], "axi": [37, 173, 297, 298, 299], "b": [0, 6, 7, 295], "backward": [198, 199, 209, 210, 225, 226, 234, 235, 299], "base": [12, 13, 14, 15, 16, 17, 18, 38, 40, 83, 88, 95, 183, 236, 282, 284, 289, 292, 294, 295, 296, 297, 299, 300, 301], "base_problem": [225, 226, 234, 235, 238, 239], "basic": [192, 222, 295], "batch": 300, "batch_fit": [134, 136], "been": [17, 294, 295, 297], "befor": [83, 86, 129, 132, 171, 175, 182, 185, 187, 190], "begin": [297, 300], "being": [103, 297], "benchmark": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 282, 294], "benefici": 297, "benefit": 300, "best": [33, 36, 295, 297, 298, 299, 300], "beta": 295, "between": [297, 300], "bin": 296, "blob": 299, "bool": [1, 5, 7, 11, 17, 26, 27, 33, 34, 36, 39, 56, 57, 72, 73, 81, 82, 95, 99, 100, 103, 124, 125, 134, 135, 167, 168, 177, 178, 187, 188, 195, 200, 201, 202, 205, 206, 207, 208, 211, 212, 215, 216, 217, 224, 229, 230, 236, 254, 263, 269, 270, 297], "boolean": [20, 21, 96, 97, 110, 297, 298, 300], "both": 297, "bound": [18, 22, 192, 194, 226, 235, 253, 260, 300], "boundari": [198, 199, 209, 210, 225, 226, 234, 235], "box": [297, 298, 299], "branch": [295, 296], "branin": [0, 1, 2, 3, 4, 5], "braninobject": [0, 1, 2, 3, 283], "braninproblem": [4, 5, 283], "bug": 294, "build": 296, "bx": 0, "c": [0, 214, 215, 296, 297, 299, 300], "c_tol": [134, 135], "calc": [214, 215], "calc_gradi": [4, 10, 88, 95, 225, 234, 236, 238, 272], "calc_individu": [0, 6, 18, 38, 40, 43, 58, 62, 74, 77, 122, 253, 256, 262, 265, 297, 298, 299], "calc_popul": [0, 6, 18, 38, 40, 44, 58, 63, 74, 78, 122, 253, 257, 262, 266, 297, 298, 299], "calcul": [0, 4, 6, 10, 18, 38, 40, 42, 43, 44, 58, 60, 62, 63, 74, 76, 77, 78, 88, 95, 103, 118, 119, 122, 129, 130, 167, 168, 171, 172, 177, 178, 192, 198, 199, 209, 210, 225, 234, 236, 238, 253, 255, 256, 257, 262, 264, 265, 266, 272, 284, 294, 295, 297, 299, 300], "calculate_individu": 298, "calculate_popul": 298, "call": [4, 10, 83, 85, 86, 88, 95, 129, 132, 171, 175, 182, 185, 187, 190, 225, 234, 236, 238, 272, 294, 297, 298, 300], "callback": [155, 157, 171, 176, 287], "can": [95, 236, 289, 293, 294, 295, 296, 297, 298, 299, 300, 302], "candid": 200, "cannot": [42, 60, 76, 255, 264], "capabl": [297, 299, 300], "carri": [297, 300], "case": [207, 208, 211, 223, 258, 259, 267, 268, 273, 300], "cd": [296, 299, 301], "cell": [192, 195, 201, 203, 204, 205, 206, 207, 208, 217], "centr": [198, 199, 209, 210, 225, 226, 234, 235, 299], "certain": 297, "cf": [103, 300], "cfg": 294, "chain": [293, 295], "chain_problem": 299, "chainpopul": 299, "chainproblem": 299, "champion": [0, 4, 6, 10, 18, 38, 40, 46, 58, 64, 74, 88, 101, 122, 225, 231, 234, 238, 242, 253, 262, 272, 300], "chanc": 297, "chang": [294, 295, 296, 297], "changelog": 294, "channel": 296, "charg": [294, 297], "charges_problem": 297, "charges_problem_fd": 297, "chargesproblem": 297, "check": [4, 10, 18, 20, 21, 23, 26, 27, 88, 96, 97, 192, 195, 212, 216, 217, 225, 234, 238, 253, 272, 295], "check_constraints_individu": [4, 10, 88, 96, 225, 234, 238, 272], "check_constraints_popul": [4, 10, 88, 97, 225, 234, 238, 272], "check_individu": [18, 20, 253], "check_popul": [18, 21, 253], "checkout": 295, "choic": [37, 74, 75, 296, 300], "chosen": 297, "circl": [297, 298, 299], "class": [0, 4, 6, 10, 12, 18, 23, 33, 38, 40, 58, 74, 83, 88, 95, 103, 122, 124, 127, 129, 134, 155, 157, 159, 167, 170, 171, 177, 180, 182, 183, 187, 192, 225, 234, 236, 238, 239, 253, 262, 272, 273, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300], "classmethod": [155, 157, 167, 170, 177, 180], "clean": 299, "clear": [23, 25], "clearli": [297, 298], "clone": [296, 301], "close": 298, "cma": 107, "cmi": 111, "cmpnt": [298, 299], "cname": [33, 41, 124, 254, 263, 300], "co": [0, 298, 299], "code": [295, 300, 301], "coeff": [4, 10, 88, 118, 119, 198, 199, 209, 210, 214, 215, 225, 234, 238, 272], "coeffici": [118, 119, 192, 198, 199, 209, 210, 214, 215], "coin": 300, "color": [37, 297, 298, 299], "color_iv": 37, "color_v": 37, "com": [224, 294, 295, 296, 300, 301], "combin": 299, "come": 295, "command": [173, 296], "comment": 294, "commit": [294, 295], "complet": [294, 295, 297, 299], "complex": 302, "complic": 297, "compon": [0, 3, 4, 6, 9, 10, 18, 22, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 56, 57, 58, 60, 62, 63, 64, 65, 68, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 88, 95, 103, 114, 115, 122, 159, 225, 234, 236, 238, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 284, 287, 297, 299, 300], "component_nam": [0, 6, 18, 38, 40, 45, 58, 74, 122, 253, 262], "compos": [74, 284, 297], "comput": [134, 135], "con": [23, 28, 31, 32, 33, 34, 88, 99, 100, 101, 102, 124, 125, 182, 183, 229, 230, 231, 232, 242, 243, 300], "concern": 296, "concret": [226, 235, 238, 239, 295], "conda": 295, "condit": 171, "config": 296, "confin": 297, "consid": [95, 103, 236, 297], "consol": 224, "constrain": 297, "constraint": [4, 10, 18, 19, 20, 21, 22, 31, 32, 33, 34, 88, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 111, 114, 124, 125, 134, 135, 187, 225, 229, 230, 231, 232, 234, 236, 238, 242, 243, 253, 272, 284, 289, 290, 292, 294, 295, 297, 299, 300], "constraint_valu": [4, 10, 18, 20, 21, 88, 96, 97, 225, 234, 238, 253, 272], "constraints_tol": [4, 10, 88, 98, 225, 234, 238, 272], "constructor": [0, 1, 4, 5, 10, 11, 12, 13, 18, 19, 23, 24, 33, 34, 38, 40, 41, 58, 59, 74, 75, 83, 84, 88, 90, 122, 123, 124, 125, 129, 130, 134, 135, 155, 156, 167, 168, 171, 172, 177, 178, 182, 183, 187, 188, 192, 194, 225, 226, 234, 235, 238, 239, 253, 254, 262, 263, 272, 273, 297], "construtor": [6, 7], "contact": 295, "contain": [33, 103, 124, 192, 203, 204, 284, 299, 300], "content": 299, "context": 302, "contradictori": 299, "conveni": 297, "converg": [297, 298, 300], "coordin": 297, "core": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 167, 168, 171, 177, 178, 182, 187, 191, 236, 238, 253, 262, 272, 282, 286, 287, 288, 289, 290, 292, 294], "corner": [192, 195, 201, 205, 206, 207, 208, 217], "correct": [192, 196, 197], "correspond": [295, 296, 297, 299, 300], "costraint": 299, "could": [294, 297], "count": 134, "coupl": 297, "cours": 297, "cover": 299, "crash": 299, "creat": [127, 128, 155, 157, 167, 170, 171, 173, 177, 180, 286, 295, 296, 297, 298, 299, 300], "credit": 295, "criteria": 297, "cross": [159, 162, 298, 299], "crossov": [159, 162], "ctol": [98, 298], "current": [23, 30, 294, 295, 298, 300], "cx": 0, "d": 299, "darkr": [297, 298], "data": [0, 4, 6, 10, 18, 23, 26, 27, 31, 32, 38, 40, 46, 47, 58, 64, 65, 70, 71, 74, 88, 101, 102, 122, 187, 225, 231, 232, 234, 238, 242, 243, 253, 262, 272, 282, 297, 299], "deactiv": 296, "deal": 297, "decent": [187, 297], "decid": 296, "decis": 300, "deduc": 223, "def": [297, 298, 299, 300], "default": [41, 90, 103, 122, 155, 171, 176, 194, 209, 210, 226, 235, 284, 287, 296, 297, 299], "defaultcallbacktempl": [155, 156, 157, 158, 287], "defaultmultiobjectivetermin": 299, "defaultsingleobjectivetermin": 297, "defin": [0, 6, 253, 262, 283, 292, 297, 298, 299, 300], "definit": [4, 10, 283, 300], "deg2rad": 298, "degre": 299, "delta": [192, 194, 225, 226, 234, 235, 297, 300], "demonstr": [294, 298, 299, 300], "denot": 297, "dep": [56, 57, 72, 73, 81, 82, 297], "depend": [0, 6, 18, 38, 40, 41, 56, 57, 58, 72, 73, 74, 81, 82, 122, 128, 253, 262, 294, 296, 297, 301], "deriv": [0, 1, 3, 5, 6, 7, 9, 11, 18, 38, 40, 42, 58, 60, 74, 76, 95, 103, 122, 155, 157, 167, 170, 177, 180, 192, 198, 199, 236, 253, 254, 255, 259, 262, 263, 264, 268, 269, 294, 295, 300], "deriv_coeff": [192, 198], "deriv_coeffs_gridpoint": [192, 199], "descib": 299, "describ": [296, 297, 298, 299], "descript": [282, 283, 285, 299], "design": 297, "detail": 295, "determin": [298, 299], "determinist": 300, "dev": 296, "develop": [171, 173, 301], "df": [253, 259, 262, 268, 300], "diagon": 299, "dict": [23, 52, 53, 91, 92, 128, 129, 130, 171, 172, 173, 182, 183, 188, 225, 226, 234, 235, 239, 273, 297, 298, 299, 300], "differ": [198, 199, 209, 210, 225, 226, 234, 235, 294, 295, 297, 299, 300], "differenti": [42, 60, 76, 95, 103, 198, 199, 209, 210, 225, 234, 236, 255, 264, 292], "digit": [192, 194], "dim": 213, "dimens": [192, 198, 199, 203, 204, 209, 210, 218, 219, 291, 297, 299, 300], "dimension": 297, "direct": [187, 289, 294, 297, 298, 299], "directli": [4, 10, 88, 95, 225, 234, 236, 238, 272, 289, 296, 297, 299, 300], "directori": 296, "discret": [225, 294, 297], "discretizereggrid": [225, 226, 227, 228, 229, 230, 231, 232, 233, 292, 300], "discuss": 295, "displai": 297, "dist": [297, 299], "distanc": [225, 234, 292, 294, 297], "divis": [187, 188], "do": [182, 293, 297], "document": 294, "doe": [296, 297], "domain": [0, 6], "don": 58, "done": [17, 296], "dpar": 226, "driver": 128, "dtype": 297, "due": 294, "dure": [171, 173, 297], "dv": [134, 136, 138], "dvar": [253, 259, 262, 268], "dx": [298, 300], "dy": [298, 300], "dynam": [154, 155, 157, 167, 170, 177, 180, 181, 223, 286, 287, 291, 294, 301], "e": [4, 10, 88, 114, 115, 225, 234, 238, 272, 289, 294, 296, 297, 301], "each": [0, 6, 38, 39, 58, 70, 71, 187, 188, 192, 203, 204, 219, 262, 263, 270, 297, 299], "easili": [297, 300], "eclips": 300, "egg": 296, "einsum": [4, 10, 88, 118, 119, 214, 215, 225, 234, 238, 272, 299], "either": [188, 226, 235, 258, 267, 273, 296, 300], "electr": 297, "electrostat": [293, 294, 295], "element": [23, 30, 299], "els": [195, 201, 205, 206, 207, 208, 211, 217, 258, 259, 267, 268, 297, 299, 300], "end": [297, 299, 300], "engin": 297, "enjoi": 294, "enter": 296, "entri": [23, 26, 27, 70, 71, 188, 299], "enumer": 299, "epl": 300, "equal": [297, 298, 299, 300], "equival": 297, "error": [192, 207, 208, 211, 296], "evalu": [4, 10, 88, 99, 100, 182, 183, 198, 209, 225, 229, 230, 234, 238, 272, 292, 295, 297, 298, 299, 300], "evaluate_individu": [4, 10, 88, 99, 225, 229, 234, 238, 272], "evaluate_popul": [4, 10, 88, 100, 225, 230, 234, 238, 272], "even": 297, "everi": 300, "exampl": [294, 295, 296, 297, 299, 300, 302], "except": 299, "exclud": 297, "execut": 296, "exist": [22, 260, 296], "expect": [299, 300], "explicit": 223, "explor": 300, "express": [22, 260], "extend": 294, "extens": 299, "extern": [282, 285], "extra": 300, "extract": 128, "f": [0, 1, 2, 6, 7, 8, 253, 258, 259, 262, 263, 267, 268, 294, 297, 298, 299, 300], "f_avg": 298, "f_min": 298, "f_tol": [187, 188], "fact": [295, 297], "factor": [187, 188], "factori": [159, 160, 161, 162, 163, 164, 165, 166, 287], "fail": 223, "fals": [0, 1, 4, 5, 7, 10, 11, 33, 36, 88, 95, 99, 100, 103, 127, 128, 134, 135, 192, 201, 215, 217, 225, 229, 230, 234, 236, 238, 263, 272, 297, 298, 300], "far": [294, 297], "farm": [293, 295], "fast": [297, 299], "faster": 300, "favour": 297, "fd_bounds_ord": [226, 234, 235], "fd_order": [225, 226, 234, 235, 297, 300], "fdata": [70, 71], "feel": 295, "fig": [171, 173, 297, 298, 299], "figsiz": [33, 37, 297], "figur": [33, 37, 171, 173, 297], "fill": [297, 298], "fill_diagon": 297, "final": [0, 4, 6, 10, 12, 15, 18, 38, 40, 46, 47, 58, 64, 65, 74, 83, 85, 88, 101, 102, 122, 129, 134, 137, 167, 169, 171, 177, 179, 182, 187, 225, 231, 232, 234, 238, 242, 243, 253, 262, 272, 297, 298, 299, 300], "finalize_individu": [0, 4, 6, 10, 18, 38, 40, 46, 58, 64, 74, 88, 101, 122, 225, 231, 234, 238, 242, 253, 262, 272], "finalize_popul": [0, 4, 6, 10, 18, 38, 40, 47, 58, 65, 74, 88, 102, 122, 225, 232, 234, 238, 243, 253, 262, 272], "find": [33, 36, 192, 200, 201, 202, 297, 300], "find_grid_ind": [192, 200], "find_gridpoint": [192, 201], "find_ingrid": [192, 202], "find_pareto_objmix": [33, 36, 299], "fine": 297, "finish": [0, 4, 6, 10, 12, 17, 18, 38, 40, 58, 74, 83, 85, 88, 122, 129, 171, 182, 187, 225, 234, 238, 253, 262, 272, 297, 298, 299, 300], "finit": [187, 198, 199, 209, 210, 225, 226, 234, 235, 292, 294, 295, 300], "first": [173, 296, 297, 299], "fit": [134, 135, 138, 298, 300], "fix": [294, 300], "flag": [0, 4, 6, 10, 12, 17, 18, 38, 39, 40, 58, 74, 83, 88, 95, 99, 100, 103, 110, 122, 129, 167, 171, 177, 182, 187, 188, 207, 208, 211, 224, 225, 229, 230, 234, 236, 238, 253, 254, 262, 263, 269, 270, 272, 297, 300], "flake8": 301, "float": [0, 4, 5, 6, 10, 11, 18, 19, 26, 27, 28, 29, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 50, 52, 54, 56, 58, 60, 62, 63, 64, 65, 72, 74, 76, 77, 78, 81, 88, 93, 94, 95, 99, 100, 101, 102, 103, 104, 108, 112, 116, 120, 122, 124, 125, 134, 135, 167, 177, 187, 188, 194, 225, 227, 228, 229, 230, 231, 232, 234, 236, 238, 240, 241, 242, 243, 244, 247, 249, 251, 253, 254, 255, 256, 257, 258, 259, 262, 264, 265, 266, 267, 268, 272, 273, 274, 276, 278, 280, 292, 294, 297, 298, 300], "float_random": [297, 299], "float_var": [272, 273, 300], "floatrandomsampl": [297, 299], "folder": 296, "follow": [187, 294, 300], "forc": [294, 296], "forg": 296, "forget": 58, "fork": [295, 296], "form": [297, 299], "forward": [173, 198, 199, 209, 210, 225, 226, 234, 235, 294, 297, 299, 300], "found": [23, 26, 27, 28, 29, 297, 302], "found_individu": [23, 26], "found_popul": [23, 27], "fox": 302, "frac": 297, "framework": 299, "fraunhof": [294, 295], "fraunhoferiw": [294, 295, 296, 301], "fresh": [187, 188], "from": [23, 28, 29, 91, 92, 127, 128, 137, 155, 157, 167, 169, 170, 177, 179, 180, 215, 223, 286, 294, 296, 297, 298, 299, 300, 301], "front": [33, 34, 36, 37, 299], "ftol": [297, 299], "full": [294, 297, 298, 299], "fullfil": [4, 10, 18, 20, 21, 88, 96, 97, 225, 234, 238, 253, 272], "fulli": [297, 298, 299], "fun": 297, "func": [4, 10, 66, 88, 95, 103, 225, 234, 236, 238, 272], "func_org": 74, "func_vars_float": 58, "func_vars_int": 58, "function": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 18, 23, 24, 31, 32, 33, 34, 38, 40, 41, 49, 56, 57, 58, 59, 61, 66, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 82, 83, 85, 88, 90, 95, 99, 100, 101, 102, 103, 114, 115, 122, 124, 125, 129, 134, 159, 161, 162, 163, 164, 165, 171, 173, 182, 187, 188, 225, 229, 230, 231, 232, 234, 236, 238, 242, 243, 253, 254, 258, 259, 261, 262, 263, 267, 268, 271, 272, 282, 283, 284, 289, 293, 294, 295, 297, 298, 299], "funtion": [58, 66, 122], "futur": 295, "fvar": [95, 236], "g": [0, 3, 6, 9, 214, 215, 253, 259, 262, 268, 289, 297, 300], "ga": [294, 297], "gener": [12, 47, 65, 102, 134, 232, 238, 243, 284, 286, 292, 296, 297, 299], "genet": [295, 297, 298], "geometr": [293, 295], "geometri": 299, "get": [0, 4, 6, 10, 12, 14, 18, 33, 37, 38, 40, 56, 57, 58, 72, 73, 74, 81, 82, 83, 88, 98, 107, 111, 122, 129, 171, 182, 187, 192, 196, 197, 203, 204, 205, 206, 207, 208, 214, 215, 225, 234, 238, 253, 262, 272, 294, 297], "get_algorithm": [159, 161], "get_bound": [18, 22, 134, 139, 253, 260, 297], "get_cel": [192, 203, 204], "get_class": [155, 157, 167, 168, 170, 177, 180], "get_corn": [192, 205, 206], "get_crossov": [159, 162], "get_extra_info": [134, 140], "get_fig": [297, 298, 299], "get_figur": 299, "get_figure_f": [171, 173], "get_gradi": [4, 10, 88, 95, 103, 225, 234, 236, 238, 272], "get_mut": [159, 163], "get_nam": [134, 141], "get_nec": [134, 142], "get_nic": [134, 143], "get_nix": [134, 144], "get_nobj": [134, 145], "get_sampl": [159, 164], "get_termin": [159, 165], "gg": [187, 188, 189, 190, 191, 290, 294, 295, 297], "git": [295, 296, 301], "github": [294, 295, 296, 300, 301, 302], "give": 299, "given": [0, 4, 6, 10, 18, 20, 21, 33, 36, 37, 38, 40, 46, 47, 58, 64, 65, 74, 88, 96, 97, 101, 102, 122, 192, 204, 223, 225, 231, 232, 234, 238, 242, 243, 253, 262, 272, 297, 298, 299], "global": [0, 6, 226, 235, 297, 300], "go": 299, "goal": [263, 297], "goe": 295, "good": 297, "gp": [192, 207, 211], "gp2i": [192, 207], "gproblem": [297, 300], "gpt": [192, 198, 199, 208, 209, 210, 213, 214, 215], "gpts2ind": [192, 208], "grad": 187, "grad_coeff": [192, 209], "grad_coeffs_gridpoint": [192, 210], "gradient": [4, 10, 88, 95, 103, 122, 134, 146, 187, 188, 192, 198, 199, 209, 210, 225, 234, 236, 238, 272, 284, 290, 294, 295, 297, 300], "gradient_spars": [134, 147], "greedi": [187, 290, 294, 295, 297], "grid": [192, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 225, 291, 292, 295, 298, 300], "grid_problem": 298, "gridproblem": 298, "guarante": 297, "gx": [214, 215], "ha": [0, 6, 17, 295, 297, 298, 300], "handi": 297, "handl": [297, 300], "has_ana_deriv": [0, 6, 254, 262, 263, 269, 300], "has_batch_fit": [134, 148], "has_gradi": [134, 149], "has_gradient_spars": [134, 150], "has_hessian": [134, 151], "has_hessians_spars": [134, 152], "has_set_se": [134, 153], "have": [293, 294, 297, 299], "help": [159, 160, 295, 297], "helper": [282, 291], "henc": [297, 299, 300], "here": [289, 294, 295, 297, 298, 299, 300], "hessian": 300, "heurist": [295, 297], "higher": 299, "hint": [223, 291, 296], "histori": 295, "hoo": 0, "hous": 294, "how": [224, 294, 295, 299, 300], "howev": [295, 297, 300], "http": [224, 294, 295, 296, 300, 301], "i": [0, 4, 6, 10, 23, 26, 27, 37, 41, 58, 88, 103, 114, 115, 187, 188, 192, 194, 209, 210, 212, 217, 225, 226, 234, 235, 238, 259, 268, 272, 283, 294, 295, 296, 297, 298, 299, 300], "i0": 299, "i1": 299, "i2gp": [192, 211], "id": 300, "idea": 295, "ignor": [299, 300], "imagin": [297, 299], "imnport": 223, "implement": [282, 290, 294, 295, 297, 299, 300], "import": [128, 129, 223, 291, 294, 297, 298, 299, 300], "import_modul": [223, 291, 294], "impos": 297, "improv": [294, 295, 297], "in_grid": [192, 212], "includ": 295, "incomplet": 295, "increas": [294, 300], "ind": [192, 199, 200, 201, 207, 208, 210, 211, 213, 216, 217], "independ": 299, "index": [36, 42, 60, 76, 192, 200, 207, 255, 259, 264, 268, 297], "indic": [95, 192, 195, 199, 200, 201, 205, 206, 207, 208, 210, 211, 213, 216, 217, 236, 297, 300], "individu": [0, 4, 6, 10, 18, 20, 38, 40, 43, 44, 58, 62, 63, 70, 71, 74, 77, 78, 88, 96, 99, 100, 122, 167, 168, 177, 178, 225, 229, 230, 234, 238, 253, 256, 257, 262, 265, 266, 272, 297, 299, 300], "inds2gpt": [192, 213], "inequ": 300, "inf": [6, 22, 108, 112, 247, 249, 253, 254, 260, 273, 276, 278], "infinit": 194, "info": [0, 4, 6, 10, 12, 14, 18, 38, 40, 58, 74, 83, 86, 88, 122, 129, 132, 171, 175, 182, 185, 187, 190, 225, 234, 238, 253, 262, 272, 300], "inform": [192, 222, 299, 300], "init": 297, "init_values_float": [273, 300], "init_values_int": 273, "initi": [0, 4, 5, 6, 10, 11, 12, 16, 17, 18, 38, 40, 48, 58, 67, 74, 79, 83, 88, 104, 105, 106, 122, 129, 131, 159, 160, 171, 174, 182, 184, 187, 189, 225, 233, 234, 237, 238, 244, 245, 246, 253, 262, 272, 273, 274, 275, 294, 297, 298, 299, 300], "initial_valu": [4, 5, 10], "initial_values_float": [4, 10, 88, 104, 225, 234, 238, 244, 272, 274, 297, 298, 299], "initial_values_int": [4, 10, 88, 105, 225, 234, 238, 245, 272, 275, 298], "insid": 298, "instal": [223, 293, 295, 301], "instanc": 300, "instanti": 300, "instead": [4, 10, 88, 95, 225, 234, 236, 238, 272, 296, 297], "int": [0, 4, 6, 10, 15, 16, 18, 20, 21, 23, 24, 30, 33, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 57, 58, 60, 62, 63, 64, 65, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 82, 85, 87, 88, 90, 91, 92, 95, 96, 97, 101, 102, 103, 105, 106, 109, 113, 114, 115, 116, 117, 122, 124, 131, 133, 134, 135, 137, 154, 167, 169, 174, 176, 177, 179, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 198, 199, 209, 210, 211, 216, 218, 222, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 242, 243, 245, 246, 248, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 275, 277, 279, 294, 299], "int_inf": [4, 10, 88, 89, 109, 113, 192, 193, 194, 225, 234, 238, 248, 250, 272, 273, 277, 279], "int_var": [272, 273], "integ": [0, 4, 6, 10, 18, 26, 27, 28, 29, 31, 32, 38, 40, 41, 42, 43, 44, 46, 47, 53, 55, 58, 60, 62, 63, 64, 65, 74, 76, 77, 78, 88, 93, 94, 95, 99, 100, 101, 102, 103, 105, 109, 113, 121, 122, 167, 177, 199, 210, 213, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 240, 241, 242, 243, 245, 248, 250, 252, 253, 255, 256, 257, 262, 264, 265, 266, 272, 273, 275, 277, 279, 281, 298, 300], "intend": [294, 297], "intent": 299, "interfac": [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 282, 294, 295, 297, 298, 299, 300, 302], "interior": 300, "interpol": [192, 194, 214, 215, 294, 300], "interpolation_coeffs_point": [192, 214, 215], "introduc": [294, 299], "invalid": 37, "invers": 297, "invit": 295, "invok": [295, 300], "ipopt": [294, 297, 298, 300], "ipynb": 294, "ir": [214, 215], "irrelev": 297, "is_gridi": [192, 216], "is_gridpoint": [192, 217], "is_intprob": [167, 177], "is_mix": 177, "issu": [294, 295], "its": [272, 292, 297], "ivar": [4, 10, 88, 95, 225, 234, 236, 238, 272], "iw": [294, 295], "iwopi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 294, 296, 297, 298, 299, 300, 301, 302], "j": 297, "job": 297, "just": 294, "keep": [294, 296], "kei": [23, 24, 52, 53, 90, 91, 92, 225, 226, 234, 235], "keyf": [23, 24], "kind": [295, 297], "kwarg": [18, 19, 127, 128, 159, 164, 166, 171, 173, 182, 183, 238, 239, 273], "larg": [297, 300], "last": [300, 301], "later": [294, 299], "latest": 296, "latter": 297, "layout": [293, 295], "ldot": 297, "lead": 295, "leav": 296, "left": [192, 195, 201, 205, 206, 207, 208, 217, 273, 297, 300], "len": [194, 297, 298], "length": [259, 268, 299, 300], "leq": 297, "let": [297, 298, 299, 300], "level": [15, 16, 20, 21, 46, 47, 48, 64, 65, 67, 79, 85, 87, 91, 92, 95, 96, 97, 101, 102, 103, 106, 131, 133, 134, 135, 137, 154, 169, 174, 176, 179, 181, 184, 186, 189, 191, 231, 232, 233, 236, 237, 242, 243, 246, 282, 289], "libmamba": 296, "librari": 300, "licens": [295, 300], "lie": 298, "lightweight": [192, 291], "like": [194, 213, 273, 294, 295, 299], "linalg": [297, 298, 299], "line": [296, 301], "linear": [192, 194, 294], "link": [4, 10, 88, 103, 225, 234, 238, 272, 295, 300], "list": [4, 5, 10, 11, 33, 36, 41, 42, 43, 44, 45, 54, 55, 58, 60, 61, 62, 63, 66, 70, 71, 74, 75, 76, 77, 78, 95, 103, 118, 119, 120, 121, 122, 124, 134, 188, 194, 209, 210, 236, 251, 252, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 273, 280, 281, 284, 289, 295, 300], "littl": [282, 291], "ll": [293, 300], "load": [154, 181, 286, 287, 294, 297, 298, 299, 300], "local": [187, 234, 290, 292, 294, 300, 301], "localfd": [225, 234, 235, 236, 237, 292, 294, 295, 297, 300], "locat": [192, 212, 297, 299, 300], "look": 299, "lookup": [23, 28, 29], "lookup_individu": [23, 28], "lookup_popul": [23, 29], "loop": 297, "lot": 300, "lower": [10, 11, 22, 192, 195, 201, 205, 206, 207, 208, 217, 260, 300], "m": 296, "mai": [83, 85, 129, 171, 182, 187, 299], "main": [58, 296, 297], "mainli": 295, "make": [297, 298], "manag": 58, "mani": [294, 297], "manner": [297, 300], "map": [41, 52, 53, 91, 92, 215, 273], "marbl": 299, "mark": 298, "mathrm": [297, 300], "matplotlib": [297, 298, 299], "matrix": 299, "max": [22, 33, 36, 203, 204, 254, 260, 298, 299], "max_dist": 298, "max_siz": 23, "max_values_constraint": [4, 10, 88, 107, 225, 234, 238, 272], "max_values_float": [4, 10, 88, 108, 225, 234, 238, 247, 272, 273, 276, 297, 298, 299, 300], "max_values_int": [4, 10, 88, 109, 225, 234, 238, 248, 272, 273, 277, 298], "maxim": [0, 4, 6, 10, 11, 23, 24, 36, 38, 39, 88, 107, 108, 109, 110, 187, 188, 192, 220, 225, 234, 238, 247, 248, 254, 262, 263, 270, 272, 273, 276, 277, 297, 298, 299], "maximize_obj": [4, 10, 88, 110, 225, 234, 238, 272], "maximum": 297, "maxn": 298, "maxradiu": 297, "maxstretch": 299, "mayb": 294, "mdl": 223, "mean": 299, "meaning": 297, "measur": 299, "meet": 299, "mem_keyf": [88, 90], "mem_siz": [88, 90, 182, 183, 226], "memor": [187, 188, 300], "memori": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 88, 90, 182, 183, 187, 226, 284, 289, 300], "memory_s": [187, 188], "messag": [295, 296], "meta": 295, "method": [192, 194, 297], "might": 301, "min": [22, 203, 204, 253, 254, 260, 299], "min_dist": 298, "min_values_constraint": [4, 10, 88, 111, 225, 234, 238, 272], "min_values_float": [4, 10, 88, 112, 225, 234, 238, 249, 272, 273, 278, 297, 298, 299, 300], "min_values_int": [4, 10, 88, 113, 225, 234, 238, 250, 272, 273, 279, 298], "mindist": 294, "minf": 300, "minf_fd": 300, "minfunc": 300, "minim": [4, 10, 11, 36, 88, 111, 112, 113, 182, 183, 187, 188, 192, 221, 225, 234, 238, 249, 250, 254, 272, 273, 278, 279, 293, 294, 295, 299], "minima": [0, 6], "minimum": 300, "minpotenti": 297, "miss": 296, "mit": 295, "mitig": 299, "mix": [167, 177, 293, 294, 295], "mixedvariablega": [294, 298], "mode": [187, 188], "model": [294, 302], "modifi": [282, 292], "modul": [223, 291, 294], "moment": [167, 177], "more": [294, 295, 297, 300, 302], "mostli": 294, "multi": [33, 284, 293, 294, 295, 300], "multi_obj_chain": 294, "multiobjoptresult": [33, 34, 35, 36, 37, 176, 284, 294], "multiobjproblemtempl": [167, 168, 169, 170, 287], "multipl": [167, 287, 300], "must": 297, "mut": [159, 163], "mutat": [159, 163], "mx": 298, "my": 298, "my_venv": 296, "n": [50, 51, 69, 116, 117, 192, 291, 296, 297, 298, 299], "n_charg": 297, "n_compon": [0, 6, 18, 20, 21, 22, 38, 39, 40, 46, 47, 49, 56, 57, 58, 64, 65, 68, 70, 71, 72, 73, 74, 80, 81, 82, 95, 96, 97, 102, 103, 122, 232, 236, 243, 253, 254, 260, 261, 262, 263, 270, 271, 297, 298, 299, 300], "n_con": 114, "n_con_cmptn": [297, 298, 299, 300], "n_cons_cmpnt": 29, "n_constraint": [4, 10, 31, 32, 33, 34, 88, 98, 99, 100, 101, 102, 107, 111, 114, 124, 125, 225, 229, 230, 231, 232, 234, 238, 242, 243, 272, 297, 298, 299, 300], "n_dim": [192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "n_eval": 298, "n_fit": 134, "n_func_compon": [70, 71], "n_function": [58, 69, 122], "n_gen": 298, "n_gp": 215, "n_gpt": [198, 199, 201, 208, 209, 210, 213, 214, 215], "n_ind": [199, 200, 210], "n_max_gen": [297, 299], "n_max_step": [187, 188], "n_obj": 115, "n_obj_cmptn": [297, 298, 299, 300], "n_object": [4, 10, 31, 32, 33, 34, 88, 99, 100, 101, 110, 115, 225, 229, 230, 231, 234, 238, 242, 272, 297, 298, 299, 300], "n_objs_cmpnt": 29, "n_point": [192, 219], "n_pop": [21, 27, 29, 32, 33, 34, 44, 47, 63, 65, 71, 78, 94, 97, 100, 102, 228, 230, 232, 241, 243, 257, 258, 266, 267, 297, 298, 299], "n_pt": [195, 197, 198, 201, 202, 204, 206, 209, 215], "n_row_max": 298, "n_sel_compon": [42, 43, 44, 60, 62, 63, 76, 77, 78, 255, 256, 257, 259, 264, 265, 266, 268], "n_step": [192, 194], "n_var": [103, 187, 209, 210], "n_vars_al": 134, "n_vars_float": [0, 4, 6, 10, 18, 26, 27, 28, 29, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 46, 47, 50, 56, 58, 60, 62, 63, 64, 65, 72, 74, 76, 77, 78, 81, 88, 93, 94, 95, 99, 100, 101, 102, 103, 104, 108, 112, 116, 122, 124, 125, 187, 225, 227, 228, 229, 230, 231, 232, 234, 236, 238, 240, 241, 242, 243, 244, 247, 249, 253, 255, 256, 257, 262, 264, 265, 266, 272, 274, 276, 278, 297, 298, 299, 300], "n_vars_int": [0, 4, 6, 10, 18, 26, 27, 28, 29, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 46, 47, 51, 57, 58, 60, 62, 63, 64, 65, 73, 74, 76, 77, 78, 82, 88, 93, 94, 95, 99, 100, 101, 102, 103, 105, 109, 113, 117, 122, 124, 125, 225, 227, 228, 229, 230, 231, 232, 234, 236, 238, 240, 241, 242, 243, 245, 248, 250, 253, 255, 256, 257, 262, 264, 265, 266, 272, 275, 277, 279, 297, 298, 299, 300], "n_vr": [95, 236], "nai": 298, "name": [0, 1, 4, 5, 6, 7, 10, 11, 12, 13, 18, 33, 38, 40, 41, 45, 52, 53, 54, 55, 58, 59, 74, 75, 83, 84, 88, 90, 120, 121, 122, 124, 128, 188, 223, 225, 226, 234, 235, 238, 239, 251, 252, 253, 254, 262, 263, 272, 273, 280, 281, 291, 294, 297, 298, 299, 300], "nan": [42, 60, 76, 255, 264], "nax": 298, "naz": 298, "ndarrai": [27, 29, 42, 56, 57, 60, 70, 71, 72, 73, 76, 81, 82, 95, 98, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 118, 119, 134, 187, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 236, 244, 245, 247, 248, 249, 250, 255, 258, 264, 267, 274, 275, 276, 277, 278, 279], "nearbi": 299, "nearest": [192, 194, 294], "necessari": [226, 235], "need": [293, 297, 299, 300], "neg": 297, "neighbour": 299, "neq": 297, "new": [4, 10, 52, 53, 88, 93, 94, 127, 128, 225, 227, 228, 234, 238, 240, 241, 272, 294, 297, 299], "new_branch": 295, "next": [297, 299, 300], "ngen": 294, "nice": 299, "nlopt": 294, "nocross": 299, "non": [22, 260, 296], "none": [0, 3, 4, 6, 9, 10, 18, 23, 24, 28, 29, 33, 37, 38, 40, 41, 42, 43, 44, 58, 60, 62, 63, 74, 75, 76, 77, 78, 88, 90, 91, 92, 95, 103, 122, 171, 173, 192, 194, 207, 208, 211, 223, 225, 226, 234, 235, 236, 238, 253, 254, 255, 256, 257, 259, 262, 263, 264, 265, 266, 272, 273, 291, 294, 297, 298, 299, 300], "nonlinear": 300, "norm": [297, 298, 299, 300], "note": [182, 296, 297, 299, 300], "notebook": 294, "notic": [296, 297, 298, 299, 300], "notifi": [155, 158], "now": [294, 297, 298, 299, 300], "np": [20, 21, 22, 26, 27, 28, 29, 31, 32, 33, 34, 39, 42, 43, 44, 46, 47, 60, 62, 63, 64, 65, 76, 77, 78, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 124, 125, 214, 215, 227, 228, 229, 230, 231, 232, 236, 240, 241, 242, 243, 255, 256, 257, 260, 264, 265, 266, 270, 273, 297, 298, 299], "npop": 294, "nsga2": [294, 299], "number": [0, 4, 6, 10, 18, 23, 24, 30, 38, 40, 41, 49, 50, 51, 58, 68, 69, 74, 80, 88, 114, 115, 116, 117, 122, 182, 183, 187, 188, 192, 194, 218, 219, 225, 234, 238, 253, 254, 261, 262, 263, 271, 272, 298, 299, 300], "numer": [294, 300], "numpi": [27, 29, 42, 56, 57, 60, 70, 71, 72, 73, 76, 81, 82, 95, 98, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 118, 119, 134, 187, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 236, 244, 245, 247, 248, 249, 250, 255, 258, 264, 267, 274, 275, 276, 277, 278, 279, 294, 297, 298, 299], "nx": 298, "ny": 298, "obj": [23, 28, 31, 32, 33, 34, 88, 99, 100, 101, 102, 124, 125, 182, 183, 187, 229, 230, 231, 232, 242, 243, 300], "obj_0": [33, 37], "obj_1": [33, 37], "obj_weight": [33, 36], "object": [0, 4, 6, 10, 12, 15, 16, 18, 23, 24, 31, 32, 33, 34, 36, 37, 38, 39, 40, 48, 58, 67, 74, 79, 83, 85, 87, 88, 90, 91, 92, 95, 99, 100, 101, 102, 103, 110, 115, 118, 119, 122, 124, 125, 128, 129, 131, 133, 134, 137, 167, 169, 171, 173, 174, 176, 177, 179, 182, 184, 186, 187, 188, 189, 191, 225, 229, 230, 231, 232, 234, 236, 238, 242, 243, 253, 262, 272, 283, 284, 287, 289, 292, 293, 294, 295, 297, 298, 300], "objev": 300, "objval": 300, "obtain": [4, 10, 88, 103, 225, 234, 238, 272], "obviou": 300, "obvious": [295, 299], "off": [207, 208, 211], "offer": 300, "often": [297, 300], "old": [52, 53], "onam": [33, 124, 300], "onc": 296, "one": [192, 204, 258, 259, 267, 268, 297, 299], "onli": [95, 167, 177, 236, 296, 297, 299], "onward": 299, "open": [295, 300], "oper": 297, "opt": [294, 296], "opt_result": [83, 85, 129, 171, 182, 187], "optfunct": [18, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 66, 74, 75, 284, 289], "optfunctionlist": [58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 88, 95, 103, 122, 236, 284], "optfunctionsubset": [74, 75, 76, 77, 78, 79, 80, 81, 82, 284], "optim": [1, 7, 18, 33, 34, 40, 41, 46, 59, 64, 83, 84, 85, 86, 87, 88, 101, 124, 125, 128, 129, 130, 133, 134, 135, 137, 169, 171, 172, 173, 176, 179, 182, 183, 186, 187, 188, 189, 190, 191, 231, 242, 254, 263, 282, 284, 285, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300], "optimis": 300, "optimizer_pygmo": [129, 130, 131, 132, 133, 286, 300], "optimizer_pymoo": [171, 172, 173, 174, 175, 176, 287, 297, 298, 299], "optimizer_scipi": [182, 183, 184, 185, 186, 288], "optimum": [187, 290, 297], "optimz": [182, 183, 296], "option": [24, 29, 37, 41, 43, 44, 62, 63, 75, 77, 78, 90, 91, 92, 95, 99, 100, 103, 128, 168, 173, 176, 178, 183, 188, 194, 201, 209, 210, 215, 217, 223, 226, 229, 230, 235, 236, 239, 254, 256, 257, 259, 263, 265, 266, 273, 294, 297, 300], "optoin": 296, "optresult": [85, 87, 294, 300], "orang": [37, 297, 298, 299], "order": [95, 103, 192, 198, 199, 209, 210, 225, 226, 234, 235, 236, 258, 259, 267, 268, 293, 294, 297, 300], "orderb": [192, 198, 199, 209, 210, 225, 234], "origin": [74, 75, 192, 194, 295, 300], "osx": 294, "other": [58, 70, 71, 122, 295, 297, 299, 302], "otherwis": [28, 29, 36, 41, 258, 259, 267, 268], "our": [297, 298, 299, 300], "out": [187, 294, 295, 297], "outermost": [195, 201, 205, 206, 207, 208, 217, 299], "output": [224, 291], "outsid": 298, "over": 297, "overal": 299, "overload": [95, 236, 297], "overwritten": [167, 168], "own": [282, 290], "p": [192, 196, 203, 205, 212, 214, 217], "p0": [205, 206], "p_max": [192, 220], "p_min": [192, 221], "packag": [154, 181, 223, 282, 283, 285, 286, 287, 288, 289, 291, 294, 295, 296, 300], "pagmo": 300, "pair": 297, "par": [6, 7, 159, 161, 162, 163], "paramet": [0, 6, 23, 127, 129, 171, 182, 286, 294, 295, 298, 300], "pareto": [33, 34, 36, 37, 299], "part": 302, "parteo": [33, 34], "parti": 296, "particl": 297, "particular": 297, "particularli": 297, "pass": [294, 300], "path": 296, "pc": 299, "pcd": 299, "per": [192, 204, 297, 299], "perfectli": 297, "pg": 215, "pi": [0, 299], "pick": 299, "pip": [293, 295, 301], "pipe": [272, 292], "placehold": 296, "plan": 299, "pleas": [295, 301], "plot": [37, 173, 299], "plot_pareto": [33, 37, 299], "plt": [173, 297, 298, 299], "pmap": 215, "pname": [33, 124], "point": [33, 36, 37, 58, 173, 187, 188, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 225, 226, 234, 235, 291, 297, 298, 300], "polici": 300, "polul": 299, "pop": [95, 103, 127, 128, 134, 135, 236], "pop_siz": [297, 298, 299], "popul": [0, 4, 6, 10, 18, 21, 23, 32, 38, 40, 44, 47, 58, 63, 65, 74, 78, 88, 94, 95, 97, 100, 102, 103, 122, 137, 167, 168, 177, 178, 225, 228, 230, 232, 234, 236, 238, 241, 243, 253, 257, 258, 262, 266, 267, 272, 295, 297, 299, 300], "posit": [297, 299], "possibl": [0, 6, 18, 38, 40, 42, 58, 60, 74, 76, 122, 253, 255, 262, 264, 295], "potenti": [293, 295], "pre": 296, "precis": [192, 194], "predecessor": 294, "prepend": 222, "pretti": 294, "prevent": 299, "previous": 103, "print": [83, 86, 129, 132, 159, 166, 171, 175, 182, 185, 187, 190, 192, 222, 224, 291, 294, 297, 298, 300], "print_info": [83, 86, 129, 132, 171, 175, 182, 185, 187, 190, 192, 222, 297, 298, 299, 300], "prob_r": [99, 100, 118, 119, 229, 230], "prob_res_einsum_individu": [4, 10, 88, 118, 225, 234, 238, 272], "prob_res_einsum_popul": [4, 10, 88, 119, 225, 234, 238, 272], "prob_res_list": [4, 10, 88, 118, 119, 225, 234, 238, 272], "problem": [0, 1, 4, 5, 6, 7, 10, 11, 18, 33, 34, 38, 40, 41, 43, 44, 46, 47, 58, 59, 62, 63, 64, 65, 74, 77, 78, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 129, 130, 134, 135, 137, 167, 168, 169, 171, 172, 177, 178, 179, 180, 182, 183, 187, 188, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 253, 254, 256, 257, 262, 263, 265, 266, 272, 273, 283, 284, 286, 287, 289, 292, 293, 294, 295, 297, 299, 300], "problem_par": [129, 130, 171, 172, 297, 298, 299, 300], "problem_result": [0, 6, 18, 33, 34, 38, 40, 43, 44, 46, 47, 58, 62, 63, 64, 65, 74, 77, 78, 93, 94, 101, 102, 122, 124, 125, 227, 228, 231, 232, 240, 241, 242, 243, 253, 256, 257, 262, 265, 266, 297, 298, 299, 300], "problemdefaultfunc": [103, 122, 123, 284], "problemwrapp": [234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 292], "proce": 300, "produc": 299, "program": 300, "project": [187, 294, 297], "proof": 297, "properti": [0, 4, 6, 10, 12, 17, 18, 23, 30, 38, 40, 45, 50, 51, 54, 55, 58, 66, 69, 74, 83, 88, 98, 107, 110, 111, 114, 115, 116, 117, 122, 129, 171, 182, 187, 192, 218, 219, 220, 221, 225, 234, 238, 253, 262, 269, 272], "provid": [225, 234, 289, 292, 295, 297, 300], "pso": 294, "pt": [192, 195, 197, 198, 201, 202, 204, 206, 209, 215], "public": 300, "pull": 295, "pure": [167, 177], "purpos": [294, 297], "push": 295, "put": 295, "px": 215, "pxy": 299, "pybind11": 300, "pygmo": [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 171, 285, 293, 294, 295, 297, 300, 301], "pygmo_pop": [134, 137], "pymoo": [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 285, 293, 294, 295, 297, 298, 299, 301], "pymoo_problem": [159, 160, 171], "pymoo_result": [167, 169, 177, 179], "pyplot": [37, 297, 298, 299], "pytest": 301, "python": [224, 294, 295, 302], "q": [196, 197], "quad": 297, "question": 224, "r": [0, 297, 299], "r_i": 297, "r_j": 297, "radial": 297, "radii": 299, "radiu": [297, 298, 299], "radius_0": 297, "radius_1": 297, "radius_10": 297, "radius_11": 297, "radius_12": 297, "radius_13": 297, "radius_14": 297, "radius_15": 297, "radius_16": 297, "radius_17": 297, "radius_18": 297, "radius_19": 297, "radius_2": 297, "radius_20": 297, "radius_21": 297, "radius_22": 297, "radius_23": 297, "radius_24": 297, "radius_25": 297, "radius_26": 297, "radius_27": 297, "radius_28": 297, "radius_29": 297, "radius_3": 297, "radius_30": 297, "radius_31": 297, "radius_32": 297, "radius_33": 297, "radius_34": 297, "radius_35": 297, "radius_36": 297, "radius_37": 297, "radius_38": 297, "radius_39": 297, "radius_4": 297, "radius_40": 297, "radius_41": 297, "radius_42": 297, "radius_43": 297, "radius_44": 297, "radius_45": 297, "radius_46": 297, "radius_47": 297, "radius_48": 297, "radius_49": 297, "radius_5": 297, "radius_6": 297, "radius_7": 297, "radius_8": 297, "radius_9": 297, "rais": 295, "random": [297, 299], "rang": [297, 298, 299], "ratg": [214, 215], "re": 300, "reach": [187, 188, 289], "readi": [294, 298, 299, 300], "recommend": [0, 6, 296, 297], "red": 37, "reduc": [187, 195, 201, 205, 206, 207, 208, 217], "regular": [192, 225, 291, 292, 298, 300], "regulardiscretizationgrid": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 291, 294, 295], "releas": [294, 296, 300], "relev": [198, 199, 209, 210, 214, 215, 297], "remov": [296, 300], "renam": [0, 6, 18, 38, 40, 52, 53, 58, 74, 122, 253, 262], "rename_vars_float": [0, 6, 18, 38, 40, 52, 58, 74, 122, 253, 262], "rename_vars_int": [0, 6, 18, 38, 40, 53, 58, 74, 122, 253, 262], "repeat": [299, 300], "replac": [296, 300, 301], "report": 295, "repositori": [295, 296, 301, 302], "repres": [198, 199, 209, 210, 297, 299], "request": [295, 300], "requir": [295, 297, 299, 300, 301], "reshap": [297, 298], "respect": [297, 298], "restrict": 294, "result": [4, 10, 20, 21, 23, 24, 28, 29, 33, 34, 36, 43, 44, 46, 47, 58, 62, 63, 64, 65, 70, 71, 77, 78, 85, 87, 88, 93, 94, 96, 97, 99, 100, 101, 102, 118, 119, 122, 124, 125, 133, 137, 169, 176, 179, 186, 191, 214, 215, 225, 227, 228, 229, 230, 231, 232, 234, 238, 240, 241, 242, 243, 256, 257, 258, 259, 265, 266, 267, 268, 272, 284, 289, 297, 298, 299, 300], "ret_ind": [192, 201, 217], "ret_pmap": [192, 215], "ret_prob_r": [4, 10, 88, 99, 100, 225, 229, 230, 234, 238, 272], "return": [0, 6, 18, 20, 23, 24, 33, 35, 38, 40, 58, 74, 90, 122, 124, 126, 253, 262, 297, 298, 299, 300], "revers": [187, 294], "revert": 297, "right": [273, 297, 300], "rmax": 299, "rmin": 299, "root": 296, "rosenbrock": [6, 7, 8, 9, 10, 11, 294], "rosenbrockobject": [6, 7, 8, 9, 283], "rosenbrockproblem": [10, 11, 283], "rule": [294, 300], "run": [83, 87, 129, 133, 171, 176, 182, 186, 187, 188, 191, 286, 293, 297, 298, 299, 300, 301], "s_": 297, "safeti": 300, "sake": 297, "same": [226, 235, 253, 262, 292, 294, 297, 300], "samp_nam": [159, 164], "sampl": [159, 164, 297, 299], "scalar": [40, 258, 267, 284, 297, 300], "scale": 300, "scatter": [37, 173, 297, 298], "scipi": [182, 183, 184, 185, 186, 285, 294, 295], "scipy_par": [182, 183], "script": 294, "search": [187, 290], "secondari": 299, "section": 294, "see": [159, 160, 297], "seed": [297, 298, 299], "sel_grid": [200, 201, 202], "select": [42, 43, 44, 60, 62, 63, 76, 77, 78, 95, 103, 200, 201, 202, 225, 236, 255, 256, 257, 259, 264, 265, 266, 268, 282, 289, 292, 294, 297, 298, 299, 300], "self": [33, 35, 109, 113, 124, 126, 159, 160, 248, 250, 273, 277, 279, 297, 298, 299, 300], "serial": [129, 286], "serv": 299, "set": [173, 192, 215, 273, 296, 297, 299], "set_alpha": 299, "set_aspect": [297, 298, 299], "set_titl": [297, 298, 299], "set_xlabel": [297, 298, 299], "set_xlim": 299, "set_ylabel": [297, 298, 299], "set_ylim": 299, "setup": [129, 130, 171, 172, 294, 297, 299, 300], "setup_par": [129, 130, 171, 172, 297, 298, 299], "shape": [20, 21, 22, 26, 27, 28, 29, 31, 32, 33, 34, 39, 42, 43, 44, 46, 47, 56, 57, 60, 62, 63, 64, 65, 70, 71, 72, 73, 76, 77, 78, 81, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 124, 125, 134, 187, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 227, 228, 229, 230, 231, 232, 236, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 254, 255, 256, 257, 258, 260, 264, 265, 266, 267, 270, 274, 275, 276, 277, 278, 279, 298], "shoot": 295, "shortcut": 282, "shortli": 297, "should": [295, 296], "show": [33, 37, 171, 173, 297, 298, 299], "signatur": [159, 160], "silent": [15, 16, 20, 21, 46, 47, 48, 64, 65, 67, 79, 85, 87, 91, 92, 95, 96, 97, 101, 102, 103, 106, 131, 133, 134, 135, 137, 154, 169, 174, 176, 179, 181, 184, 186, 189, 191, 224, 231, 232, 233, 236, 237, 242, 243, 246, 291], "similar": 300, "simpl": [253, 262, 292, 293, 294, 295, 297, 299], "simpleconstraint": [253, 254, 255, 256, 257, 258, 259, 260, 261, 292, 294, 300], "simpleobject": [0, 6, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 283, 292, 294, 300], "simpleproblem": [4, 10, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 292, 300], "simpli": [272, 292, 299, 300], "simplifi": [282, 292], "sin": [298, 299], "sinc": [295, 297, 299, 300], "singl": [0, 4, 6, 10, 18, 38, 40, 43, 58, 62, 74, 77, 88, 99, 122, 124, 177, 225, 229, 234, 238, 253, 256, 259, 262, 265, 268, 272, 284, 287, 297, 300], "singleobjoptresult": [124, 125, 126, 133, 137, 169, 176, 179, 186, 191, 284, 294], "singleobjproblem": [167, 170, 171], "singleobjproblemtempl": [177, 178, 179, 180, 287], "size": [23, 24, 30, 37, 58, 90, 182, 183, 187, 188, 192, 194, 226, 235, 297, 298, 300], "small": 294, "so": [293, 294, 297, 299], "softwar": 302, "solut": [173, 297, 298, 299, 300], "solv": [83, 86, 87, 129, 132, 133, 167, 168, 171, 175, 176, 177, 178, 182, 185, 186, 187, 190, 191, 294, 295, 297, 298, 299, 300], "solvabl": 294, "solve_succeed": 300, "solver": [83, 86, 87, 129, 132, 133, 137, 169, 171, 175, 176, 179, 182, 185, 186, 187, 190, 191, 284, 287, 295, 296, 297, 298, 299, 300], "some": 295, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 295, 296, 300], "space": [192, 195, 206, 222], "sparsiti": [297, 300], "specif": 297, "specifi": 41, "speed": [295, 297], "sphinx": 294, "split": [58, 70, 71, 122, 294], "split_individu": [58, 70, 122], "split_popul": [58, 71, 122], "squar": 297, "stabl": 296, "stack": [298, 299], "stackoverflow": 224, "stand": 297, "start": [294, 295, 297, 300], "static": [127, 128], "statu": 300, "steepest": [187, 297], "step": [187, 188, 192, 194, 226, 235, 296], "step_div_factor": [187, 188], "step_max": [187, 188, 297], "step_min": [187, 188, 297], "stepwis": [234, 292], "storag": [23, 192, 284, 289, 291], "store": [23, 24, 30, 31, 32, 182, 183], "store_individu": [23, 31], "store_popul": [23, 32], "str": [1, 5, 7, 11, 12, 13, 14, 33, 35, 37, 41, 45, 52, 53, 54, 55, 59, 75, 83, 84, 90, 91, 92, 103, 120, 121, 124, 126, 128, 188, 192, 194, 223, 225, 226, 234, 235, 239, 251, 252, 254, 263, 273, 280, 281], "straight": [294, 299, 300], "stretch": 299, "stretch_i": 299, "stretch_x": 299, "strictli": 297, "string": [0, 4, 6, 10, 12, 14, 18, 38, 40, 58, 74, 83, 88, 122, 129, 171, 182, 187, 225, 234, 238, 253, 262, 272, 299], "strongli": 296, "style": 294, "subplot": [297, 298, 299], "subsequ": 296, "subset": [58, 74, 75, 200, 201, 202, 284], "success": [33, 34, 124, 125, 297, 298, 299, 300], "successfulli": [297, 298, 299, 300], "sum": [4, 10, 88, 114, 115, 118, 119, 134, 225, 234, 238, 272, 297, 298], "sum_": 297, "super": [297, 298, 299], "support": [167, 177, 182, 294, 296, 297, 298], "suppress": 224, "suppress_stdout": [224, 291], "surpress": [224, 291], "switch": [1, 5, 7, 11, 167, 168, 177, 178], "system": [294, 297], "t": [0, 58], "target": [23, 29], "task": 297, "tell": 296, "templat": [155, 167, 168, 177, 287], "term_par": [159, 165, 171, 172, 297, 298, 299], "termin": [159, 165, 171, 297, 298, 299], "test": [294, 295], "text": [297, 300], "than": 297, "thank": [294, 295], "thei": [294, 297, 299], "them": [297, 299, 300], "therefor": [297, 300], "thi": [58, 83, 85, 103, 129, 167, 171, 177, 182, 187, 294, 295, 296, 297, 298, 299, 300], "thing": 299, "third": 296, "those": [195, 201, 205, 206, 207, 208, 217, 296, 297, 299, 300], "thread": 300, "three": 0, "throw": [207, 208, 211], "thu": 295, "titl": [37, 299], "tol": [18, 19, 192, 194, 297, 298, 299, 300], "toler": [4, 10, 18, 19, 88, 98, 134, 135, 187, 188, 192, 194, 196, 197, 225, 234, 238, 272, 298, 300], "too": 299, "tool": [225, 295], "top": [282, 289], "total": [4, 10, 69, 88, 114, 115, 225, 234, 238, 272, 298], "touch": 299, "tracker": 295, "transfer": 294, "translat": [192, 211, 213], "treatment": 224, "troubl": 295, "true": [17, 26, 27, 188, 192, 195, 201, 205, 206, 207, 208, 211, 212, 216, 217, 224, 254, 263, 291, 297, 298, 299, 300], "try": 294, "tupl": [7, 23, 28, 37, 187, 258, 259, 267, 268], "two": [297, 298, 299, 300], "type": [23, 127, 128, 159, 160, 273, 294, 297, 298, 299, 300], "typic": 103, "u": 299, "uda": 129, "udp": [129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 286], "unbound": [108, 109, 112, 113, 247, 248, 249, 250, 273, 276, 277, 278, 279], "unconstrain": 300, "unconstraint": 6, "under": [295, 300], "underli": [0, 1, 6, 7, 18, 38, 40, 41, 43, 58, 59, 62, 74, 77, 122, 226, 235, 238, 239, 253, 254, 256, 262, 263, 265], "understood": 295, "unequ": 297, "uniform": [188, 297, 299], "unit": 297, "unless": 300, "until": [187, 188], "up": [295, 297], "updat": [294, 297, 299], "upper": [10, 11, 22, 260, 299, 300], "us": [41, 42, 60, 76, 108, 109, 112, 113, 194, 247, 248, 249, 250, 255, 264, 273, 276, 277, 278, 279, 294, 295, 296, 297, 298, 299, 300], "usag": [282, 292, 300], "user": [295, 300], "userdefinedproblem": [134, 286], "usual": 300, "util": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 282, 294], "uv": 299, "v": [297, 300], "v0": 295, "valid": [37, 173, 192, 216, 297, 298], "valid_dict": [171, 173], "valu": [0, 4, 5, 6, 10, 11, 18, 20, 21, 23, 26, 27, 28, 29, 31, 32, 33, 34, 36, 38, 40, 42, 43, 44, 46, 47, 52, 53, 58, 60, 62, 63, 64, 65, 70, 71, 74, 76, 77, 78, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 122, 124, 125, 134, 188, 192, 203, 204, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 253, 254, 255, 256, 257, 262, 264, 265, 266, 272, 273, 274, 275, 276, 277, 278, 279, 297, 298, 299, 300], "var": [0, 3, 6, 9, 18, 38, 40, 42, 58, 60, 74, 76, 103, 122, 192, 198, 199, 209, 210, 253, 255, 259, 262, 264, 268], "var_names_float": [0, 4, 6, 10, 18, 38, 40, 54, 58, 74, 88, 120, 122, 225, 234, 238, 251, 253, 262, 272, 280, 297, 298, 299], "var_names_int": [0, 4, 6, 10, 18, 38, 40, 55, 58, 74, 88, 121, 122, 225, 234, 238, 252, 253, 262, 272, 281, 298], "vardeps_float": [0, 6, 18, 38, 40, 56, 58, 72, 74, 81, 122, 253, 262, 297], "vardeps_int": [0, 6, 18, 38, 40, 57, 58, 73, 74, 82, 122, 253, 262], "variabl": [0, 4, 6, 10, 11, 18, 26, 27, 28, 29, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 72, 73, 74, 76, 77, 78, 81, 82, 88, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 108, 109, 112, 113, 116, 117, 120, 121, 122, 124, 125, 134, 187, 188, 198, 199, 209, 210, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 262, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 292, 297, 298, 299, 300], "varib": [259, 268], "variou": [12, 284], "varmap": [0, 6, 18, 38, 40, 52, 53, 58, 74, 122, 253, 262], "varmap_float": [4, 10, 88, 91, 92, 225, 234, 238, 272], "varmap_int": [4, 10, 88, 91, 92, 225, 234, 238, 272], "vars_float": [0, 4, 6, 10, 18, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 38, 40, 42, 43, 44, 46, 47, 58, 60, 62, 63, 64, 65, 74, 76, 77, 78, 88, 90, 93, 94, 95, 99, 100, 101, 102, 103, 122, 124, 125, 225, 227, 228, 229, 230, 231, 232, 234, 236, 238, 240, 241, 242, 243, 253, 255, 256, 257, 262, 264, 265, 266, 272, 297, 298, 299, 300], "vars_int": [0, 4, 6, 10, 18, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 38, 40, 42, 43, 44, 46, 47, 58, 60, 62, 63, 64, 65, 74, 76, 77, 78, 88, 90, 93, 94, 95, 99, 100, 101, 102, 103, 122, 124, 125, 225, 227, 228, 229, 230, 231, 232, 234, 236, 238, 240, 241, 242, 243, 253, 255, 256, 257, 262, 264, 265, 266, 272, 297, 298, 299, 300], "vast": [295, 297], "vector": [95, 103, 134, 135, 167, 168, 177, 178, 182, 187, 188, 236, 295, 297, 298, 299, 300], "vectoriz": 297, "venv": 296, "verbos": [0, 4, 6, 10, 12, 15, 16, 18, 20, 21, 38, 40, 46, 47, 48, 58, 64, 65, 67, 74, 79, 83, 85, 87, 88, 91, 92, 95, 96, 97, 101, 102, 103, 106, 122, 129, 131, 133, 134, 135, 137, 154, 159, 160, 167, 169, 171, 174, 176, 177, 179, 181, 182, 184, 186, 187, 189, 191, 225, 231, 232, 233, 234, 236, 237, 238, 242, 243, 246, 253, 262, 272, 286, 287, 297, 298, 299, 300], "version": [294, 295, 296], "via": [58, 95, 103, 236, 289, 294, 295, 297, 298, 299, 300], "viol": 300, "violat": [18, 19, 187, 294, 297, 300], "visit": [187, 188, 300], "visual": 299, "vname": 297, "vnames_float": [33, 41, 124, 297, 298, 299, 300], "vnames_int": [33, 41, 124, 298, 300], "vr": [95, 236], "w": 299, "wa": [297, 299], "wai": [187, 300], "wake": 302, "want": [297, 299, 300, 301], "we": [294, 296, 297, 298, 299, 300], "weight": [33, 36, 118, 119, 299], "well": 299, "were": 103, "when": [295, 297, 299, 300], "whenev": [295, 297], "where": 297, "wherea": 297, "which": [95, 103, 173, 198, 199, 209, 210, 236, 272, 292, 297, 299, 300], "while": 296, "whole": [4, 10, 88, 94, 225, 228, 234, 238, 241, 272], "whose": 299, "wind": [293, 295], "within": [192, 212, 259, 268, 296, 297, 298, 299], "without": [187, 188, 192, 291, 296], "work": [294, 296, 297, 300], "world": 295, "worth": 294, "would": [297, 299], "wrap": 300, "wrapper": [0, 4, 6, 10, 167, 177, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 287, 294, 295, 300], "write": 29, "wrt": [95, 103, 167, 168, 177, 178, 198, 199, 209, 210, 236], "x": [0, 2, 3, 6, 8, 9, 37, 134, 146, 187, 214, 215, 253, 258, 259, 262, 267, 268, 294, 297, 298, 299, 300], "x0": [297, 298], "x1": 297, "x10": 297, "x11": 297, "x12": 297, "x13": 297, "x14": 297, "x15": 297, "x16": 297, "x17": 297, "x18": 297, "x19": 297, "x2": 297, "x20": 297, "x21": 297, "x22": 297, "x23": 297, "x24": 297, "x25": 297, "x26": 297, "x27": 297, "x28": 297, "x29": 297, "x3": 297, "x30": 297, "x31": 297, "x32": 297, "x33": 297, "x34": 297, "x35": 297, "x36": 297, "x37": 297, "x38": 297, "x39": 297, "x4": 297, "x40": 297, "x41": 297, "x42": 297, "x43": 297, "x44": 297, "x45": 297, "x46": 297, "x47": 297, "x48": 297, "x49": 297, "x5": 297, "x6": 297, "x7": 297, "x8": 297, "x9": 297, "x_": 297, "x_0": 297, "x_i": 297, "xtol": [297, 299], "xy": [297, 298, 299], "xy0": 299, "xy_del": 299, "xy_imax": 299, "xy_imin": 299, "xy_init": 297, "xy_max": 299, "xy_min": 299, "y": [0, 2, 3, 6, 8, 9, 37, 294, 297, 298, 299, 300], "y0": [297, 298], "y1": 297, "y10": 297, "y11": 297, "y12": 297, "y13": 297, "y14": 297, "y15": 297, "y16": 297, "y17": 297, "y18": 297, "y19": 297, "y2": 297, "y20": 297, "y21": 297, "y22": 297, "y23": 297, "y24": 297, "y25": 297, "y26": 297, "y27": 297, "y28": 297, "y29": 297, "y3": 297, "y30": 297, "y31": 297, "y32": 297, "y33": 297, "y34": 297, "y35": 297, "y36": 297, "y37": 297, "y38": 297, "y39": 297, "y4": 297, "y40": 297, "y41": 297, "y42": 297, "y43": 297, "y44": 297, "y45": 297, "y46": 297, "y47": 297, "y48": 297, "y49": 297, "y5": 297, "y6": 297, "y7": 297, "y8": 297, "y9": 297, "y_": 297, "y_0": 297, "y_i": 297, "yet": 295, "you": [293, 296, 300, 301], "your": [295, 296], "zero": [297, 298, 299], "zeros_lik": 298}, "titles": ["iwopy.benchmarks.branin.BraninObjective", "iwopy.benchmarks.branin.BraninObjective.__init__", "iwopy.benchmarks.branin.BraninObjective.f", "iwopy.benchmarks.branin.BraninObjective.g", "iwopy.benchmarks.branin.BraninProblem", "iwopy.benchmarks.branin.BraninProblem.__init__", "iwopy.benchmarks.rosenbrock.RosenbrockObjective", "iwopy.benchmarks.rosenbrock.RosenbrockObjective.__init__", "iwopy.benchmarks.rosenbrock.RosenbrockObjective.f", "iwopy.benchmarks.rosenbrock.RosenbrockObjective.g", "iwopy.benchmarks.rosenbrock.RosenbrockProblem", "iwopy.benchmarks.rosenbrock.RosenbrockProblem.__init__", "iwopy.core.Base", "iwopy.core.Base.__init__", "iwopy.core.Base.__str__", "iwopy.core.Base.finalize", "iwopy.core.Base.initialize", "iwopy.core.Base.initialized", "iwopy.core.Constraint", "iwopy.core.Constraint.__init__", "iwopy.core.Constraint.check_individual", "iwopy.core.Constraint.check_population", "iwopy.core.Constraint.get_bounds", "iwopy.core.Memory", "iwopy.core.Memory.__init__", "iwopy.core.Memory.clear", "iwopy.core.Memory.found_individual", "iwopy.core.Memory.found_population", "iwopy.core.Memory.lookup_individual", "iwopy.core.Memory.lookup_population", "iwopy.core.Memory.size", "iwopy.core.Memory.store_individual", "iwopy.core.Memory.store_population", "iwopy.core.MultiObjOptResults", "iwopy.core.MultiObjOptResults.__init__", "iwopy.core.MultiObjOptResults.__str__", "iwopy.core.MultiObjOptResults.find_pareto_objmix", "iwopy.core.MultiObjOptResults.plot_pareto", "iwopy.core.Objective", "iwopy.core.Objective.maximize", "iwopy.core.OptFunction", "iwopy.core.OptFunction.__init__", "iwopy.core.OptFunction.ana_deriv", "iwopy.core.OptFunction.calc_individual", "iwopy.core.OptFunction.calc_population", "iwopy.core.OptFunction.component_names", "iwopy.core.OptFunction.finalize_individual", "iwopy.core.OptFunction.finalize_population", "iwopy.core.OptFunction.initialize", "iwopy.core.OptFunction.n_components", "iwopy.core.OptFunction.n_vars_float", "iwopy.core.OptFunction.n_vars_int", "iwopy.core.OptFunction.rename_vars_float", "iwopy.core.OptFunction.rename_vars_int", "iwopy.core.OptFunction.var_names_float", "iwopy.core.OptFunction.var_names_int", "iwopy.core.OptFunction.vardeps_float", "iwopy.core.OptFunction.vardeps_int", "iwopy.core.OptFunctionList", "iwopy.core.OptFunctionList.__init__", "iwopy.core.OptFunctionList.ana_deriv", "iwopy.core.OptFunctionList.append", "iwopy.core.OptFunctionList.calc_individual", "iwopy.core.OptFunctionList.calc_population", "iwopy.core.OptFunctionList.finalize_individual", "iwopy.core.OptFunctionList.finalize_population", "iwopy.core.OptFunctionList.functions", "iwopy.core.OptFunctionList.initialize", "iwopy.core.OptFunctionList.n_components", "iwopy.core.OptFunctionList.n_functions", "iwopy.core.OptFunctionList.split_individual", "iwopy.core.OptFunctionList.split_population", "iwopy.core.OptFunctionList.vardeps_float", "iwopy.core.OptFunctionList.vardeps_int", "iwopy.core.OptFunctionSubset", "iwopy.core.OptFunctionSubset.__init__", "iwopy.core.OptFunctionSubset.ana_deriv", "iwopy.core.OptFunctionSubset.calc_individual", "iwopy.core.OptFunctionSubset.calc_population", "iwopy.core.OptFunctionSubset.initialize", "iwopy.core.OptFunctionSubset.n_components", "iwopy.core.OptFunctionSubset.vardeps_float", "iwopy.core.OptFunctionSubset.vardeps_int", "iwopy.core.Optimizer", "iwopy.core.Optimizer.__init__", "iwopy.core.Optimizer.finalize", "iwopy.core.Optimizer.print_info", "iwopy.core.Optimizer.solve", "iwopy.core.Problem", "iwopy.core.Problem.INT_INF", "iwopy.core.Problem.__init__", "iwopy.core.Problem.add_constraint", "iwopy.core.Problem.add_objective", "iwopy.core.Problem.apply_individual", "iwopy.core.Problem.apply_population", "iwopy.core.Problem.calc_gradients", "iwopy.core.Problem.check_constraints_individual", "iwopy.core.Problem.check_constraints_population", "iwopy.core.Problem.constraints_tol", "iwopy.core.Problem.evaluate_individual", "iwopy.core.Problem.evaluate_population", "iwopy.core.Problem.finalize_individual", "iwopy.core.Problem.finalize_population", "iwopy.core.Problem.get_gradients", "iwopy.core.Problem.initial_values_float", "iwopy.core.Problem.initial_values_int", "iwopy.core.Problem.initialize", "iwopy.core.Problem.max_values_constraints", "iwopy.core.Problem.max_values_float", "iwopy.core.Problem.max_values_int", "iwopy.core.Problem.maximize_objs", "iwopy.core.Problem.min_values_constraints", "iwopy.core.Problem.min_values_float", "iwopy.core.Problem.min_values_int", "iwopy.core.Problem.n_constraints", "iwopy.core.Problem.n_objectives", "iwopy.core.Problem.n_vars_float", "iwopy.core.Problem.n_vars_int", "iwopy.core.Problem.prob_res_einsum_individual", "iwopy.core.Problem.prob_res_einsum_population", "iwopy.core.Problem.var_names_float", "iwopy.core.Problem.var_names_int", "iwopy.core.ProblemDefaultFunc", "iwopy.core.ProblemDefaultFunc.__init__", "iwopy.core.SingleObjOptResults", "iwopy.core.SingleObjOptResults.__init__", "iwopy.core.SingleObjOptResults.__str__", "iwopy.interfaces.pygmo.AlgoFactory", "iwopy.interfaces.pygmo.AlgoFactory.new", "iwopy.interfaces.pygmo.Optimizer_pygmo", "iwopy.interfaces.pygmo.Optimizer_pygmo.__init__", "iwopy.interfaces.pygmo.Optimizer_pygmo.initialize", "iwopy.interfaces.pygmo.Optimizer_pygmo.print_info", "iwopy.interfaces.pygmo.Optimizer_pygmo.solve", "iwopy.interfaces.pygmo.UDP", "iwopy.interfaces.pygmo.UDP.__init__", "iwopy.interfaces.pygmo.UDP.batch_fitness", "iwopy.interfaces.pygmo.UDP.finalize", "iwopy.interfaces.pygmo.UDP.fitness", "iwopy.interfaces.pygmo.UDP.get_bounds", "iwopy.interfaces.pygmo.UDP.get_extra_info", "iwopy.interfaces.pygmo.UDP.get_name", "iwopy.interfaces.pygmo.UDP.get_nec", "iwopy.interfaces.pygmo.UDP.get_nic", "iwopy.interfaces.pygmo.UDP.get_nix", "iwopy.interfaces.pygmo.UDP.get_nobj", "iwopy.interfaces.pygmo.UDP.gradient", "iwopy.interfaces.pygmo.UDP.gradient_sparsity", "iwopy.interfaces.pygmo.UDP.has_batch_fitness", "iwopy.interfaces.pygmo.UDP.has_gradient", "iwopy.interfaces.pygmo.UDP.has_gradient_sparsity", "iwopy.interfaces.pygmo.UDP.has_hessians", "iwopy.interfaces.pygmo.UDP.has_hessians_sparsity", "iwopy.interfaces.pygmo.UDP.has_set_seed", "iwopy.interfaces.pygmo.load", "iwopy.interfaces.pymoo.DefaultCallbackTemplate", "iwopy.interfaces.pymoo.DefaultCallbackTemplate.__init__", "iwopy.interfaces.pymoo.DefaultCallbackTemplate.get_class", "iwopy.interfaces.pymoo.DefaultCallbackTemplate.notify", "iwopy.interfaces.pymoo.Factory", "iwopy.interfaces.pymoo.Factory.__init__", "iwopy.interfaces.pymoo.Factory.get_algorithm", "iwopy.interfaces.pymoo.Factory.get_crossover", "iwopy.interfaces.pymoo.Factory.get_mutation", "iwopy.interfaces.pymoo.Factory.get_sampling", "iwopy.interfaces.pymoo.Factory.get_termination", "iwopy.interfaces.pymoo.Factory.print", "iwopy.interfaces.pymoo.MultiObjProblemTemplate", "iwopy.interfaces.pymoo.MultiObjProblemTemplate.__init__", "iwopy.interfaces.pymoo.MultiObjProblemTemplate.finalize", "iwopy.interfaces.pymoo.MultiObjProblemTemplate.get_class", "iwopy.interfaces.pymoo.Optimizer_pymoo", "iwopy.interfaces.pymoo.Optimizer_pymoo.__init__", "iwopy.interfaces.pymoo.Optimizer_pymoo.get_figure_f", "iwopy.interfaces.pymoo.Optimizer_pymoo.initialize", "iwopy.interfaces.pymoo.Optimizer_pymoo.print_info", "iwopy.interfaces.pymoo.Optimizer_pymoo.solve", "iwopy.interfaces.pymoo.SingleObjProblemTemplate", "iwopy.interfaces.pymoo.SingleObjProblemTemplate.__init__", "iwopy.interfaces.pymoo.SingleObjProblemTemplate.finalize", "iwopy.interfaces.pymoo.SingleObjProblemTemplate.get_class", "iwopy.interfaces.pymoo.load", "iwopy.interfaces.scipy.Optimizer_scipy", "iwopy.interfaces.scipy.Optimizer_scipy.__init__", "iwopy.interfaces.scipy.Optimizer_scipy.initialize", "iwopy.interfaces.scipy.Optimizer_scipy.print_info", "iwopy.interfaces.scipy.Optimizer_scipy.solve", "iwopy.optimizers.GG", "iwopy.optimizers.GG.__init__", "iwopy.optimizers.GG.initialize", "iwopy.optimizers.GG.print_info", "iwopy.optimizers.GG.solve", "iwopy.utils.RegularDiscretizationGrid", "iwopy.utils.RegularDiscretizationGrid.INT_INF", "iwopy.utils.RegularDiscretizationGrid.__init__", "iwopy.utils.RegularDiscretizationGrid.all_gridpoints", "iwopy.utils.RegularDiscretizationGrid.apply_tol", "iwopy.utils.RegularDiscretizationGrid.apply_tols", "iwopy.utils.RegularDiscretizationGrid.deriv_coeffs", "iwopy.utils.RegularDiscretizationGrid.deriv_coeffs_gridpoints", "iwopy.utils.RegularDiscretizationGrid.find_grid_inds", "iwopy.utils.RegularDiscretizationGrid.find_gridpoints", "iwopy.utils.RegularDiscretizationGrid.find_ingrid", "iwopy.utils.RegularDiscretizationGrid.get_cell", "iwopy.utils.RegularDiscretizationGrid.get_cells", "iwopy.utils.RegularDiscretizationGrid.get_corner", "iwopy.utils.RegularDiscretizationGrid.get_corners", "iwopy.utils.RegularDiscretizationGrid.gp2i", "iwopy.utils.RegularDiscretizationGrid.gpts2inds", "iwopy.utils.RegularDiscretizationGrid.grad_coeffs", "iwopy.utils.RegularDiscretizationGrid.grad_coeffs_gridpoints", "iwopy.utils.RegularDiscretizationGrid.i2gp", "iwopy.utils.RegularDiscretizationGrid.in_grid", "iwopy.utils.RegularDiscretizationGrid.inds2gpts", "iwopy.utils.RegularDiscretizationGrid.interpolation_coeffs_point", "iwopy.utils.RegularDiscretizationGrid.interpolation_coeffs_points", "iwopy.utils.RegularDiscretizationGrid.is_gridi", "iwopy.utils.RegularDiscretizationGrid.is_gridpoint", "iwopy.utils.RegularDiscretizationGrid.n_dims", "iwopy.utils.RegularDiscretizationGrid.n_points", "iwopy.utils.RegularDiscretizationGrid.p_max", "iwopy.utils.RegularDiscretizationGrid.p_min", "iwopy.utils.RegularDiscretizationGrid.print_info", "iwopy.utils.import_module", "iwopy.utils.suppress_stdout", "iwopy.wrappers.DiscretizeRegGrid", "iwopy.wrappers.DiscretizeRegGrid.__init__", "iwopy.wrappers.DiscretizeRegGrid.apply_individual", "iwopy.wrappers.DiscretizeRegGrid.apply_population", "iwopy.wrappers.DiscretizeRegGrid.evaluate_individual", "iwopy.wrappers.DiscretizeRegGrid.evaluate_population", "iwopy.wrappers.DiscretizeRegGrid.finalize_individual", "iwopy.wrappers.DiscretizeRegGrid.finalize_population", "iwopy.wrappers.DiscretizeRegGrid.initialize", "iwopy.wrappers.LocalFD", "iwopy.wrappers.LocalFD.__init__", "iwopy.wrappers.LocalFD.calc_gradients", "iwopy.wrappers.LocalFD.initialize", "iwopy.wrappers.ProblemWrapper", "iwopy.wrappers.ProblemWrapper.__init__", "iwopy.wrappers.ProblemWrapper.apply_individual", "iwopy.wrappers.ProblemWrapper.apply_population", "iwopy.wrappers.ProblemWrapper.finalize_individual", "iwopy.wrappers.ProblemWrapper.finalize_population", "iwopy.wrappers.ProblemWrapper.initial_values_float", "iwopy.wrappers.ProblemWrapper.initial_values_int", "iwopy.wrappers.ProblemWrapper.initialize", "iwopy.wrappers.ProblemWrapper.max_values_float", "iwopy.wrappers.ProblemWrapper.max_values_int", "iwopy.wrappers.ProblemWrapper.min_values_float", "iwopy.wrappers.ProblemWrapper.min_values_int", "iwopy.wrappers.ProblemWrapper.var_names_float", "iwopy.wrappers.ProblemWrapper.var_names_int", "iwopy.wrappers.SimpleConstraint", "iwopy.wrappers.SimpleConstraint.__init__", "iwopy.wrappers.SimpleConstraint.ana_deriv", "iwopy.wrappers.SimpleConstraint.calc_individual", "iwopy.wrappers.SimpleConstraint.calc_population", "iwopy.wrappers.SimpleConstraint.f", "iwopy.wrappers.SimpleConstraint.g", "iwopy.wrappers.SimpleConstraint.get_bounds", "iwopy.wrappers.SimpleConstraint.n_components", "iwopy.wrappers.SimpleObjective", "iwopy.wrappers.SimpleObjective.__init__", "iwopy.wrappers.SimpleObjective.ana_deriv", "iwopy.wrappers.SimpleObjective.calc_individual", "iwopy.wrappers.SimpleObjective.calc_population", "iwopy.wrappers.SimpleObjective.f", "iwopy.wrappers.SimpleObjective.g", "iwopy.wrappers.SimpleObjective.has_ana_derivs", "iwopy.wrappers.SimpleObjective.maximize", "iwopy.wrappers.SimpleObjective.n_components", "iwopy.wrappers.SimpleProblem", "iwopy.wrappers.SimpleProblem.__init__", "iwopy.wrappers.SimpleProblem.initial_values_float", "iwopy.wrappers.SimpleProblem.initial_values_int", "iwopy.wrappers.SimpleProblem.max_values_float", "iwopy.wrappers.SimpleProblem.max_values_int", "iwopy.wrappers.SimpleProblem.min_values_float", "iwopy.wrappers.SimpleProblem.min_values_int", "iwopy.wrappers.SimpleProblem.var_names_float", "iwopy.wrappers.SimpleProblem.var_names_int", "API", "iwopy.benchmarks", "iwopy.core", "iwopy.interfaces", "iwopy.interfaces.pygmo", "iwopy.interfaces.pymoo", "iwopy.interfaces.scipy", "iwopy", "iwopy.optimizers", "iwopy.utils", "iwopy.wrappers", "Examples", "History", "Welcome to IWOPY", "Installation", "Electrostatic potential minimization", "Mixed problems", "Multi objective geometric chain", "Simple function minimization", "Testing", "Wind farm layout optimization"], "titleterms": {"0": 294, "1": 294, "11": 294, "12": 294, "13": 294, "14": 294, "15": 294, "2": 294, "3": 294, "4": 294, "5": 294, "6": 294, "7": 294, "8": 294, "9": 294, "alpha": 294, "api": 282, "attribut": [4, 10, 12, 18, 23, 33, 40, 58, 74, 83, 88, 124, 129, 134, 167, 171, 177, 182, 187, 192, 225, 234, 238], "benchmark": 283, "beta": 294, "branin": 283, "chain": 299, "conda": 296, "content": 295, "contribut": 295, "core": 284, "develop": 296, "electrostat": 297, "environ": 296, "exampl": [214, 215, 224, 293], "farm": 302, "function": 300, "geometr": 299, "histori": 294, "instal": 296, "interfac": [285, 286, 287, 288], "iwopi": [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295], "layout": 302, "member": [0, 4, 6, 10, 12, 18, 23, 33, 38, 40, 58, 74, 83, 88, 122, 124, 127, 129, 134, 155, 159, 167, 171, 177, 182, 187, 192, 225, 234, 238, 253, 262, 272], "minim": [297, 300], "mix": 298, "multi": 299, "object": 299, "optim": [290, 302], "option": 296, "paramet": [1, 5, 7, 11, 13, 15, 16, 19, 20, 21, 24, 26, 27, 28, 29, 31, 32, 34, 37, 41, 42, 43, 44, 46, 47, 48, 52, 53, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 75, 76, 77, 78, 79, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 106, 118, 119, 123, 125, 128, 130, 131, 133, 135, 137, 154, 168, 169, 172, 173, 174, 176, 178, 179, 181, 183, 184, 186, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 246, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 273], "paramt": 36, "pip": 296, "potenti": 297, "prepar": 296, "problem": 298, "public": [0, 4, 6, 10, 12, 18, 23, 33, 38, 40, 58, 74, 83, 88, 122, 124, 127, 129, 134, 155, 159, 167, 171, 177, 182, 187, 192, 225, 234, 238, 253, 262, 272], "pygmo": 286, "pymoo": 287, "python": 296, "requir": 296, "return": [14, 17, 21, 22, 26, 27, 28, 29, 30, 36, 37, 39, 42, 43, 44, 45, 46, 47, 49, 50, 51, 54, 55, 56, 57, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 76, 77, 78, 80, 81, 82, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 128, 133, 137, 169, 173, 176, 179, 186, 191, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 236, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281], "rosenbrock": 283, "scipi": 288, "simpl": 300, "standard": 296, "support": 295, "test": 301, "user": 296, "util": 291, "v0": 294, "via": 296, "virtual": 296, "welcom": 295, "wind": 302, "wrapper": 292}})