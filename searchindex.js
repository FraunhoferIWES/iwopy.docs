Search.setIndex({"alltitles": {"API": [[283, null]], "Attributes": [[5, null], [11, null], [13, null], [19, null], [24, null], [34, null], [41, null], [59, null], [75, null], [84, null], [89, null], [125, null], [130, null], [135, null], [168, null], [172, null], [178, null], [183, null], [188, null], [193, null], [226, null], [235, null], [239, null]], "Citation": [[294, null]], "Contents": [[296, "contents"]], "Contributing": [[296, "contributing"]], "Developers": [[297, "developers"], [297, "id2"]], "Electrostatic potential minimization": [[298, null]], "Example": [[215, null], [216, null], [225, null]], "Examples": [[295, null]], "History": [[0, null]], "Installation": [[297, null]], "Installation via conda": [[297, "installation-via-conda"]], "Installation via pip": [[297, "installation-via-pip"]], "Journal paper": [[294, "journal-paper"]], "Mixed problems": [[299, null]], "Multi objective geometric chain": [[300, null]], "Parameters": [[2, null], [6, null], [8, null], [12, null], [14, null], [16, null], [17, null], [20, null], [21, null], [22, null], [25, null], [27, null], [28, null], [29, null], [30, null], [32, null], [33, null], [35, null], [38, null], [42, null], [43, null], [44, null], [45, null], [47, null], [48, null], [49, null], [53, null], [54, null], [60, null], [61, null], [62, null], [63, null], [64, null], [65, null], [66, null], [68, null], [71, null], [72, null], [76, null], [77, null], [78, null], [79, null], [80, null], [85, null], [86, null], [88, null], [91, null], [92, null], [93, null], [94, null], [95, null], [96, null], [97, null], [98, null], [100, null], [101, null], [102, null], [103, null], [104, null], [107, null], [119, null], [120, null], [124, null], [126, null], [129, null], [131, null], [132, null], [134, null], [136, null], [138, null], [155, null], [169, null], [170, null], [173, null], [174, null], [175, null], [177, null], [179, null], [180, null], [182, null], [184, null], [185, null], [187, null], [189, null], [190, null], [192, null], [195, null], [196, null], [197, null], [198, null], [199, null], [200, null], [201, null], [202, null], [203, null], [204, null], [205, null], [206, null], [207, null], [208, null], [209, null], [210, null], [211, null], [212, null], [213, null], [214, null], [215, "parameters"], [216, "parameters"], [217, null], [218, null], [223, null], [224, null], [225, "parameters"], [227, null], [228, null], [229, null], [230, null], [231, null], [232, null], [233, null], [234, null], [236, null], [237, null], [238, null], [240, null], [241, null], [242, null], [243, null], [244, null], [247, null], [255, null], [256, null], [257, null], [258, null], [259, null], [260, null], [264, null], [265, null], [266, null], [267, null], [268, null], [269, null], [274, null]], "Paramters": [[37, null]], "Preparation (optional)": [[297, "preparation-optional"]], "Public members": [[1, null], [5, "public-members"], [7, null], [11, "public-members"], [13, "public-members"], [19, "public-members"], [24, "public-members"], [34, "public-members"], [39, null], [41, "public-members"], [59, "public-members"], [75, "public-members"], [84, "public-members"], [89, "public-members"], [123, null], [125, "public-members"], [128, null], [130, "public-members"], [135, "public-members"], [156, null], [160, null], [168, "public-members"], [172, "public-members"], [178, "public-members"], [183, "public-members"], [188, "public-members"], [193, "public-members"], [226, "public-members"], [235, "public-members"], [239, "public-members"], [254, null], [263, null], [273, null]], "Requirements": [[297, "requirements"]], "Returns": [[15, null], [18, null], [22, "returns"], [23, null], [27, "returns"], [28, "returns"], [29, "returns"], [30, "returns"], [31, null], [37, "returns"], [38, "returns"], [40, null], [43, "returns"], [44, "returns"], [45, "returns"], [46, null], [47, "returns"], [48, "returns"], [50, null], [51, null], [52, null], [55, null], [56, null], [57, null], [58, null], [61, "returns"], [63, "returns"], [64, "returns"], [65, "returns"], [66, "returns"], [67, null], [69, null], [70, null], [71, "returns"], [72, "returns"], [73, null], [74, null], [77, "returns"], [78, "returns"], [79, "returns"], [81, null], [82, null], [83, null], [88, "returns"], [94, "returns"], [95, "returns"], [96, "returns"], [97, "returns"], [98, "returns"], [99, null], [100, "returns"], [101, "returns"], [102, "returns"], [103, "returns"], [104, "returns"], [105, null], [106, null], [108, null], [109, null], [110, null], [111, null], [112, null], [113, null], [114, null], [115, null], [116, null], [117, null], [118, null], [119, "returns"], [120, "returns"], [121, null], [122, null], [129, "returns"], [134, "returns"], [138, "returns"], [170, "returns"], [174, "returns"], [177, "returns"], [180, "returns"], [187, "returns"], [192, "returns"], [196, "returns"], [197, "returns"], [198, "returns"], [199, "returns"], [200, "returns"], [201, "returns"], [202, "returns"], [203, "returns"], [204, "returns"], [205, "returns"], [206, "returns"], [207, "returns"], [208, "returns"], [209, "returns"], [210, "returns"], [211, "returns"], [212, "returns"], [213, "returns"], [214, "returns"], [215, "returns"], [216, "returns"], [217, "returns"], [218, "returns"], [219, null], [220, null], [221, null], [222, null], [224, "returns"], [228, "returns"], [229, "returns"], [230, "returns"], [231, "returns"], [232, "returns"], [233, "returns"], [237, "returns"], [241, "returns"], [242, "returns"], [243, "returns"], [244, "returns"], [245, null], [246, null], [248, null], [249, null], [250, null], [251, null], [252, null], [253, null], [256, "returns"], [257, "returns"], [258, "returns"], [259, "returns"], [260, "returns"], [261, null], [262, null], [265, "returns"], [266, "returns"], [267, "returns"], [268, "returns"], [269, "returns"], [270, null], [271, null], [272, null], [275, null], [276, null], [277, null], [278, null], [279, null], [280, null], [281, null], [282, null]], "Simple function minimization": [[301, null]], "Standard users": [[297, "standard-users"], [297, "id1"]], "Support": [[296, "support"]], "Testing": [[302, null]], "Virtual Python environment": [[297, "virtual-python-environment"]], "Welcome to IWOPY": [[296, null]], "Wind farm layout optimization": [[303, null]], "iwopy": [[290, null]], "iwopy.benchmarks": [[284, null]], "iwopy.benchmarks.branin": [[284, "iwopy-benchmarks-branin"]], "iwopy.benchmarks.rosenbrock": [[284, "iwopy-benchmarks-rosenbrock"]], "iwopy.core": [[285, null]], "iwopy.interfaces": [[286, null]], "iwopy.interfaces.pygmo": [[287, null]], "iwopy.interfaces.pymoo": [[288, null]], "iwopy.interfaces.scipy": [[289, null]], "iwopy.optimizers": [[291, null]], "iwopy.utils": [[292, null]], "iwopy.wrappers": [[293, null]], "v0.0.11-alpha": [[0, "v0-0-11-alpha"]], "v0.0.12-alpha": [[0, "v0-0-12-alpha"]], "v0.0.13-alpha": [[0, "v0-0-13-alpha"]], "v0.0.14-alpha": [[0, "v0-0-14-alpha"]], "v0.0.15-alpha": [[0, "v0-0-15-alpha"]], "v0.1.0-alpha": [[0, "v0-1-0-alpha"]], "v0.1.1-alpha": [[0, "v0-1-1-alpha"]], "v0.1.2-alpha": [[0, "v0-1-2-alpha"]], "v0.1.3-alpha": [[0, "v0-1-3-alpha"]], "v0.1.4-alpha": [[0, "v0-1-4-alpha"]], "v0.1.5-alpha": [[0, "v0-1-5-alpha"]], "v0.1.6-alpha": [[0, "v0-1-6-alpha"]], "v0.1.7-beta": [[0, "v0-1-7-beta"]], "v0.1.8-beta": [[0, "v0-1-8-beta"]], "v0.1.9-beta": [[0, "v0-1-9-beta"]], "v0.2-beta": [[0, "v0-2-beta"]], "v0.2.1": [[0, "v0-2-1"]], "v0.2.2": [[0, "v0-2-2"]], "v0.2.3": [[0, "v0-2-3"]], "v0.3": [[0, "v0-3"]], "v0.3.1": [[0, "v0-3-1"]]}, "docurls": ["CHANGELOG.html", "_iwopy/benchmarks/branin/BraninObjective.html", "_iwopy/benchmarks/branin/BraninObjective.__init__.html", "_iwopy/benchmarks/branin/BraninObjective.f.html", "_iwopy/benchmarks/branin/BraninObjective.g.html", "_iwopy/benchmarks/branin/BraninProblem.html", "_iwopy/benchmarks/branin/BraninProblem.__init__.html", "_iwopy/benchmarks/rosenbrock/RosenbrockObjective.html", "_iwopy/benchmarks/rosenbrock/RosenbrockObjective.__init__.html", "_iwopy/benchmarks/rosenbrock/RosenbrockObjective.f.html", "_iwopy/benchmarks/rosenbrock/RosenbrockObjective.g.html", "_iwopy/benchmarks/rosenbrock/RosenbrockProblem.html", "_iwopy/benchmarks/rosenbrock/RosenbrockProblem.__init__.html", "_iwopy/core/Base.html", "_iwopy/core/Base.__init__.html", "_iwopy/core/Base.__str__.html", "_iwopy/core/Base.finalize.html", "_iwopy/core/Base.initialize.html", "_iwopy/core/Base.initialized.html", "_iwopy/core/Constraint.html", "_iwopy/core/Constraint.__init__.html", "_iwopy/core/Constraint.check_individual.html", "_iwopy/core/Constraint.check_population.html", "_iwopy/core/Constraint.get_bounds.html", "_iwopy/core/Memory.html", "_iwopy/core/Memory.__init__.html", "_iwopy/core/Memory.clear.html", "_iwopy/core/Memory.found_individual.html", "_iwopy/core/Memory.found_population.html", "_iwopy/core/Memory.lookup_individual.html", "_iwopy/core/Memory.lookup_population.html", "_iwopy/core/Memory.size.html", "_iwopy/core/Memory.store_individual.html", "_iwopy/core/Memory.store_population.html", "_iwopy/core/MultiObjOptResults.html", "_iwopy/core/MultiObjOptResults.__init__.html", "_iwopy/core/MultiObjOptResults.__str__.html", "_iwopy/core/MultiObjOptResults.find_pareto_objmix.html", "_iwopy/core/MultiObjOptResults.plot_pareto.html", "_iwopy/core/Objective.html", "_iwopy/core/Objective.maximize.html", "_iwopy/core/OptFunction.html", "_iwopy/core/OptFunction.__init__.html", "_iwopy/core/OptFunction.ana_deriv.html", "_iwopy/core/OptFunction.calc_individual.html", "_iwopy/core/OptFunction.calc_population.html", "_iwopy/core/OptFunction.component_names.html", "_iwopy/core/OptFunction.finalize_individual.html", "_iwopy/core/OptFunction.finalize_population.html", "_iwopy/core/OptFunction.initialize.html", "_iwopy/core/OptFunction.n_components.html", "_iwopy/core/OptFunction.n_vars_float.html", "_iwopy/core/OptFunction.n_vars_int.html", "_iwopy/core/OptFunction.rename_vars_float.html", "_iwopy/core/OptFunction.rename_vars_int.html", "_iwopy/core/OptFunction.var_names_float.html", "_iwopy/core/OptFunction.var_names_int.html", "_iwopy/core/OptFunction.vardeps_float.html", "_iwopy/core/OptFunction.vardeps_int.html", "_iwopy/core/OptFunctionList.html", "_iwopy/core/OptFunctionList.__init__.html", "_iwopy/core/OptFunctionList.ana_deriv.html", "_iwopy/core/OptFunctionList.append.html", "_iwopy/core/OptFunctionList.calc_individual.html", "_iwopy/core/OptFunctionList.calc_population.html", "_iwopy/core/OptFunctionList.finalize_individual.html", "_iwopy/core/OptFunctionList.finalize_population.html", "_iwopy/core/OptFunctionList.functions.html", "_iwopy/core/OptFunctionList.initialize.html", "_iwopy/core/OptFunctionList.n_components.html", "_iwopy/core/OptFunctionList.n_functions.html", "_iwopy/core/OptFunctionList.split_individual.html", "_iwopy/core/OptFunctionList.split_population.html", "_iwopy/core/OptFunctionList.vardeps_float.html", "_iwopy/core/OptFunctionList.vardeps_int.html", "_iwopy/core/OptFunctionSubset.html", "_iwopy/core/OptFunctionSubset.__init__.html", "_iwopy/core/OptFunctionSubset.ana_deriv.html", "_iwopy/core/OptFunctionSubset.calc_individual.html", "_iwopy/core/OptFunctionSubset.calc_population.html", "_iwopy/core/OptFunctionSubset.initialize.html", "_iwopy/core/OptFunctionSubset.n_components.html", "_iwopy/core/OptFunctionSubset.vardeps_float.html", "_iwopy/core/OptFunctionSubset.vardeps_int.html", "_iwopy/core/Optimizer.html", "_iwopy/core/Optimizer.__init__.html", "_iwopy/core/Optimizer.finalize.html", "_iwopy/core/Optimizer.print_info.html", "_iwopy/core/Optimizer.solve.html", "_iwopy/core/Problem.html", "_iwopy/core/Problem.INT_INF.html", "_iwopy/core/Problem.__init__.html", "_iwopy/core/Problem.add_constraint.html", "_iwopy/core/Problem.add_objective.html", "_iwopy/core/Problem.apply_individual.html", "_iwopy/core/Problem.apply_population.html", "_iwopy/core/Problem.calc_gradients.html", "_iwopy/core/Problem.check_constraints_individual.html", "_iwopy/core/Problem.check_constraints_population.html", "_iwopy/core/Problem.constraints_tol.html", "_iwopy/core/Problem.evaluate_individual.html", "_iwopy/core/Problem.evaluate_population.html", "_iwopy/core/Problem.finalize_individual.html", "_iwopy/core/Problem.finalize_population.html", "_iwopy/core/Problem.get_gradients.html", "_iwopy/core/Problem.initial_values_float.html", "_iwopy/core/Problem.initial_values_int.html", "_iwopy/core/Problem.initialize.html", "_iwopy/core/Problem.max_values_constraints.html", "_iwopy/core/Problem.max_values_float.html", "_iwopy/core/Problem.max_values_int.html", "_iwopy/core/Problem.maximize_objs.html", "_iwopy/core/Problem.min_values_constraints.html", "_iwopy/core/Problem.min_values_float.html", "_iwopy/core/Problem.min_values_int.html", "_iwopy/core/Problem.n_constraints.html", "_iwopy/core/Problem.n_objectives.html", "_iwopy/core/Problem.n_vars_float.html", "_iwopy/core/Problem.n_vars_int.html", "_iwopy/core/Problem.prob_res_einsum_individual.html", "_iwopy/core/Problem.prob_res_einsum_population.html", "_iwopy/core/Problem.var_names_float.html", "_iwopy/core/Problem.var_names_int.html", "_iwopy/core/ProblemDefaultFunc.html", "_iwopy/core/ProblemDefaultFunc.__init__.html", "_iwopy/core/SingleObjOptResults.html", "_iwopy/core/SingleObjOptResults.__init__.html", "_iwopy/core/SingleObjOptResults.__str__.html", "_iwopy/interfaces/pygmo/AlgoFactory.html", "_iwopy/interfaces/pygmo/AlgoFactory.new.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.__init__.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.initialize.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.print_info.html", "_iwopy/interfaces/pygmo/Optimizer_pygmo.solve.html", "_iwopy/interfaces/pygmo/UDP.html", "_iwopy/interfaces/pygmo/UDP.__init__.html", "_iwopy/interfaces/pygmo/UDP.batch_fitness.html", "_iwopy/interfaces/pygmo/UDP.finalize.html", "_iwopy/interfaces/pygmo/UDP.fitness.html", "_iwopy/interfaces/pygmo/UDP.get_bounds.html", "_iwopy/interfaces/pygmo/UDP.get_extra_info.html", "_iwopy/interfaces/pygmo/UDP.get_name.html", "_iwopy/interfaces/pygmo/UDP.get_nec.html", "_iwopy/interfaces/pygmo/UDP.get_nic.html", "_iwopy/interfaces/pygmo/UDP.get_nix.html", "_iwopy/interfaces/pygmo/UDP.get_nobj.html", "_iwopy/interfaces/pygmo/UDP.gradient.html", "_iwopy/interfaces/pygmo/UDP.gradient_sparsity.html", "_iwopy/interfaces/pygmo/UDP.has_batch_fitness.html", "_iwopy/interfaces/pygmo/UDP.has_gradient.html", "_iwopy/interfaces/pygmo/UDP.has_gradient_sparsity.html", "_iwopy/interfaces/pygmo/UDP.has_hessians.html", "_iwopy/interfaces/pygmo/UDP.has_hessians_sparsity.html", "_iwopy/interfaces/pygmo/UDP.has_set_seed.html", "_iwopy/interfaces/pygmo/load.html", "_iwopy/interfaces/pymoo/DefaultCallbackTemplate.html", "_iwopy/interfaces/pymoo/DefaultCallbackTemplate.__init__.html", "_iwopy/interfaces/pymoo/DefaultCallbackTemplate.get_class.html", "_iwopy/interfaces/pymoo/DefaultCallbackTemplate.notify.html", "_iwopy/interfaces/pymoo/Factory.html", "_iwopy/interfaces/pymoo/Factory.__init__.html", "_iwopy/interfaces/pymoo/Factory.get_algorithm.html", "_iwopy/interfaces/pymoo/Factory.get_crossover.html", "_iwopy/interfaces/pymoo/Factory.get_mutation.html", "_iwopy/interfaces/pymoo/Factory.get_sampling.html", "_iwopy/interfaces/pymoo/Factory.get_termination.html", "_iwopy/interfaces/pymoo/Factory.print.html", "_iwopy/interfaces/pymoo/MultiObjProblemTemplate.html", "_iwopy/interfaces/pymoo/MultiObjProblemTemplate.__init__.html", "_iwopy/interfaces/pymoo/MultiObjProblemTemplate.finalize.html", "_iwopy/interfaces/pymoo/MultiObjProblemTemplate.get_class.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.__init__.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.get_figure_f.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.initialize.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.print_info.html", "_iwopy/interfaces/pymoo/Optimizer_pymoo.solve.html", "_iwopy/interfaces/pymoo/SingleObjProblemTemplate.html", "_iwopy/interfaces/pymoo/SingleObjProblemTemplate.__init__.html", "_iwopy/interfaces/pymoo/SingleObjProblemTemplate.finalize.html", "_iwopy/interfaces/pymoo/SingleObjProblemTemplate.get_class.html", "_iwopy/interfaces/pymoo/load.html", "_iwopy/interfaces/scipy/Optimizer_scipy.html", "_iwopy/interfaces/scipy/Optimizer_scipy.__init__.html", "_iwopy/interfaces/scipy/Optimizer_scipy.initialize.html", "_iwopy/interfaces/scipy/Optimizer_scipy.print_info.html", "_iwopy/interfaces/scipy/Optimizer_scipy.solve.html", "_iwopy/optimizers/GG.html", "_iwopy/optimizers/GG.__init__.html", "_iwopy/optimizers/GG.initialize.html", "_iwopy/optimizers/GG.print_info.html", "_iwopy/optimizers/GG.solve.html", "_iwopy/utils/RegularDiscretizationGrid.html", "_iwopy/utils/RegularDiscretizationGrid.INT_INF.html", "_iwopy/utils/RegularDiscretizationGrid.__init__.html", "_iwopy/utils/RegularDiscretizationGrid.all_gridpoints.html", "_iwopy/utils/RegularDiscretizationGrid.apply_tol.html", "_iwopy/utils/RegularDiscretizationGrid.apply_tols.html", "_iwopy/utils/RegularDiscretizationGrid.deriv_coeffs.html", "_iwopy/utils/RegularDiscretizationGrid.deriv_coeffs_gridpoints.html", "_iwopy/utils/RegularDiscretizationGrid.find_grid_inds.html", "_iwopy/utils/RegularDiscretizationGrid.find_gridpoints.html", "_iwopy/utils/RegularDiscretizationGrid.find_ingrid.html", "_iwopy/utils/RegularDiscretizationGrid.get_cell.html", "_iwopy/utils/RegularDiscretizationGrid.get_cells.html", "_iwopy/utils/RegularDiscretizationGrid.get_corner.html", "_iwopy/utils/RegularDiscretizationGrid.get_corners.html", "_iwopy/utils/RegularDiscretizationGrid.gp2i.html", "_iwopy/utils/RegularDiscretizationGrid.gpts2inds.html", "_iwopy/utils/RegularDiscretizationGrid.grad_coeffs.html", "_iwopy/utils/RegularDiscretizationGrid.grad_coeffs_gridpoints.html", "_iwopy/utils/RegularDiscretizationGrid.i2gp.html", "_iwopy/utils/RegularDiscretizationGrid.in_grid.html", "_iwopy/utils/RegularDiscretizationGrid.inds2gpts.html", "_iwopy/utils/RegularDiscretizationGrid.interpolation_coeffs_point.html", "_iwopy/utils/RegularDiscretizationGrid.interpolation_coeffs_points.html", "_iwopy/utils/RegularDiscretizationGrid.is_gridi.html", "_iwopy/utils/RegularDiscretizationGrid.is_gridpoint.html", "_iwopy/utils/RegularDiscretizationGrid.n_dims.html", "_iwopy/utils/RegularDiscretizationGrid.n_points.html", "_iwopy/utils/RegularDiscretizationGrid.p_max.html", "_iwopy/utils/RegularDiscretizationGrid.p_min.html", "_iwopy/utils/RegularDiscretizationGrid.print_info.html", "_iwopy/utils/import_module.html", "_iwopy/utils/suppress_stdout.html", "_iwopy/wrappers/DiscretizeRegGrid.html", "_iwopy/wrappers/DiscretizeRegGrid.__init__.html", "_iwopy/wrappers/DiscretizeRegGrid.apply_individual.html", "_iwopy/wrappers/DiscretizeRegGrid.apply_population.html", "_iwopy/wrappers/DiscretizeRegGrid.evaluate_individual.html", "_iwopy/wrappers/DiscretizeRegGrid.evaluate_population.html", "_iwopy/wrappers/DiscretizeRegGrid.finalize_individual.html", "_iwopy/wrappers/DiscretizeRegGrid.finalize_population.html", "_iwopy/wrappers/DiscretizeRegGrid.initialize.html", "_iwopy/wrappers/LocalFD.html", "_iwopy/wrappers/LocalFD.__init__.html", "_iwopy/wrappers/LocalFD.calc_gradients.html", "_iwopy/wrappers/LocalFD.initialize.html", "_iwopy/wrappers/ProblemWrapper.html", "_iwopy/wrappers/ProblemWrapper.__init__.html", "_iwopy/wrappers/ProblemWrapper.apply_individual.html", "_iwopy/wrappers/ProblemWrapper.apply_population.html", "_iwopy/wrappers/ProblemWrapper.finalize_individual.html", "_iwopy/wrappers/ProblemWrapper.finalize_population.html", "_iwopy/wrappers/ProblemWrapper.initial_values_float.html", "_iwopy/wrappers/ProblemWrapper.initial_values_int.html", "_iwopy/wrappers/ProblemWrapper.initialize.html", "_iwopy/wrappers/ProblemWrapper.max_values_float.html", "_iwopy/wrappers/ProblemWrapper.max_values_int.html", "_iwopy/wrappers/ProblemWrapper.min_values_float.html", "_iwopy/wrappers/ProblemWrapper.min_values_int.html", "_iwopy/wrappers/ProblemWrapper.var_names_float.html", "_iwopy/wrappers/ProblemWrapper.var_names_int.html", "_iwopy/wrappers/SimpleConstraint.html", "_iwopy/wrappers/SimpleConstraint.__init__.html", "_iwopy/wrappers/SimpleConstraint.ana_deriv.html", "_iwopy/wrappers/SimpleConstraint.calc_individual.html", "_iwopy/wrappers/SimpleConstraint.calc_population.html", "_iwopy/wrappers/SimpleConstraint.f.html", "_iwopy/wrappers/SimpleConstraint.g.html", "_iwopy/wrappers/SimpleConstraint.get_bounds.html", "_iwopy/wrappers/SimpleConstraint.n_components.html", "_iwopy/wrappers/SimpleObjective.html", "_iwopy/wrappers/SimpleObjective.__init__.html", "_iwopy/wrappers/SimpleObjective.ana_deriv.html", "_iwopy/wrappers/SimpleObjective.calc_individual.html", "_iwopy/wrappers/SimpleObjective.calc_population.html", "_iwopy/wrappers/SimpleObjective.f.html", "_iwopy/wrappers/SimpleObjective.g.html", "_iwopy/wrappers/SimpleObjective.has_ana_derivs.html", "_iwopy/wrappers/SimpleObjective.maximize.html", "_iwopy/wrappers/SimpleObjective.n_components.html", "_iwopy/wrappers/SimpleProblem.html", "_iwopy/wrappers/SimpleProblem.__init__.html", "_iwopy/wrappers/SimpleProblem.initial_values_float.html", "_iwopy/wrappers/SimpleProblem.initial_values_int.html", "_iwopy/wrappers/SimpleProblem.max_values_float.html", "_iwopy/wrappers/SimpleProblem.max_values_int.html", "_iwopy/wrappers/SimpleProblem.min_values_float.html", "_iwopy/wrappers/SimpleProblem.min_values_int.html", "_iwopy/wrappers/SimpleProblem.var_names_float.html", "_iwopy/wrappers/SimpleProblem.var_names_int.html", "api.html", "api_benchmarks.html", "api_core.html", "api_interfaces.html", "api_interfaces_pygmo.html", "api_interfaces_pymoo.html", "api_interfaces_scipy.html", "api_iwopy.html", "api_optimizers.html", "api_utils.html", "api_wrappers.html", "citation.html", "examples.html", "index.html", "installation.html", "notebooks/electrostatics.html", "notebooks/mixed.html", "notebooks/multi_obj_chain.html", "notebooks/simple_function.html", "testing.html", "wind_farm_layout.html"], "envversion": {"nbsphinx": 4, "sphinx": 63, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "indexentries": {}, "objects": {"iwopy.benchmarks.branin": [[1, 0, 1, "", "BraninObjective", "The objective function for the Branin problem."], [5, 0, 1, "", "BraninProblem", "Problem definition of benchmark function Branin."]], "iwopy.benchmarks.branin.BraninObjective": [[2, 1, 1, "", "__init__", "Constructor"], [3, 1, 1, "", "f", "The Branin function f(x, y)"], [4, 1, 1, "", "g", "The derivative of the Branin function"]], "iwopy.benchmarks.branin.BraninObjective.__init__": [[2, 2, 2, "", "ana_deriv", "Constructor"], [2, 2, 2, "", "name", "Constructor"], [2, 2, 2, "", "problem", "Constructor"]], "iwopy.benchmarks.branin.BraninObjective.f": [[3, 2, 2, "", "x", "The Branin function f(x, y)"], [3, 2, 2, "", "y", "The Branin function f(x, y)"]], "iwopy.benchmarks.branin.BraninObjective.g": [[4, 2, 2, "", "components", "The derivative of the Branin function"], [4, 2, 2, "", "var", "The derivative of the Branin function"], [4, 2, 2, "", "x", "The derivative of the Branin function"], [4, 2, 2, "", "y", "The derivative of the Branin function"]], "iwopy.benchmarks.branin.BraninProblem": [[6, 1, 1, "", "__init__", "Constructor"]], "iwopy.benchmarks.branin.BraninProblem.__init__": [[6, 2, 2, "", "ana_deriv", "Constructor"], [6, 2, 2, "", "initial_values", "Constructor"], [6, 2, 2, "", "name", "Constructor"]], "iwopy.benchmarks.rosenbrock": [[7, 0, 1, "", "RosenbrockObjective", "The Rosenbrock function is defined as"], [11, 0, 1, "", "RosenbrockProblem", "Problem definition of benchmark function Rosenbrock."]], "iwopy.benchmarks.rosenbrock.RosenbrockObjective": [[8, 1, 1, "", "__init__", "Construtor"], [9, 1, 1, "", "f", "The Rosenbrock function f(x, y)"], [10, 1, 1, "", "g", "The derivative of the Rosenbrock function"]], "iwopy.benchmarks.rosenbrock.RosenbrockObjective.__init__": [[8, 2, 2, "", "ana_deriv", "Construtor"], [8, 2, 2, "", "name", "Construtor"], [8, 2, 2, "", "pars", "Construtor"], [8, 2, 2, "", "problem", "Construtor"]], "iwopy.benchmarks.rosenbrock.RosenbrockObjective.f": [[9, 2, 2, "", "x", "The Rosenbrock function f(x, y)"], [9, 2, 2, "", "y", "The Rosenbrock function f(x, y)"]], "iwopy.benchmarks.rosenbrock.RosenbrockObjective.g": [[10, 2, 2, "", "components", "The derivative of the Rosenbrock function"], [10, 2, 2, "", "var", "The derivative of the Rosenbrock function"], [10, 2, 2, "", "x", "The derivative of the Rosenbrock function"], [10, 2, 2, "", "y", "The derivative of the Rosenbrock function"]], "iwopy.benchmarks.rosenbrock.RosenbrockProblem": [[12, 1, 1, "", "__init__", "Constructor"]], "iwopy.benchmarks.rosenbrock.RosenbrockProblem.__init__": [[12, 2, 2, "", "ana_deriv", "Constructor"], [12, 2, 2, "", "initial", "Constructor"], [12, 2, 2, "", "lower", "Constructor"], [12, 2, 2, "", "name", "Constructor"], [12, 2, 2, "", "upper", "Constructor"]], "iwopy.core": [[13, 0, 1, "", "Base", "Generic base for various iwopy objects."], [19, 0, 1, "", "Constraint", "Abstract base class for optimization constraints."], [24, 0, 1, "", "Memory", "Storage for function results."], [34, 0, 1, "", "MultiObjOptResults", "Container for optimization results for multi objective problems."], [39, 0, 1, "", "Objective", "Abstract base class for objective functions."], [41, 0, 1, "", "OptFunction", "Abstract base class for functions that calculate scalars based on a problem."], [59, 0, 1, "", "OptFunctionList", "A list of functions."], [75, 0, 1, "", "OptFunctionSubset", "A function composed of a subset of a function's components."], [84, 0, 1, "", "Optimizer", "Abstract base class for optimization solvers."], [89, 0, 1, "", "Problem", "Abstract base class for optimization problems."], [123, 0, 1, "", "ProblemDefaultFunc", "The default function of a problem for gradient calculations."], [125, 0, 1, "", "SingleObjOptResults", "Container for optimization results for single objective problems."]], "iwopy.core.Base": [[14, 1, 1, "", "__init__", "Constructor"], [15, 1, 1, "", "__str__", "Get info string"], [16, 1, 1, "", "finalize", "Finalize the object."], [17, 1, 1, "", "initialize", "Initialize the object."], [18, 3, 1, "", "initialized", "Flag for finished initialization"]], "iwopy.core.Base.__init__": [[14, 2, 2, "", "name", "Constructor"]], "iwopy.core.Base.finalize": [[16, 2, 2, "", "verbosity", "Finalize the object."]], "iwopy.core.Base.initialize": [[17, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.core.Constraint": [[20, 1, 1, "", "__init__", "Constructor"], [21, 1, 1, "", "check_individual", "Check if the constraints are fullfilled for the given individual."], [22, 1, 1, "", "check_population", "Check if the constraints are fullfilled for the given population."], [23, 1, 1, "", "get_bounds", "Returns the bounds for all components."]], "iwopy.core.Constraint.__init__": [[20, 2, 2, "", "args", "Constructor"], [20, 2, 2, "", "kwargs", "Constructor"], [20, 2, 2, "", "tol", "Constructor"]], "iwopy.core.Constraint.check_individual": [[21, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given individual."], [21, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given individual."]], "iwopy.core.Constraint.check_population": [[22, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given population."], [22, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given population."]], "iwopy.core.Memory": [[25, 1, 1, "", "__init__", "Constructor"], [26, 1, 1, "", "clear", "Clears the memory"], [27, 1, 1, "", "found_individual", "Check if entry is found in memory."], [28, 1, 1, "", "found_population", "Check if entry is found in memory."], [29, 1, 1, "", "lookup_individual", "Lookup results from memory."], [30, 1, 1, "", "lookup_population", "Lookup results from memory."], [31, 3, 1, "", "size", "The number of elements currently stored in memory"], [32, 1, 1, "", "store_individual", "Store objs and cons data."], [33, 1, 1, "", "store_population", "Store objs and cons data of a population."]], "iwopy.core.Memory.__init__": [[25, 2, 2, "", "keyf", "Constructor"], [25, 2, 2, "", "size", "Constructor"]], "iwopy.core.Memory.found_individual": [[27, 2, 2, "", "vars_float", "Check if entry is found in memory."], [27, 2, 2, "", "vars_int", "Check if entry is found in memory."]], "iwopy.core.Memory.found_population": [[28, 2, 2, "", "vars_float", "Check if entry is found in memory."], [28, 2, 2, "", "vars_int", "Check if entry is found in memory."]], "iwopy.core.Memory.lookup_individual": [[29, 2, 2, "", "vars_float", "Lookup results from memory."], [29, 2, 2, "", "vars_int", "Lookup results from memory."]], "iwopy.core.Memory.lookup_population": [[30, 2, 2, "", "target", "Lookup results from memory."], [30, 2, 2, "", "vars_float", "Lookup results from memory."], [30, 2, 2, "", "vars_int", "Lookup results from memory."]], "iwopy.core.Memory.store_individual": [[32, 2, 2, "", "cons", "Store objs and cons data."], [32, 2, 2, "", "objs", "Store objs and cons data."], [32, 2, 2, "", "vars_float", "Store objs and cons data."], [32, 2, 2, "", "vars_int", "Store objs and cons data."]], "iwopy.core.Memory.store_population": [[33, 2, 2, "", "cons", "Store objs and cons data of a population."], [33, 2, 2, "", "objs", "Store objs and cons data of a population."], [33, 2, 2, "", "vars_float", "Store objs and cons data of a population."], [33, 2, 2, "", "vars_int", "Store objs and cons data of a population."]], "iwopy.core.MultiObjOptResults": [[35, 1, 1, "", "__init__", "Constructor"], [36, 1, 1, "", "__str__", "Return str(self)."], [37, 1, 1, "", "find_pareto_objmix", "Find the point on the pareto front that approximates best the given weights of objectives"], [38, 1, 1, "", "plot_pareto", "Get figure that shows the pareto front"]], "iwopy.core.MultiObjOptResults.__init__": [[35, 2, 2, "", "cons", "Constructor"], [35, 2, 2, "", "objs", "Constructor"], [35, 2, 2, "", "problem", "Constructor"], [35, 2, 2, "", "problem_results", "Constructor"], [35, 2, 2, "", "success", "Constructor"], [35, 2, 2, "", "vars_float", "Constructor"], [35, 2, 2, "", "vars_int", "Constructor"]], "iwopy.core.MultiObjOptResults.find_pareto_objmix": [[37, 2, 2, "", "max", "Find the point on the pareto front that approximates best the given weights of objectives"], [37, 2, 2, "", "obj_weights", "Find the point on the pareto front that approximates best the given weights of objectives"]], "iwopy.core.MultiObjOptResults.plot_pareto": [[38, 2, 2, "", "ax", "Get figure that shows the pareto front"], [38, 2, 2, "", "color_ival", "Get figure that shows the pareto front"], [38, 2, 2, "", "color_val", "Get figure that shows the pareto front"], [38, 2, 2, "", "figsize", "Get figure that shows the pareto front"], [38, 2, 2, "", "obj_0", "Get figure that shows the pareto front"], [38, 2, 2, "", "obj_1", "Get figure that shows the pareto front"], [38, 2, 2, "", "s", "Get figure that shows the pareto front"], [38, 2, 2, "", "title", "Get figure that shows the pareto front"]], "iwopy.core.Objective": [[40, 1, 1, "", "maximize", "Returns flag for maximization of each component."]], "iwopy.core.OptFunction": [[42, 1, 1, "", "__init__", "Constructor"], [43, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [44, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [45, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [46, 3, 1, "", "component_names", "The names of the components"], [47, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [48, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [49, 1, 1, "", "initialize", "Initialize the object."], [50, 1, 1, "", "n_components", "Returns the number of components of the function."], [51, 3, 1, "", "n_vars_float", "The number of float variables"], [52, 3, 1, "", "n_vars_int", "The number of int variables"], [53, 1, 1, "", "rename_vars_float", "Rename float variables."], [54, 1, 1, "", "rename_vars_int", "Rename integer variables."], [55, 3, 1, "", "var_names_float", "The names of the float variables"], [56, 3, 1, "", "var_names_int", "The names of the integer variables"], [57, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [58, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "iwopy.core.OptFunction.__init__": [[42, 2, 2, "", "cnames", "Constructor"], [42, 2, 2, "", "n_vars_float", "Constructor"], [42, 2, 2, "", "n_vars_int", "Constructor"], [42, 2, 2, "", "name", "Constructor"], [42, 2, 2, "", "problem", "Constructor"], [42, 2, 2, "", "vnames_float", "Constructor"], [42, 2, 2, "", "vnames_int", "Constructor"]], "iwopy.core.OptFunction.ana_deriv": [[43, 2, 2, "", "components", "Calculates the analytic derivative, if possible."], [43, 2, 2, "", "var", "Calculates the analytic derivative, if possible."], [43, 2, 2, "", "vars_float", "Calculates the analytic derivative, if possible."], [43, 2, 2, "", "vars_int", "Calculates the analytic derivative, if possible."]], "iwopy.core.OptFunction.calc_individual": [[44, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [44, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [44, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [44, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "iwopy.core.OptFunction.calc_population": [[45, 2, 2, "", "components", "Calculate values for all individuals of a population."], [45, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [45, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [45, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "iwopy.core.OptFunction.finalize_individual": [[47, 2, 2, "", "problem_results", "Finalization, given the champion data."], [47, 2, 2, "", "vars_float", "Finalization, given the champion data."], [47, 2, 2, "", "vars_int", "Finalization, given the champion data."], [47, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "iwopy.core.OptFunction.finalize_population": [[48, 2, 2, "", "problem_results", "Finalization, given the final population data."], [48, 2, 2, "", "vars_float", "Finalization, given the final population data."], [48, 2, 2, "", "vars_int", "Finalization, given the final population data."], [48, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "iwopy.core.OptFunction.initialize": [[49, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.core.OptFunction.rename_vars_float": [[53, 2, 2, "", "varmap", "Rename float variables."]], "iwopy.core.OptFunction.rename_vars_int": [[54, 2, 2, "", "varmap", "Rename integer variables."]], "iwopy.core.OptFunctionList": [[60, 1, 1, "", "__init__", "Constructor"], [61, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [62, 1, 1, "", "append", "Adds a function to the list."], [63, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [64, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [65, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [66, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [67, 3, 1, "", "functions", "The list of added funtions"], [68, 1, 1, "", "initialize", "Initialize the object."], [69, 1, 1, "", "n_components", "Returns the number of components of the function."], [70, 3, 1, "", "n_functions", "The number of added functions"], [71, 1, 1, "", "split_individual", "Splits result values or other data into individual function data."], [72, 1, 1, "", "split_population", "Splits result values or other data into individual function data."], [73, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [74, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "iwopy.core.OptFunctionList.__init__": [[60, 2, 2, "", "name", "Constructor"], [60, 2, 2, "", "problem", "Constructor"]], "iwopy.core.OptFunctionList.ana_deriv": [[61, 2, 2, "", "components", "Calculates the analytic derivative, if possible."], [61, 2, 2, "", "var", "Calculates the analytic derivative, if possible."], [61, 2, 2, "", "vars_float", "Calculates the analytic derivative, if possible."], [61, 2, 2, "", "vars_int", "Calculates the analytic derivative, if possible."]], "iwopy.core.OptFunctionList.append": [[62, 2, 2, "", "function", "Adds a function to the list."]], "iwopy.core.OptFunctionList.calc_individual": [[63, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [63, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [63, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [63, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "iwopy.core.OptFunctionList.calc_population": [[64, 2, 2, "", "components", "Calculate values for all individuals of a population."], [64, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [64, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [64, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "iwopy.core.OptFunctionList.finalize_individual": [[65, 2, 2, "", "problem_results", "Finalization, given the champion data."], [65, 2, 2, "", "vars_float", "Finalization, given the champion data."], [65, 2, 2, "", "vars_int", "Finalization, given the champion data."], [65, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "iwopy.core.OptFunctionList.finalize_population": [[66, 2, 2, "", "problem_results", "Finalization, given the final population data."], [66, 2, 2, "", "vars_float", "Finalization, given the final population data."], [66, 2, 2, "", "vars_int", "Finalization, given the final population data."], [66, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "iwopy.core.OptFunctionList.initialize": [[68, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.core.OptFunctionList.split_individual": [[71, 2, 2, "", "data", "Splits result values or other data into individual function data."]], "iwopy.core.OptFunctionList.split_population": [[72, 2, 2, "", "data", "Splits result values or other data into individual function data."]], "iwopy.core.OptFunctionSubset": [[76, 1, 1, "", "__init__", "Constructor"], [77, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [78, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [79, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [80, 1, 1, "", "initialize", "Initialize the object."], [81, 1, 1, "", "n_components", "Returns the number of components of the function."], [82, 1, 1, "", "vardeps_float", "Gets the dependencies of all components on the function float variables"], [83, 1, 1, "", "vardeps_int", "Gets the dependencies of all components on the function int variables"]], "iwopy.core.OptFunctionSubset.__init__": [[76, 2, 2, "", "function", "Constructor"], [76, 2, 2, "", "name", "Constructor"], [76, 2, 2, "", "subset", "Constructor"]], "iwopy.core.OptFunctionSubset.ana_deriv": [[77, 2, 2, "", "components", "Calculates the analytic derivative, if possible."], [77, 2, 2, "", "var", "Calculates the analytic derivative, if possible."], [77, 2, 2, "", "vars_float", "Calculates the analytic derivative, if possible."], [77, 2, 2, "", "vars_int", "Calculates the analytic derivative, if possible."]], "iwopy.core.OptFunctionSubset.calc_individual": [[78, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [78, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [78, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [78, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "iwopy.core.OptFunctionSubset.calc_population": [[79, 2, 2, "", "components", "Calculate values for all individuals of a population."], [79, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [79, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [79, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "iwopy.core.OptFunctionSubset.initialize": [[80, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.core.Optimizer": [[85, 1, 1, "", "__init__", "Constructor"], [86, 1, 1, "", "finalize", "This function may be called after finishing the optimization."], [87, 1, 1, "", "print_info", "Print solver info, called before solving"], [88, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.core.Optimizer.__init__": [[85, 2, 2, "", "name", "Constructor"], [85, 2, 2, "", "problem", "Constructor"]], "iwopy.core.Optimizer.finalize": [[86, 2, 2, "", "opt_results", "This function may be called after finishing the optimization."], [86, 2, 2, "", "verbosity", "This function may be called after finishing the optimization."]], "iwopy.core.Optimizer.solve": [[88, 2, 2, "", "verbosity", "Run the optimization solver."]], "iwopy.core.Problem": [[90, 4, 1, "", "INT_INF", ""], [91, 1, 1, "", "__init__", "Constructor"], [92, 1, 1, "", "add_constraint", "Add a constraint to the problem."], [93, 1, 1, "", "add_objective", "Add an objective to the problem."], [94, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [95, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [96, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [97, 1, 1, "", "check_constraints_individual", "Check if the constraints are fullfilled for the given individual."], [98, 1, 1, "", "check_constraints_population", "Check if the constraints are fullfilled for the given population."], [99, 3, 1, "", "constraints_tol", "Gets the tolerance values of constraints"], [100, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [101, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [102, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [103, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [104, 1, 1, "", "get_gradients", "Obtain gradients of a function that is linked to the problem."], [105, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [106, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [107, 1, 1, "", "initialize", "Initialize the problem."], [108, 3, 1, "", "max_values_constraints", "Gets the maximal values of constraints"], [109, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [110, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [111, 3, 1, "", "maximize_objs", "Flags for objective maximization"], [112, 3, 1, "", "min_values_constraints", "Gets the minimal values of constraints"], [113, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [114, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [115, 3, 1, "", "n_constraints", "The total number of constraints, i.e., the sum of all components"], [116, 3, 1, "", "n_objectives", "The total number of objectives, i.e., the sum of all components"], [117, 3, 1, "", "n_vars_float", "The number of float variables"], [118, 3, 1, "", "n_vars_int", "The number of int variables"], [119, 1, 1, "", "prob_res_einsum_individual", "Calculate the einsum of problem results"], [120, 1, 1, "", "prob_res_einsum_population", "Calculate the einsum of problem results"], [121, 1, 1, "", "var_names_float", "The names of float variables."], [122, 1, 1, "", "var_names_int", "The names of integer variables."]], "iwopy.core.Problem.__init__": [[91, 2, 2, "", "mem_keyf", "Constructor"], [91, 2, 2, "", "mem_size", "Constructor"], [91, 2, 2, "", "name", "Constructor"]], "iwopy.core.Problem.add_constraint": [[92, 2, 2, "", "constraint", "Add a constraint to the problem."], [92, 2, 2, "", "varmap_float", "Add a constraint to the problem."], [92, 2, 2, "", "varmap_int", "Add a constraint to the problem."], [92, 2, 2, "", "verbosity", "Add a constraint to the problem."]], "iwopy.core.Problem.add_objective": [[93, 2, 2, "", "objective", "Add an objective to the problem."], [93, 2, 2, "", "varmap_float", "Add an objective to the problem."], [93, 2, 2, "", "varmap_int", "Add an objective to the problem."], [93, 2, 2, "", "verbosity", "Add an objective to the problem."]], "iwopy.core.Problem.apply_individual": [[94, 2, 2, "", "vars_float", "Apply new variables to the problem."], [94, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "iwopy.core.Problem.apply_population": [[95, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [95, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "iwopy.core.Problem.calc_gradients": [[96, 2, 2, "", "components", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [96, 2, 2, "", "func", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [96, 2, 2, "", "fvars", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [96, 2, 2, "", "ivars", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [96, 2, 2, "", "pop", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [96, 2, 2, "", "vars_float", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [96, 2, 2, "", "vars_int", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [96, 2, 2, "", "verbosity", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [96, 2, 2, "", "vrs", "The actual gradient calculation, not to be called directly (call get_gradients instead)."]], "iwopy.core.Problem.check_constraints_individual": [[97, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given individual."], [97, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given individual."]], "iwopy.core.Problem.check_constraints_population": [[98, 2, 2, "", "constraint_values", "Check if the constraints are fullfilled for the given population."], [98, 2, 2, "", "verbosity", "Check if the constraints are fullfilled for the given population."]], "iwopy.core.Problem.evaluate_individual": [[100, 2, 2, "", "ret_prob_res", "Evaluate a single individual of the problem."], [100, 2, 2, "", "vars_float", "Evaluate a single individual of the problem."], [100, 2, 2, "", "vars_int", "Evaluate a single individual of the problem."]], "iwopy.core.Problem.evaluate_population": [[101, 2, 2, "", "ret_prob_res", "Evaluate all individuals of a population."], [101, 2, 2, "", "vars_float", "Evaluate all individuals of a population."], [101, 2, 2, "", "vars_int", "Evaluate all individuals of a population."]], "iwopy.core.Problem.finalize_individual": [[102, 2, 2, "", "vars_float", "Finalization, given the champion data."], [102, 2, 2, "", "vars_int", "Finalization, given the champion data."], [102, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "iwopy.core.Problem.finalize_population": [[103, 2, 2, "", "vars_float", "Finalization, given the final population data."], [103, 2, 2, "", "vars_int", "Finalization, given the final population data."], [103, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "iwopy.core.Problem.get_gradients": [[104, 2, 2, "", "components", "Obtain gradients of a function that is linked to the problem."], [104, 2, 2, "", "func", "Obtain gradients of a function that is linked to the problem."], [104, 2, 2, "", "pop", "Obtain gradients of a function that is linked to the problem."], [104, 2, 2, "", "vars", "Obtain gradients of a function that is linked to the problem."], [104, 2, 2, "", "vars_float", "Obtain gradients of a function that is linked to the problem."], [104, 2, 2, "", "vars_int", "Obtain gradients of a function that is linked to the problem."], [104, 2, 2, "", "verbosity", "Obtain gradients of a function that is linked to the problem."]], "iwopy.core.Problem.initialize": [[107, 2, 2, "", "verbosity", "Initialize the problem."]], "iwopy.core.Problem.prob_res_einsum_individual": [[119, 2, 2, "", "coeffs", "Calculate the einsum of problem results"], [119, 2, 2, "", "prob_res_list", "Calculate the einsum of problem results"]], "iwopy.core.Problem.prob_res_einsum_population": [[120, 2, 2, "", "coeffs", "Calculate the einsum of problem results"], [120, 2, 2, "", "prob_res_list", "Calculate the einsum of problem results"]], "iwopy.core.ProblemDefaultFunc": [[124, 1, 1, "", "__init__", "Constructor"]], "iwopy.core.ProblemDefaultFunc.__init__": [[124, 2, 2, "", "problem", "Constructor"]], "iwopy.core.SingleObjOptResults": [[126, 1, 1, "", "__init__", "Constructor"], [127, 1, 1, "", "__str__", "Return str(self)."]], "iwopy.core.SingleObjOptResults.__init__": [[126, 2, 2, "", "cons", "Constructor"], [126, 2, 2, "", "objs", "Constructor"], [126, 2, 2, "", "problem", "Constructor"], [126, 2, 2, "", "problem_results", "Constructor"], [126, 2, 2, "", "success", "Constructor"], [126, 2, 2, "", "vars_float", "Constructor"], [126, 2, 2, "", "vars_int", "Constructor"]], "iwopy.interfaces.pygmo": [[128, 0, 1, "", "AlgoFactory", "Creates a pygmo algorithm from parameters"], [130, 0, 1, "", "Optimizer_pygmo", "Interface to the pygmo optimizers for serial runs."], [135, 0, 1, "", "UDP", "Generic Problem to Pygmo UserDefinedProblem adapter"], [155, 5, 1, "", "load", "Loads the pygmo package dynamically"]], "iwopy.interfaces.pygmo.AlgoFactory": [[129, 1, 1, "", "new", "Create a pygmo algo."]], "iwopy.interfaces.pygmo.AlgoFactory.new": [[129, 2, 2, "", "kwargs", "Create a pygmo algo."], [129, 2, 2, "", "pop", "Create a pygmo algo."], [129, 2, 2, "", "type", "Create a pygmo algo."]], "iwopy.interfaces.pygmo.Optimizer_pygmo": [[131, 1, 1, "", "__init__", "Constructor"], [132, 1, 1, "", "initialize", "Initialize the object."], [133, 1, 1, "", "print_info", "Print solver info, called before solving"], [134, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.interfaces.pygmo.Optimizer_pygmo.__init__": [[131, 2, 2, "", "algo_pars", "Constructor"], [131, 2, 2, "", "problem", "Constructor"], [131, 2, 2, "", "problem_pars", "Constructor"], [131, 2, 2, "", "setup_pars", "Constructor"]], "iwopy.interfaces.pygmo.Optimizer_pygmo.initialize": [[132, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.interfaces.pygmo.Optimizer_pygmo.solve": [[134, 2, 2, "", "verbosity", "Run the optimization solver."]], "iwopy.interfaces.pygmo.UDP": [[136, 1, 1, "", "__init__", "Constructor"], [137, 1, 1, "", "batch_fitness", ""], [138, 1, 1, "", "finalize", "Finalize the problem."], [139, 1, 1, "", "fitness", ""], [140, 1, 1, "", "get_bounds", ""], [141, 1, 1, "", "get_extra_info", ""], [142, 1, 1, "", "get_name", ""], [143, 1, 1, "", "get_nec", ""], [144, 1, 1, "", "get_nic", ""], [145, 1, 1, "", "get_nix", ""], [146, 1, 1, "", "get_nobj", ""], [147, 1, 1, "", "gradient", ""], [148, 1, 1, "", "gradient_sparsity", ""], [149, 1, 1, "", "has_batch_fitness", ""], [150, 1, 1, "", "has_gradient", ""], [151, 1, 1, "", "has_gradient_sparsity", ""], [152, 1, 1, "", "has_hessians", ""], [153, 1, 1, "", "has_hessians_sparsity", ""], [154, 1, 1, "", "has_set_seed", ""]], "iwopy.interfaces.pygmo.UDP.__init__": [[136, 2, 2, "", "pop", "Constructor"], [136, 2, 2, "", "problem", "Constructor"], [136, 2, 2, "", "verbosity", "Constructor"]], "iwopy.interfaces.pygmo.UDP.batch_fitness": [[137, 2, 2, "", "dvs", ""]], "iwopy.interfaces.pygmo.UDP.finalize": [[138, 2, 2, "", "pygmo_pop", "Finalize the problem."], [138, 2, 2, "", "verbosity", "Finalize the problem."]], "iwopy.interfaces.pygmo.UDP.fitness": [[139, 2, 2, "", "dv", ""]], "iwopy.interfaces.pygmo.UDP.gradient": [[147, 2, 2, "", "x", ""]], "iwopy.interfaces.pygmo.load": [[155, 2, 2, "", "verbosity", "Loads the pygmo package dynamically"]], "iwopy.interfaces.pymoo": [[156, 0, 1, "", "DefaultCallbackTemplate", "Template for the default callback"], [160, 0, 1, "", "Factory", "A factory for pymoo components"], [168, 0, 1, "", "MultiObjProblemTemplate", "Template for a wrapper around the pymoo problem for a multiple objectives problem."], [172, 0, 1, "", "Optimizer_pymoo", "Interface to the pymoo optimization solver."], [178, 0, 1, "", "SingleObjProblemTemplate", "Template for a wrapper around the pymoo problem for a single objective."], [182, 5, 1, "", "load", "Loads the pymoo package dynamically"]], "iwopy.interfaces.pymoo.DefaultCallbackTemplate": [[157, 1, 1, "", "__init__", "Constructor"], [158, 1, 1, "", "get_class", "Creates the class, dynamically derived from pymoo.Callback"], [159, 1, 1, "", "notify", ""]], "iwopy.interfaces.pymoo.DefaultCallbackTemplate.notify": [[159, 2, 2, "", "algorithm", ""]], "iwopy.interfaces.pymoo.Factory": [[161, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [162, 1, 1, "", "get_algorithm", "Algorithm factory function"], [163, 1, 1, "", "get_crossover", "Crossover factory function"], [164, 1, 1, "", "get_mutation", "Mutation factory function"], [165, 1, 1, "", "get_sampling", "Sampling factory function"], [166, 1, 1, "", "get_termination", "Termination factory function"], [167, 1, 1, "", "print", ""]], "iwopy.interfaces.pymoo.Factory.__init__": [[161, 2, 2, "", "pymoo_problem", "Initialize self.  See help(type(self)) for accurate signature."], [161, 2, 2, "", "verbosity", "Initialize self.  See help(type(self)) for accurate signature."]], "iwopy.interfaces.pymoo.Factory.get_algorithm": [[162, 2, 2, "", "pars", "Algorithm factory function"]], "iwopy.interfaces.pymoo.Factory.get_crossover": [[163, 2, 2, "", "cross", "Crossover factory function"], [163, 2, 2, "", "pars", "Crossover factory function"]], "iwopy.interfaces.pymoo.Factory.get_mutation": [[164, 2, 2, "", "mut", "Mutation factory function"], [164, 2, 2, "", "pars", "Mutation factory function"]], "iwopy.interfaces.pymoo.Factory.get_sampling": [[165, 2, 2, "", "kwargs", "Sampling factory function"], [165, 2, 2, "", "samp_name", "Sampling factory function"]], "iwopy.interfaces.pymoo.Factory.get_termination": [[166, 2, 2, "", "term_pars", "Termination factory function"]], "iwopy.interfaces.pymoo.Factory.print": [[167, 2, 2, "", "args", ""], [167, 2, 2, "", "kwargs", ""]], "iwopy.interfaces.pymoo.MultiObjProblemTemplate": [[169, 1, 1, "", "__init__", "Constructor template, will be overwritten by get_class"], [170, 1, 1, "", "finalize", "Finalize the problem."], [171, 1, 1, "", "get_class", "Creates the class, dynamically derived from SingleObjProblem"]], "iwopy.interfaces.pymoo.MultiObjProblemTemplate.__init__": [[169, 2, 2, "", "problem", "Constructor template, will be overwritten by get_class"], [169, 2, 2, "", "vectorize", "Constructor template, will be overwritten by get_class"]], "iwopy.interfaces.pymoo.MultiObjProblemTemplate.finalize": [[170, 2, 2, "", "pymoo_results", "Finalize the problem."], [170, 2, 2, "", "verbosity", "Finalize the problem."]], "iwopy.interfaces.pymoo.Optimizer_pymoo": [[173, 1, 1, "", "__init__", "Constructor"], [174, 1, 1, "", "get_figure_f", "Create a figure that shows the objective function development during optimization."], [175, 1, 1, "", "initialize", "Initialize the object."], [176, 1, 1, "", "print_info", "Print solver info, called before solving"], [177, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.interfaces.pymoo.Optimizer_pymoo.__init__": [[173, 2, 2, "", "algo_pars", "Constructor"], [173, 2, 2, "", "problem", "Constructor"], [173, 2, 2, "", "problem_pars", "Constructor"], [173, 2, 2, "", "setup_pars", "Constructor"], [173, 2, 2, "", "term_pars", "Constructor"]], "iwopy.interfaces.pymoo.Optimizer_pymoo.get_figure_f": [[174, 2, 2, "", "ax", "Create a figure that shows the objective function development during optimization."], [174, 2, 2, "", "fig", "Create a figure that shows the objective function development during optimization."], [174, 2, 2, "", "kwargs", "Create a figure that shows the objective function development during optimization."], [174, 2, 2, "", "valid_dict", "Create a figure that shows the objective function development during optimization."]], "iwopy.interfaces.pymoo.Optimizer_pymoo.initialize": [[175, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.interfaces.pymoo.Optimizer_pymoo.solve": [[177, 2, 2, "", "callback", "Run the optimization solver."], [177, 2, 2, "", "verbosity", "Run the optimization solver."]], "iwopy.interfaces.pymoo.SingleObjProblemTemplate": [[179, 1, 1, "", "__init__", "Constructor"], [180, 1, 1, "", "finalize", "Finalize the problem."], [181, 1, 1, "", "get_class", "Creates the class, dynamically derived from pymoo.Problem"]], "iwopy.interfaces.pymoo.SingleObjProblemTemplate.__init__": [[179, 2, 2, "", "problem", "Constructor"], [179, 2, 2, "", "vectorize", "Constructor"]], "iwopy.interfaces.pymoo.SingleObjProblemTemplate.finalize": [[180, 2, 2, "", "pymoo_results", "Finalize the problem."], [180, 2, 2, "", "verbosity", "Finalize the problem."]], "iwopy.interfaces.pymoo.load": [[182, 2, 2, "", "verbosity", "Loads the pymoo package dynamically"]], "iwopy.interfaces.scipy": [[183, 0, 1, "", "Optimizer_scipy", "Interface to the scipy optimizers."]], "iwopy.interfaces.scipy.Optimizer_scipy": [[184, 1, 1, "", "__init__", "Constructor"], [185, 1, 1, "", "initialize", "Initialize the object."], [186, 1, 1, "", "print_info", "Print solver info, called before solving"], [187, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.interfaces.scipy.Optimizer_scipy.__init__": [[184, 2, 2, "", "kwargs", "Constructor"], [184, 2, 2, "", "mem_size", "Constructor"], [184, 2, 2, "", "problem", "Constructor"], [184, 2, 2, "", "scipy_pars", "Constructor"]], "iwopy.interfaces.scipy.Optimizer_scipy.initialize": [[185, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.interfaces.scipy.Optimizer_scipy.solve": [[187, 2, 2, "", "verbosity", "Run the optimization solver."]], "iwopy.optimizers": [[188, 0, 1, "", "GG", "Greedy Gradient (GG) optimizer, for local optimum search with constraints."]], "iwopy.optimizers.GG": [[189, 1, 1, "", "__init__", "Constructor"], [190, 1, 1, "", "initialize", "Initialize the object."], [191, 1, 1, "", "print_info", "Print solver info, called before solving"], [192, 1, 1, "", "solve", "Run the optimization solver."]], "iwopy.optimizers.GG.__init__": [[189, 2, 2, "", "f_tol", "Constructor"], [189, 2, 2, "", "memory_size", "Constructor"], [189, 2, 2, "", "n_max_steps", "Constructor"], [189, 2, 2, "", "name", "Constructor"], [189, 2, 2, "", "problem", "Constructor"], [189, 2, 2, "", "step_div_factor", "Constructor"], [189, 2, 2, "", "step_max", "Constructor"], [189, 2, 2, "", "step_min", "Constructor"], [189, 2, 2, "", "vectorized", "Constructor"]], "iwopy.optimizers.GG.initialize": [[190, 2, 2, "", "verbosity", "Initialize the object."]], "iwopy.optimizers.GG.solve": [[192, 2, 2, "", "verbosity", "Run the optimization solver."]], "iwopy.utils": [[193, 0, 1, "", "RegularDiscretizationGrid", "A lightweight regular grid in n dimensions, without points storage."], [224, 5, 1, "", "import_module", "Imports a module dynamically."], [225, 5, 1, "", "suppress_stdout", "Surpresses print outputs"]], "iwopy.utils.RegularDiscretizationGrid": [[194, 4, 1, "", "INT_INF", ""], [195, 1, 1, "", "__init__", "Constructor"], [196, 1, 1, "", "all_gridpoints", "Checks if all points are on grid."], [197, 1, 1, "", "apply_tol", "Get tolerance corrected point"], [198, 1, 1, "", "apply_tols", "Get tolerance corrected points"], [199, 1, 1, "", "deriv_coeffs", "Calculates the derivative coefficients at points."], [200, 1, 1, "", "deriv_coeffs_gridpoints", "Calculates the derivative coefficients at grid points."], [201, 1, 1, "", "find_grid_inds", "Finds indices that are on grid"], [202, 1, 1, "", "find_gridpoints", "Finds points that are on grid."], [203, 1, 1, "", "find_ingrid", "Finds points that are on grid."], [204, 1, 1, "", "get_cell", "Get the grid cell that contains a point."], [205, 1, 1, "", "get_cells", "Get the grid cells that contain the given points, one cell per point."], [206, 1, 1, "", "get_corner", "Get the lower-left grid corner of a point."], [207, 1, 1, "", "get_corners", "Get the lower-left grid corners of points."], [208, 1, 1, "", "gp2i", "Get grid index of a grid point"], [209, 1, 1, "", "gpts2inds", "Get grid indices of grid points."], [210, 1, 1, "", "grad_coeffs", "Calculates the gradient coefficients at grid points."], [211, 1, 1, "", "grad_coeffs_gridpoints", "Calculates the gradient coefficients at grid points."], [212, 1, 1, "", "i2gp", "Translates grid point indices to grid point."], [213, 1, 1, "", "in_grid", "Checks if a point is located within the grid."], [214, 1, 1, "", "inds2gpts", "Translates grid point indices to grid points."], [215, 1, 1, "", "interpolation_coeffs_point", "Get the interpolation coefficients for a point."], [216, 1, 1, "", "interpolation_coeffs_points", "Get the interpolation coefficients for a set of points."], [217, 1, 1, "", "is_gridi", "Checks if grid indices are valid"], [218, 1, 1, "", "is_gridpoint", "Checks if a point is on grid."], [219, 3, 1, "", "n_dims", "The number of dimensions"], [220, 3, 1, "", "n_points", "The number of points in each dimension"], [221, 3, 1, "", "p_max", "The maximal grid point values"], [222, 3, 1, "", "p_min", "The minimal grid point values"], [223, 1, 1, "", "print_info", "Prints basic information"]], "iwopy.utils.RegularDiscretizationGrid.__init__": [[195, 2, 2, "", "deltas", "Constructor"], [195, 2, 2, "", "digits", "Constructor"], [195, 2, 2, "", "interpolation", "Constructor"], [195, 2, 2, "", "n_steps", "Constructor"], [195, 2, 2, "", "origin", "Constructor"], [195, 2, 2, "", "tol", "Constructor"]], "iwopy.utils.RegularDiscretizationGrid.all_gridpoints": [[196, 2, 2, "", "allow_outer", "Checks if all points are on grid."], [196, 2, 2, "", "pts", "Checks if all points are on grid."]], "iwopy.utils.RegularDiscretizationGrid.apply_tol": [[197, 2, 2, "", "p", "Get tolerance corrected point"]], "iwopy.utils.RegularDiscretizationGrid.apply_tols": [[198, 2, 2, "", "pts", "Get tolerance corrected points"]], "iwopy.utils.RegularDiscretizationGrid.deriv_coeffs": [[199, 2, 2, "", "order", "Calculates the derivative coefficients at points."], [199, 2, 2, "", "orderb", "Calculates the derivative coefficients at points."], [199, 2, 2, "", "pts", "Calculates the derivative coefficients at points."], [199, 2, 2, "", "var", "Calculates the derivative coefficients at points."]], "iwopy.utils.RegularDiscretizationGrid.deriv_coeffs_gridpoints": [[200, 2, 2, "", "inds", "Calculates the derivative coefficients at grid points."], [200, 2, 2, "", "order", "Calculates the derivative coefficients at grid points."], [200, 2, 2, "", "orderb", "Calculates the derivative coefficients at grid points."], [200, 2, 2, "", "var", "Calculates the derivative coefficients at grid points."]], "iwopy.utils.RegularDiscretizationGrid.find_grid_inds": [[201, 2, 2, "", "inds", "Finds indices that are on grid"]], "iwopy.utils.RegularDiscretizationGrid.find_gridpoints": [[202, 2, 2, "", "allow_outer", "Finds points that are on grid."], [202, 2, 2, "", "pts", "Finds points that are on grid."], [202, 2, 2, "", "ret_inds", "Finds points that are on grid."]], "iwopy.utils.RegularDiscretizationGrid.find_ingrid": [[203, 2, 2, "", "pts", "Finds points that are on grid."]], "iwopy.utils.RegularDiscretizationGrid.get_cell": [[204, 2, 2, "", "p", "Get the grid cell that contains a point."]], "iwopy.utils.RegularDiscretizationGrid.get_cells": [[205, 2, 2, "", "pts", "Get the grid cells that contain the given points, one cell per point."]], "iwopy.utils.RegularDiscretizationGrid.get_corner": [[206, 2, 2, "", "allow_outer", "Get the lower-left grid corner of a point."], [206, 2, 2, "", "p", "Get the lower-left grid corner of a point."]], "iwopy.utils.RegularDiscretizationGrid.get_corners": [[207, 2, 2, "", "allow_outer", "Get the lower-left grid corners of points."], [207, 2, 2, "", "pts", "Get the lower-left grid corners of points."]], "iwopy.utils.RegularDiscretizationGrid.gp2i": [[208, 2, 2, "", "allow_outer", "Get grid index of a grid point"], [208, 2, 2, "", "error", "Get grid index of a grid point"], [208, 2, 2, "", "gp", "Get grid index of a grid point"]], "iwopy.utils.RegularDiscretizationGrid.gpts2inds": [[209, 2, 2, "", "allow_outer", "Get grid indices of grid points."], [209, 2, 2, "", "error", "Get grid indices of grid points."], [209, 2, 2, "", "gpts", "Get grid indices of grid points."]], "iwopy.utils.RegularDiscretizationGrid.grad_coeffs": [[210, 2, 2, "", "order", "Calculates the gradient coefficients at grid points."], [210, 2, 2, "", "orderb", "Calculates the gradient coefficients at grid points."], [210, 2, 2, "", "pts", "Calculates the gradient coefficients at grid points."], [210, 2, 2, "", "vars", "Calculates the gradient coefficients at grid points."]], "iwopy.utils.RegularDiscretizationGrid.grad_coeffs_gridpoints": [[211, 2, 2, "", "inds", "Calculates the gradient coefficients at grid points."], [211, 2, 2, "", "order", "Calculates the gradient coefficients at grid points."], [211, 2, 2, "", "orderb", "Calculates the gradient coefficients at grid points."], [211, 2, 2, "", "vars", "Calculates the gradient coefficients at grid points."]], "iwopy.utils.RegularDiscretizationGrid.i2gp": [[212, 2, 2, "", "error", "Translates grid point indices to grid point."], [212, 2, 2, "", "inds", "Translates grid point indices to grid point."]], "iwopy.utils.RegularDiscretizationGrid.in_grid": [[213, 2, 2, "", "p", "Checks if a point is located within the grid."]], "iwopy.utils.RegularDiscretizationGrid.inds2gpts": [[214, 2, 2, "", "inds", "Translates grid point indices to grid points."]], "iwopy.utils.RegularDiscretizationGrid.interpolation_coeffs_point": [[215, 2, 2, "", "p", "Get the interpolation coefficients for a point."]], "iwopy.utils.RegularDiscretizationGrid.interpolation_coeffs_points": [[216, 2, 2, "", "pts", "Get the interpolation coefficients for a set of points."], [216, 2, 2, "", "ret_pmap", "Get the interpolation coefficients for a set of points."]], "iwopy.utils.RegularDiscretizationGrid.is_gridi": [[217, 2, 2, "", "inds", "Checks if grid indices are valid"]], "iwopy.utils.RegularDiscretizationGrid.is_gridpoint": [[218, 2, 2, "", "allow_outer", "Checks if a point is on grid."], [218, 2, 2, "", "p", "Checks if a point is on grid."], [218, 2, 2, "", "ret_inds", "Checks if a point is on grid."]], "iwopy.utils.RegularDiscretizationGrid.print_info": [[223, 2, 2, "", "spaces", "Prints basic information"]], "iwopy.utils.import_module": [[224, 2, 2, "", "hint", "Imports a module dynamically."], [224, 2, 2, "", "name", "Imports a module dynamically."], [224, 2, 2, "", "package", "Imports a module dynamically."]], "iwopy.utils.suppress_stdout": [[225, 2, 2, "", "silent", "Surpresses print outputs"]], "iwopy.wrappers": [[226, 0, 1, "", "DiscretizeRegGrid", "A wrapper that provides finite distance differentiation on a regular grid for selected or all problem float variables."], [235, 0, 1, "", "LocalFD", "A wrapper that provides finite distance differentiation by local stepwise evaluation."], [239, 0, 1, "", "ProblemWrapper", "Generic abstract problem wrapper class."], [254, 0, 1, "", "SimpleConstraint", "A simple constraint that assumes the same variables as defined by the problem."], [263, 0, 1, "", "SimpleObjective", "A simple objective that assumes the same variables as defined by the problem."], [273, 0, 1, "", "SimpleProblem", "A problem which simply pipes variables to its objectives and constraints."]], "iwopy.wrappers.DiscretizeRegGrid": [[227, 1, 1, "", "__init__", "Constructor"], [228, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [229, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [230, 1, 1, "", "evaluate_individual", "Evaluate a single individual of the problem."], [231, 1, 1, "", "evaluate_population", "Evaluate all individuals of a population."], [232, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [233, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [234, 1, 1, "", "initialize", "Initialize the problem."]], "iwopy.wrappers.DiscretizeRegGrid.__init__": [[227, 2, 2, "", "base_problem", "Constructor"], [227, 2, 2, "", "deltas", "Constructor"], [227, 2, 2, "", "dpars", "Constructor"], [227, 2, 2, "", "fd_bounds_order", "Constructor"], [227, 2, 2, "", "fd_order", "Constructor"], [227, 2, 2, "", "mem_size", "Constructor"], [227, 2, 2, "", "name", "Constructor"]], "iwopy.wrappers.DiscretizeRegGrid.apply_individual": [[228, 2, 2, "", "vars_float", "Apply new variables to the problem."], [228, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "iwopy.wrappers.DiscretizeRegGrid.apply_population": [[229, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [229, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "iwopy.wrappers.DiscretizeRegGrid.evaluate_individual": [[230, 2, 2, "", "ret_prob_res", "Evaluate a single individual of the problem."], [230, 2, 2, "", "vars_float", "Evaluate a single individual of the problem."], [230, 2, 2, "", "vars_int", "Evaluate a single individual of the problem."]], "iwopy.wrappers.DiscretizeRegGrid.evaluate_population": [[231, 2, 2, "", "ret_prob_res", "Evaluate all individuals of a population."], [231, 2, 2, "", "vars_float", "Evaluate all individuals of a population."], [231, 2, 2, "", "vars_int", "Evaluate all individuals of a population."]], "iwopy.wrappers.DiscretizeRegGrid.finalize_individual": [[232, 2, 2, "", "vars_float", "Finalization, given the champion data."], [232, 2, 2, "", "vars_int", "Finalization, given the champion data."], [232, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "iwopy.wrappers.DiscretizeRegGrid.finalize_population": [[233, 2, 2, "", "vars_float", "Finalization, given the final population data."], [233, 2, 2, "", "vars_int", "Finalization, given the final population data."], [233, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "iwopy.wrappers.DiscretizeRegGrid.initialize": [[234, 2, 2, "", "verbosity", "Initialize the problem."]], "iwopy.wrappers.LocalFD": [[236, 1, 1, "", "__init__", "Constructor"], [237, 1, 1, "", "calc_gradients", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [238, 1, 1, "", "initialize", "Initialize the problem."]], "iwopy.wrappers.LocalFD.__init__": [[236, 2, 2, "", "base_problem", "Constructor"], [236, 2, 2, "", "deltas", "Constructor"], [236, 2, 2, "", "fd_bounds_order", "Constructor"], [236, 2, 2, "", "fd_order", "Constructor"], [236, 2, 2, "", "name", "Constructor"]], "iwopy.wrappers.LocalFD.calc_gradients": [[237, 2, 2, "", "components", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [237, 2, 2, "", "func", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [237, 2, 2, "", "fvars", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [237, 2, 2, "", "ivars", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [237, 2, 2, "", "pop", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [237, 2, 2, "", "vars_float", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [237, 2, 2, "", "vars_int", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [237, 2, 2, "", "verbosity", "The actual gradient calculation, not to be called directly (call get_gradients instead)."], [237, 2, 2, "", "vrs", "The actual gradient calculation, not to be called directly (call get_gradients instead)."]], "iwopy.wrappers.LocalFD.initialize": [[238, 2, 2, "", "verbosity", "Initialize the problem."]], "iwopy.wrappers.ProblemWrapper": [[240, 1, 1, "", "__init__", "Constructor"], [241, 1, 1, "", "apply_individual", "Apply new variables to the problem."], [242, 1, 1, "", "apply_population", "Apply new variables to the problem, for a whole population."], [243, 1, 1, "", "finalize_individual", "Finalization, given the champion data."], [244, 1, 1, "", "finalize_population", "Finalization, given the final population data."], [245, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [246, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [247, 1, 1, "", "initialize", "Initialize the problem."], [248, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [249, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [250, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [251, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [252, 1, 1, "", "var_names_float", "The names of float variables."], [253, 1, 1, "", "var_names_int", "The names of integer variables."]], "iwopy.wrappers.ProblemWrapper.__init__": [[240, 2, 2, "", "base_problem", "Constructor"], [240, 2, 2, "", "kwargs", "Constructor"], [240, 2, 2, "", "name", "Constructor"]], "iwopy.wrappers.ProblemWrapper.apply_individual": [[241, 2, 2, "", "vars_float", "Apply new variables to the problem."], [241, 2, 2, "", "vars_int", "Apply new variables to the problem."]], "iwopy.wrappers.ProblemWrapper.apply_population": [[242, 2, 2, "", "vars_float", "Apply new variables to the problem, for a whole population."], [242, 2, 2, "", "vars_int", "Apply new variables to the problem, for a whole population."]], "iwopy.wrappers.ProblemWrapper.finalize_individual": [[243, 2, 2, "", "vars_float", "Finalization, given the champion data."], [243, 2, 2, "", "vars_int", "Finalization, given the champion data."], [243, 2, 2, "", "verbosity", "Finalization, given the champion data."]], "iwopy.wrappers.ProblemWrapper.finalize_population": [[244, 2, 2, "", "vars_float", "Finalization, given the final population data."], [244, 2, 2, "", "vars_int", "Finalization, given the final population data."], [244, 2, 2, "", "verbosity", "Finalization, given the final population data."]], "iwopy.wrappers.ProblemWrapper.initialize": [[247, 2, 2, "", "verbosity", "Initialize the problem."]], "iwopy.wrappers.SimpleConstraint": [[255, 1, 1, "", "__init__", "Constructor"], [256, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [257, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [258, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [259, 1, 1, "", "f", "The function."], [260, 1, 1, "", "g", "The analytical derivative of the function f, df/dvar, if available."], [261, 1, 1, "", "get_bounds", "Returns the bounds for all components."], [262, 1, 1, "", "n_components", "Returns the number of components of the function."]], "iwopy.wrappers.SimpleConstraint.__init__": [[255, 2, 2, "", "cnames", "Constructor"], [255, 2, 2, "", "has_ana_derivs", "Constructor"], [255, 2, 2, "", "maxs", "Constructor"], [255, 2, 2, "", "mins", "Constructor"], [255, 2, 2, "", "n_components", "Constructor"], [255, 2, 2, "", "name", "Constructor"], [255, 2, 2, "", "problem", "Constructor"]], "iwopy.wrappers.SimpleConstraint.ana_deriv": [[256, 2, 2, "", "components", "Calculates the analytic derivative, if possible."], [256, 2, 2, "", "var", "Calculates the analytic derivative, if possible."], [256, 2, 2, "", "vars_float", "Calculates the analytic derivative, if possible."], [256, 2, 2, "", "vars_int", "Calculates the analytic derivative, if possible."]], "iwopy.wrappers.SimpleConstraint.calc_individual": [[257, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [257, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [257, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [257, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "iwopy.wrappers.SimpleConstraint.calc_population": [[258, 2, 2, "", "components", "Calculate values for all individuals of a population."], [258, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [258, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [258, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "iwopy.wrappers.SimpleConstraint.f": [[259, 2, 2, "", "x", "The function."]], "iwopy.wrappers.SimpleConstraint.g": [[260, 2, 2, "", "components", "The analytical derivative of the function f, df/dvar, if available."], [260, 2, 2, "", "var", "The analytical derivative of the function f, df/dvar, if available."], [260, 2, 2, "", "x", "The analytical derivative of the function f, df/dvar, if available."]], "iwopy.wrappers.SimpleObjective": [[264, 1, 1, "", "__init__", "Constructor"], [265, 1, 1, "", "ana_deriv", "Calculates the analytic derivative, if possible."], [266, 1, 1, "", "calc_individual", "Calculate values for a single individual of the underlying problem."], [267, 1, 1, "", "calc_population", "Calculate values for all individuals of a population."], [268, 1, 1, "", "f", "The function."], [269, 1, 1, "", "g", "The analytical derivative of the function f, df/dvar, if available."], [270, 3, 1, "", "has_ana_derivs", "Returns analyical derivatives flag"], [271, 1, 1, "", "maximize", "Returns flag for maximization of each component."], [272, 1, 1, "", "n_components", "Returns the number of components of the function."]], "iwopy.wrappers.SimpleObjective.__init__": [[264, 2, 2, "", "cnames", "Constructor"], [264, 2, 2, "", "has_ana_derivs", "Constructor"], [264, 2, 2, "", "maximize", "Constructor"], [264, 2, 2, "", "n_components", "Constructor"], [264, 2, 2, "", "name", "Constructor"], [264, 2, 2, "", "problem", "Constructor"]], "iwopy.wrappers.SimpleObjective.ana_deriv": [[265, 2, 2, "", "components", "Calculates the analytic derivative, if possible."], [265, 2, 2, "", "var", "Calculates the analytic derivative, if possible."], [265, 2, 2, "", "vars_float", "Calculates the analytic derivative, if possible."], [265, 2, 2, "", "vars_int", "Calculates the analytic derivative, if possible."]], "iwopy.wrappers.SimpleObjective.calc_individual": [[266, 2, 2, "", "components", "Calculate values for a single individual of the underlying problem."], [266, 2, 2, "", "problem_results", "Calculate values for a single individual of the underlying problem."], [266, 2, 2, "", "vars_float", "Calculate values for a single individual of the underlying problem."], [266, 2, 2, "", "vars_int", "Calculate values for a single individual of the underlying problem."]], "iwopy.wrappers.SimpleObjective.calc_population": [[267, 2, 2, "", "components", "Calculate values for all individuals of a population."], [267, 2, 2, "", "problem_results", "Calculate values for all individuals of a population."], [267, 2, 2, "", "vars_float", "Calculate values for all individuals of a population."], [267, 2, 2, "", "vars_int", "Calculate values for all individuals of a population."]], "iwopy.wrappers.SimpleObjective.f": [[268, 2, 2, "", "x", "The function."]], "iwopy.wrappers.SimpleObjective.g": [[269, 2, 2, "", "components", "The analytical derivative of the function f, df/dvar, if available."], [269, 2, 2, "", "var", "The analytical derivative of the function f, df/dvar, if available."], [269, 2, 2, "", "x", "The analytical derivative of the function f, df/dvar, if available."]], "iwopy.wrappers.SimpleProblem": [[274, 1, 1, "", "__init__", "Constructor"], [275, 1, 1, "", "initial_values_float", "The initial values of the float variables."], [276, 1, 1, "", "initial_values_int", "The initial values of the integer variables."], [277, 1, 1, "", "max_values_float", "The maximal values of the float variables."], [278, 1, 1, "", "max_values_int", "The maximal values of the integer variables."], [279, 1, 1, "", "min_values_float", "The minimal values of the float variables."], [280, 1, 1, "", "min_values_int", "The minimal values of the integer variables."], [281, 1, 1, "", "var_names_float", "The names of float variables."], [282, 1, 1, "", "var_names_int", "The names of integer variables."]], "iwopy.wrappers.SimpleProblem.__init__": [[274, 2, 2, "", "float_vars", "Constructor"], [274, 2, 2, "", "init_values_float", "Constructor"], [274, 2, 2, "", "init_values_int", "Constructor"], [274, 2, 2, "", "int_vars", "Constructor"], [274, 2, 2, "", "kwargs", "Constructor"], [274, 2, 2, "", "max_values_float", "Constructor"], [274, 2, 2, "", "max_values_int", "Constructor"], [274, 2, 2, "", "min_values_float", "Constructor"], [274, 2, 2, "", "min_values_int", "Constructor"], [274, 2, 2, "", "name", "Constructor"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:parameter", "3": "py:property", "4": "py:attribute", "5": "py:function"}, "terms": {"": [0, 1, 34, 38, 75, 91, 96, 104, 125, 237, 283, 285, 291, 296, 298, 299, 300, 301], "0": [1, 5, 6, 7, 8, 11, 12, 13, 16, 17, 19, 21, 22, 34, 38, 39, 41, 47, 48, 49, 59, 65, 66, 68, 75, 80, 84, 86, 88, 89, 92, 93, 96, 97, 98, 102, 103, 104, 107, 123, 132, 134, 135, 136, 138, 155, 170, 175, 177, 180, 182, 185, 187, 188, 189, 190, 192, 193, 195, 223, 226, 232, 233, 234, 235, 237, 238, 239, 243, 244, 247, 254, 255, 260, 263, 269, 273, 296, 298, 299, 300, 301], "00": [298, 299, 300, 301], "001922e": 298, "003962e": 299, "004978e": 298, "005823e": 299, "007586e": 298, "008532e": 299, "009250e": 299, "01": [298, 299], "02": [298, 299], "020000e": 299, "03": 298, "030000e": 299, "04": [298, 300], "042442e": 298, "047046e": 298, "047608e": 298, "05": [19, 20, 298], "052208e": 298, "053750e": 299, "053824e": 298, "06": 298, "06014": 294, "061685e": 298, "064096e": 298, "066317e": 298, "069032e": 298, "07": 298, "08": [189, 298, 301], "082072e": 298, "085500e": 299, "086939e": 298, "087311e": 298, "088348e": 298, "09": 298, "090210e": 298, "092386e": 298, "098864e": 298, "099603e": 298, "1": [1, 5, 6, 7, 8, 11, 34, 38, 47, 48, 65, 66, 84, 86, 88, 89, 102, 107, 130, 132, 134, 135, 138, 155, 168, 170, 172, 175, 177, 178, 180, 182, 183, 185, 187, 188, 192, 193, 199, 200, 210, 211, 226, 227, 232, 234, 235, 236, 238, 239, 243, 254, 255, 260, 263, 264, 269, 273, 287, 288, 296, 298, 299, 300, 301], "10": [1, 11, 12, 188, 189, 294, 297, 298, 299, 300, 301], "100": [7, 8, 183, 184, 189, 298, 300, 301], "1000": [227, 299], "100000e": [299, 301], "102": 294, "106500e": 299, "11": [296, 297, 298, 299, 301], "111336e": 298, "112099e": 298, "12": [1, 195, 296, 297, 298, 299], "120": 299, "120000e": 299, "120221e": 298, "122978e": 298, "127440e": 298, "129005e": 298, "13": [296, 298, 299], "130000e": 299, "14": [296, 298, 299], "140000e": 299, "140025e": 298, "141494e": 298, "144952e": 298, "146349e": 298, "15": [1, 296, 298, 299], "150000e": 299, "151292e": 298, "152908e": 298, "153245e": 298, "16": [298, 299, 301], "160": 299, "161302e": 298, "163198e": 298, "166486e": 298, "17": [298, 299], "170680e": 298, "175796e": 298, "179612e": 298, "179930e": 298, "18": [298, 299], "180": 300, "180473e": 298, "19": [298, 299], "192331e": 298, "194387e": 298, "199172e": 298, "199634e": 298, "1e": [19, 20, 189, 298, 299, 300, 301], "2": [1, 7, 193, 199, 200, 204, 205, 210, 211, 226, 227, 235, 236, 296, 298, 299, 300, 301], "20": [298, 299], "200": [299, 300], "2024": 294, "21": [298, 299], "21105": 294, "211760e": 298, "2125702": 225, "213613e": 298, "215000e": 299, "22": [298, 299], "225390e": 298, "227472e": 298, "23": [298, 299], "232622e": 298, "233574e": 298, "235636e": 298, "236112e": 298, "239395e": 298, "24": [298, 299], "240": 299, "240002e": 298, "240040e": 298, "246986e": 298, "247216e": 298, "249910e": 298, "25": [298, 299], "255719e": 298, "258628e": 298, "26": 298, "262789e": 298, "27": 298, "272775e": 298, "275": 1, "275371e": 298, "276369e": 298, "28": 298, "280": 299, "283250e": 299, "288465e": 298, "29": 298, "290250e": 299, "290517e": 298, "293392e": 298, "3": [296, 297, 298, 299, 300, 301], "30": 298, "300": 298, "309271e": 298, "31": 298, "314707e": 298, "315": 299, "32": 298, "320": 299, "327298e": 298, "33": 298, "331988e": 298, "34": 298, "344344e": 298, "345300e": 298, "345435e": 298, "35": 298, "351725e": 298, "354546e": 298, "358615e": 298, "36": [298, 300], "360": [299, 300], "363": 299, "366573e": 298, "37": 298, "370": 299, "371277e": 298, "38": 298, "382281e": 298, "383923e": 298, "389087e": 298, "39": [298, 299, 300, 301], "390472e": 298, "391485e": 298, "396197e": 298, "397887": 1, "398633e": 298, "3rd": 300, "4": [1, 296, 298, 299, 300, 301], "40": [298, 299], "400": 299, "402227e": 298, "408324e": 298, "41": 298, "410000e": 299, "414893e": 298, "417813e": 298, "419237e": 298, "42": [298, 299, 300], "420385e": 298, "421637e": 298, "4223663384882": 300, "423500e": 299, "424350e": 298, "424672e": 298, "42478": 1, "429528e": 298, "43": 298, "431231e": 298, "435152e": 298, "436554e": 298, "437065e": 298, "44": 298, "440": 299, "444495e": 298, "45": 298, "453717e": 298, "458509e": 298, "459065e": 298, "46": 298, "460000e": 299, "463435e": 298, "47": 298, "470148e": 298, "470885e": 298, "475": 1, "48": 298, "480": 299, "484520e": 298, "485097e": 298, "49": 298, "5": [1, 11, 12, 34, 38, 296, 298, 299, 300, 301], "50": [34, 38, 298], "505766e": 298, "51": 298, "516980e": 298, "517358e": 298, "52": 298, "520": 299, "527966e": 298, "53": 298, "530091e": 298, "531000e": 299, "536083e": 298, "536876e": 298, "54": 298, "541352e": 299, "547500e": 299, "548850e": 298, "549782e": 298, "55": 298, "552179e": 298, "553991e": 298, "56": 298, "560": 299, "562191e": 298, "568959e": 298, "57": 298, "5754719667092": 298, "579257e": 298, "579416e": 298, "58": 298, "585": 298, "58590497552491": 300, "587500e": 299, "59": 298, "595215e": 298, "599746e": 298, "6": [1, 296, 298, 299, 300, 301], "60": 298, "600": 299, "600000e": 301, "6014": 294, "606192e": 298, "606218e": 298, "607438e": 298, "608240e": 298, "61": 298, "615375e": 298, "615461e": 298, "617500e": 299, "62": 298, "624664e": 298, "63": 298, "630003e": 298, "639390e": 298, "64": 298, "640": 299, "640000e": 299, "642586e": 298, "645875e": 298, "65": 298, "652250e": 299, "652947e": 298, "657750e": 298, "658783e": 298, "66": 298, "66552658619115e": 301, "665527e": 301, "67": 298, "670812e": 298, "673215e": 298, "68": 298, "680": 299, "681007e": 298, "683691e": 298, "69": 298, "697765e": 298, "69922244245727": 298, "699806e": 298, "7": [296, 297, 298, 299, 300, 301], "70": 298, "700000e": 299, "701957e": 298, "702197e": 298, "71": 298, "712766e": 298, "72": 298, "720": 299, "722163e": 298, "729153e": 298, "73": 298, "730500e": 299, "74": [298, 300], "740609e": 298, "742264e": 298, "743000e": 299, "743332e": 298, "75": 298, "750000e": 299, "750043e": 298, "757321e": 298, "76": 298, "760": 299, "762982e": 298, "765166e": 298, "77": 298, "78": 298, "79": 298, "795050e": 298, "796535e": 298, "796963e": 298, "797687e": 298, "8": [1, 296, 297, 298, 299, 300, 301], "80": [298, 299], "800": 299, "800000e": 299, "801432e": 298, "801572e": 298, "802090e": 298, "806220e": 298, "81": 298, "810981e": 298, "811203e": 298, "812000e": 299, "819316e": 298, "82": 298, "821135e": 298, "827574e": 298, "828613e": 298, "83": 298, "831121e": 299, "834537e": 298, "834607e": 298, "84": 298, "840": 299, "845131e": 298, "849789e": 298, "85": 298, "855755e": 298, "858055e": 298, "86": 298, "860000e": 299, "869922e": 298, "87": 298, "878439e": 298, "88": 298, "880": 299, "886000e": 299, "887334e": 298, "887607e": 298, "89": 298, "890000e": 299, "890124e": 298, "9": [1, 294, 296, 297, 298, 299, 300, 301], "90": [298, 299], "900000e": 299, "900849e": 298, "900949e": 298, "902047e": 298, "903010e": 298, "906946e": 298, "907955e": 298, "91": 298, "910000e": 299, "911250e": 299, "911636e": 298, "913568e": 298, "92": 298, "920": 299, "925003e": 298, "93": 298, "931458e": 298, "932276e": 298, "938612e": 298, "94": 298, "942042e": 298, "943250e": 299, "944930e": 298, "949815e": 298, "95": 298, "953370e": 298, "96": 298, "960": 299, "960526e": 298, "97": 298, "972586e": 298, "973250e": 299, "976805e": 298, "98": 298, "980000e": 299, "981631e": 298, "982356e": 298, "99": 298, "990310e": 298, "991725e": 298, "992287e": 298, "993564e": 298, "999775e": 298, "999799e": 298, "999989e": 298, "999999": [5, 11, 89, 90, 193, 194, 226, 235, 239, 273], "A": [0, 59, 75, 160, 193, 226, 235, 254, 263, 273, 285, 288, 292, 293, 300, 301, 303], "As": [297, 298], "At": [168, 178], "By": 104, "For": [59, 259, 260, 264, 268, 269, 296, 297, 298, 300, 302], "If": [42, 302], "In": [298, 299, 300, 301], "It": [296, 297, 298], "Of": 298, "One": [298, 300], "Such": 297, "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 138, 155, 168, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 290, 294, 296, 297, 298, 299, 300, 301, 302], "Then": 297, "There": [298, 300, 301], "These": [298, 299], "To": 295, "Will": [227, 236], "With": 298, "__init__": [298, 299, 300, 301], "__str__": [1, 5, 7, 11, 13, 15, 19, 34, 36, 39, 41, 59, 75, 84, 89, 123, 125, 127, 130, 172, 183, 188, 226, 235, 239, 254, 263, 273], "abl": 298, "about": 300, "abov": [296, 297, 301], "abstract": [19, 39, 40, 41, 50, 84, 88, 89, 239, 254, 259, 263, 268, 283, 285, 290, 293, 296], "access": [290, 296], "accord": 300, "accordingli": 298, "accur": [160, 161], "achiev": 296, "activ": 297, "actual": [5, 11, 89, 96, 226, 235, 237, 239, 273, 297, 300], "ad": [0, 59, 67, 70, 104, 123, 297, 298, 300, 301], "adapt": [135, 287], "add": [5, 11, 59, 62, 89, 92, 93, 123, 174, 226, 235, 239, 273, 298, 300, 301], "add_constraint": [5, 11, 89, 92, 226, 235, 239, 273, 298, 300, 301], "add_object": [5, 11, 89, 93, 226, 235, 239, 273, 298, 299, 300, 301], "add_patch": [298, 299, 300], "addig": 297, "addit": [129, 183, 184, 227, 240, 274, 296, 301], "addition": [100, 101, 202, 216, 218, 230, 231, 301], "adjust": [227, 236, 298, 299, 300], "advanc": 298, "advic": [224, 297], "after": [84, 86, 130, 172, 183, 188, 297, 301], "afterward": 297, "again": [0, 297, 298], "aim": 300, "algo": [128, 129, 130, 172], "algo_par": [130, 131, 172, 173, 298, 299, 300], "algofactori": [128, 129, 287], "algorithm": [0, 128, 129, 130, 156, 159, 160, 162, 172, 287, 296, 298, 299, 300], "all": [0, 1, 5, 7, 11, 19, 23, 30, 39, 41, 42, 43, 44, 45, 57, 58, 59, 61, 63, 64, 73, 74, 75, 77, 78, 79, 82, 83, 89, 96, 101, 104, 115, 116, 123, 193, 196, 210, 211, 226, 227, 231, 235, 236, 237, 239, 254, 256, 257, 258, 260, 261, 263, 265, 266, 267, 273, 274, 290, 293, 296, 297, 298, 300, 301], "all_gridpoint": [193, 196], "all_valid": 188, "allow": [196, 202, 206, 207, 208, 209, 218, 300], "allow_out": [193, 196, 202, 206, 207, 208, 209, 218], "along": 300, "alorithm": [130, 131, 172, 173], "alpha": [296, 299, 300], "alpha_": 300, "alreadi": 298, "also": [0, 296, 298, 300, 301], "altern": [297, 298], "am": 296, "among": 303, "an": [5, 11, 89, 93, 226, 235, 239, 273, 296, 297, 298, 299, 300, 301], "ana_deriv": [1, 2, 6, 7, 8, 12, 19, 39, 41, 43, 59, 61, 75, 77, 123, 254, 256, 263, 265], "analit": 270, "analy": [1, 7, 263, 270], "analyt": [1, 2, 6, 7, 8, 12, 19, 39, 41, 43, 59, 61, 75, 77, 96, 123, 237, 254, 255, 256, 260, 263, 264, 265, 269, 298, 301], "angl": 300, "ani": [44, 45, 47, 48, 63, 64, 65, 66, 78, 79, 94, 95, 102, 103, 228, 229, 232, 233, 241, 242, 243, 244, 257, 258, 266, 267, 296, 298, 300], "anoth": [0, 300], "api": [296, 298, 301], "append": [59, 62, 123], "appli": [0, 5, 11, 89, 94, 95, 226, 228, 229, 235, 239, 241, 242, 273, 300, 301], "applic": [34, 35, 44, 45, 47, 48, 63, 64, 65, 66, 78, 79, 94, 95, 102, 103, 125, 126, 228, 229, 232, 233, 241, 242, 243, 244, 257, 258, 266, 267, 303], "apply_individu": [5, 11, 89, 94, 226, 228, 235, 239, 241, 273, 298, 299, 300], "apply_popul": [5, 11, 89, 95, 226, 229, 235, 239, 242, 273, 298, 299, 300], "apply_tol": [193, 197, 198], "approach": [296, 298], "appropri": 299, "approxim": [34, 37], "ar": [0, 1, 5, 7, 11, 19, 21, 22, 23, 89, 96, 97, 98, 104, 129, 174, 188, 193, 196, 201, 202, 203, 217, 226, 235, 237, 239, 254, 259, 261, 268, 273, 296, 297, 298, 299, 300, 301, 302], "arad": 300, "arang": 299, "area": 298, "arg": [19, 20, 160, 167], "argmax": 300, "argmin": 300, "argument": 301, "around": [168, 178, 288], "arrai": [21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 35, 40, 43, 44, 45, 47, 48, 61, 63, 64, 65, 66, 77, 78, 79, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 125, 126, 195, 214, 228, 229, 230, 231, 232, 233, 237, 241, 242, 243, 244, 255, 256, 257, 258, 259, 261, 265, 266, 267, 268, 271, 274, 298, 299, 300, 301], "articl": 294, "ask": 300, "assum": [42, 254, 263, 293, 301], "attack": [298, 300], "attempt": 296, "attribut": 301, "author": 294, "autograd": 0, "avail": [27, 28, 254, 260, 263, 269, 297], "avoid": [297, 300], "await": 0, "awar": 301, "awesom": 296, "ax": [34, 38, 172, 174, 298, 299, 300], "axi": [38, 174, 298, 299, 300], "b": [1, 7, 8, 296], "backward": [199, 200, 210, 211, 226, 227, 235, 236, 300], "base": [0, 13, 14, 15, 16, 17, 18, 19, 39, 41, 84, 89, 96, 184, 237, 283, 285, 290, 293, 296, 297, 298, 300, 301, 302], "base_problem": [226, 227, 235, 236, 239, 240], "basic": [193, 223, 296], "batch_fit": [135, 137], "been": [0, 18, 296, 298], "befor": [84, 87, 130, 133, 172, 176, 183, 186, 188, 191], "begin": [298, 301], "being": [104, 298], "benchmark": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 283], "benefici": 298, "benefit": 301, "best": [34, 37, 296, 298, 299, 300, 301], "beta": 296, "between": [298, 301], "bibtex": 294, "bin": 297, "blob": 300, "bool": [2, 6, 8, 12, 18, 27, 28, 34, 35, 37, 40, 57, 58, 73, 74, 82, 83, 96, 100, 101, 104, 125, 126, 135, 136, 168, 169, 178, 179, 188, 189, 196, 201, 202, 203, 206, 207, 208, 209, 212, 213, 216, 217, 218, 225, 230, 231, 237, 255, 264, 270, 271, 298], "boolean": [21, 22, 97, 98, 111, 298, 299, 301], "both": 298, "bound": [19, 23, 193, 195, 227, 236, 254, 261, 301], "boundari": [199, 200, 210, 211, 226, 227, 235, 236], "box": [298, 299, 300], "branch": [296, 297], "branin": [1, 2, 3, 4, 5, 6], "braninobject": [1, 2, 3, 4, 284], "braninproblem": [5, 6, 284], "bug": 0, "build": 297, "bx": 1, "c": [1, 215, 216, 297, 298, 300], "c_tol": [135, 136], "calc": [215, 216], "calc_gradi": [5, 11, 89, 96, 226, 235, 237, 239, 273], "calc_individu": [1, 7, 19, 39, 41, 44, 59, 63, 75, 78, 123, 254, 257, 263, 266, 298, 299, 300], "calc_popul": [1, 7, 19, 39, 41, 45, 59, 64, 75, 79, 123, 254, 258, 263, 267, 298, 299, 300], "calcul": [0, 1, 5, 7, 11, 19, 39, 41, 43, 44, 45, 59, 61, 63, 64, 75, 77, 78, 79, 89, 96, 104, 119, 120, 123, 130, 131, 168, 169, 172, 173, 178, 179, 193, 199, 200, 210, 211, 226, 235, 237, 239, 254, 256, 257, 258, 263, 265, 266, 267, 273, 285, 296, 298, 300, 301], "calculate_individu": 299, "calculate_popul": 299, "call": [0, 5, 11, 84, 86, 87, 89, 96, 130, 133, 172, 176, 183, 186, 188, 191, 226, 235, 237, 239, 273, 298, 299, 301], "callback": [156, 158, 172, 177, 288], "can": [0, 96, 237, 290, 295, 296, 297, 298, 299, 300, 301, 303], "candid": 201, "cannot": [43, 61, 77, 256, 265], "capabl": [298, 300, 301], "carri": [298, 301], "case": [208, 209, 212, 224, 259, 260, 268, 269, 274, 301], "cd": [297, 300, 302], "cell": [193, 196, 202, 204, 205, 206, 207, 208, 209, 218], "centr": [199, 200, 210, 211, 226, 227, 235, 236, 300], "certain": 298, "cf": [104, 301], "cfg": 0, "chain": [295, 296], "chain_problem": 300, "chainpopul": 300, "chainproblem": 300, "champion": [1, 5, 7, 11, 19, 39, 41, 47, 59, 65, 75, 89, 102, 123, 226, 232, 235, 239, 243, 254, 263, 273], "chanc": 298, "chang": [0, 296, 297, 298], "changelog": 0, "channel": 297, "charg": [0, 298], "charges_problem": 298, "charges_problem_fd": 298, "chargesproblem": 298, "check": [5, 11, 19, 21, 22, 24, 27, 28, 89, 97, 98, 193, 196, 213, 217, 218, 226, 235, 239, 254, 273, 296], "check_constraints_individu": [5, 11, 89, 97, 226, 235, 239, 273], "check_constraints_popul": [5, 11, 89, 98, 226, 235, 239, 273], "check_individu": [19, 21, 254], "check_popul": [19, 22, 254], "checkout": 296, "choic": [38, 75, 76, 297, 301], "chosen": 298, "circl": [298, 299, 300], "citat": 296, "cite": 294, "class": [0, 1, 5, 7, 11, 13, 19, 24, 34, 39, 41, 59, 75, 84, 89, 96, 104, 123, 125, 128, 130, 135, 156, 158, 160, 168, 171, 172, 178, 181, 183, 184, 188, 193, 226, 235, 237, 239, 240, 254, 263, 273, 274, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 296, 298, 299, 300, 301], "classmethod": [156, 158, 168, 171, 178, 181], "clean": 300, "clear": [24, 26], "clearli": [298, 299], "clone": [297, 302], "close": 299, "cma": 108, "cmi": 112, "cmpnt": [299, 300], "cname": [34, 42, 125, 255, 264, 301], "co": [1, 299, 300], "code": [296, 302], "coeff": [5, 11, 89, 119, 120, 199, 200, 210, 211, 215, 216, 226, 235, 239, 273], "coeffici": [119, 120, 193, 199, 200, 210, 211, 215, 216], "color": [38, 298, 299, 300], "color_iv": 38, "color_v": 38, "com": [0, 225, 296, 297, 302], "combin": 300, "come": 296, "command": [174, 297], "comment": 0, "commit": [0, 296], "complet": [0, 296, 298, 300], "complex": 303, "complic": 298, "compon": [1, 4, 5, 7, 10, 11, 19, 23, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 57, 58, 59, 61, 63, 64, 65, 66, 69, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 89, 96, 104, 115, 116, 123, 160, 226, 235, 237, 239, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 285, 288, 298, 300, 301], "component_nam": [1, 7, 19, 39, 41, 46, 59, 75, 123, 254, 263], "compos": [75, 285, 298], "comput": [135, 136], "con": [24, 29, 32, 33, 34, 35, 89, 100, 101, 102, 103, 125, 126, 183, 184, 230, 231, 232, 233, 243, 244, 301], "concern": 297, "concret": [227, 236, 239, 240, 296], "conda": 296, "condit": 172, "config": 297, "confin": 298, "consid": [96, 104, 237, 298], "consol": 225, "constrain": 298, "constraint": [0, 5, 11, 19, 20, 21, 22, 23, 32, 33, 34, 35, 89, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 112, 115, 125, 126, 135, 136, 188, 226, 230, 231, 232, 233, 235, 237, 239, 243, 244, 254, 273, 285, 290, 291, 293, 296, 298, 300, 301], "constraint_valu": [5, 11, 19, 21, 22, 89, 97, 98, 226, 235, 239, 254, 273], "constraints_tol": [5, 11, 89, 99, 226, 235, 239, 273], "constructor": [1, 2, 5, 6, 11, 12, 13, 14, 19, 20, 24, 25, 34, 35, 39, 41, 42, 59, 60, 75, 76, 84, 85, 89, 91, 123, 124, 125, 126, 130, 131, 135, 136, 156, 157, 168, 169, 172, 173, 178, 179, 183, 184, 188, 189, 193, 195, 226, 227, 235, 236, 239, 240, 254, 255, 263, 264, 273, 274, 298], "construtor": [7, 8], "contact": 296, "contain": [34, 104, 125, 193, 204, 205, 285, 300], "content": 300, "context": 303, "contradictori": 300, "conveni": 298, "converg": [298, 299, 301], "coordin": 298, "core": [0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 168, 169, 172, 178, 179, 183, 188, 192, 237, 239, 254, 263, 273, 283, 287, 288, 289, 290, 291, 293], "corner": [193, 196, 202, 206, 207, 208, 209, 218], "correct": [193, 197, 198], "correspond": [296, 297, 298, 300, 301], "costraint": 300, "could": [0, 298], "count": 135, "coupl": 298, "cours": 298, "cover": 300, "crash": 300, "creat": [128, 129, 156, 158, 168, 171, 172, 174, 178, 181, 287, 296, 297, 298, 299, 300, 301], "credit": 296, "criteria": 298, "cross": [160, 163, 299, 300], "crossov": [160, 163], "ctol": [99, 299], "current": [0, 24, 31, 296, 299, 301], "cx": 1, "d": 300, "darkr": [298, 299], "data": [1, 5, 7, 11, 19, 24, 27, 28, 32, 33, 39, 41, 47, 48, 59, 65, 66, 71, 72, 75, 89, 102, 103, 123, 188, 226, 232, 233, 235, 239, 243, 244, 254, 263, 273, 283, 298, 300], "deactiv": 297, "deal": 298, "decent": [188, 298], "decid": 297, "deduc": 224, "def": [298, 299, 300, 301], "default": [42, 91, 104, 123, 156, 172, 177, 195, 210, 211, 227, 236, 285, 288, 297, 298, 300], "defaultcallbacktempl": [156, 157, 158, 159, 288], "defaultmultiobjectivetermin": 300, "defaultsingleobjectivetermin": 298, "defin": [1, 7, 254, 263, 284, 293, 298, 299, 300, 301], "definit": [5, 11, 284, 301], "deg2rad": 299, "degre": 300, "delta": [193, 195, 226, 227, 235, 236, 298, 301], "demonstr": [0, 299, 300, 301], "denot": 298, "dep": [57, 58, 73, 74, 82, 83, 298], "depend": [0, 1, 7, 19, 39, 41, 42, 57, 58, 59, 73, 74, 75, 82, 83, 123, 129, 254, 263, 297, 298, 302], "deriv": [0, 1, 2, 4, 6, 7, 8, 10, 12, 19, 39, 41, 43, 59, 61, 75, 77, 96, 104, 123, 156, 158, 168, 171, 178, 181, 193, 199, 200, 237, 254, 255, 256, 260, 263, 264, 265, 269, 270, 296, 301], "deriv_coeff": [193, 199], "deriv_coeffs_gridpoint": [193, 200], "descib": 300, "describ": [297, 298, 299, 300], "descript": [283, 284, 286, 300], "design": 298, "detail": 296, "determin": [299, 300], "dev": 297, "develop": [172, 174, 302], "df": [254, 260, 263, 269, 301], "diagon": 300, "dict": [24, 53, 54, 92, 93, 129, 130, 131, 172, 173, 174, 183, 184, 189, 226, 227, 235, 236, 240, 274, 298, 299, 300, 301], "differ": [0, 199, 200, 210, 211, 226, 227, 235, 236, 296, 298, 300, 301], "differenti": [43, 61, 77, 96, 104, 199, 200, 210, 211, 226, 235, 237, 256, 265, 293], "digit": [193, 195], "dim": 214, "dimens": [193, 199, 200, 204, 205, 210, 211, 219, 220, 292, 298, 300], "dimension": 298, "direct": [0, 188, 290, 298, 299, 300], "directli": [5, 11, 89, 96, 226, 235, 237, 239, 273, 290, 297, 298, 300, 301], "directori": 297, "discret": [0, 226, 298], "discretizereggrid": [226, 227, 228, 229, 230, 231, 232, 233, 234, 293, 301], "discuss": 296, "displai": 298, "dist": [298, 300], "distanc": [0, 226, 235, 293, 298], "divis": [188, 189], "do": [183, 295, 298], "document": 0, "doe": [297, 298], "doi": 294, "domain": [1, 7], "don": 59, "done": [18, 297], "dpar": 227, "driver": 129, "dtype": 298, "due": 0, "dure": [172, 174, 298], "dv": [135, 137, 139], "dvar": [254, 260, 263, 269], "dx": [299, 301], "dy": [299, 301], "dynam": [0, 155, 156, 158, 168, 171, 178, 181, 182, 224, 287, 288, 292, 302], "e": [0, 5, 11, 89, 115, 116, 226, 235, 239, 273, 290, 297, 298, 302], "each": [1, 7, 39, 40, 59, 71, 72, 188, 189, 193, 204, 205, 220, 263, 264, 271, 298, 300], "easili": [298, 301], "egg": 297, "einsum": [5, 11, 89, 119, 120, 215, 216, 226, 235, 239, 273, 300], "either": [189, 227, 236, 259, 268, 274, 297, 301], "electr": 298, "electrostat": [0, 295, 296], "element": [24, 31, 300], "els": [196, 202, 206, 207, 208, 209, 212, 218, 259, 260, 268, 269, 298, 300, 301], "end": [298, 300, 301], "engin": 298, "enjoi": 0, "enter": 297, "entri": [24, 27, 28, 71, 72, 189, 300], "enumer": 300, "equal": [298, 299, 300], "equival": 298, "error": [193, 208, 209, 212, 297], "evalu": [5, 11, 89, 100, 101, 183, 184, 199, 210, 226, 230, 231, 235, 239, 273, 293, 296, 298, 299, 300, 301], "evaluate_individu": [5, 11, 89, 100, 226, 230, 235, 239, 273], "evaluate_popul": [5, 11, 89, 101, 226, 231, 235, 239, 273], "even": 298, "everi": 301, "exampl": [0, 296, 297, 298, 300, 301, 303], "except": 300, "exclud": 298, "execut": 297, "exist": [23, 261, 297], "expect": [300, 301], "explicit": 224, "explor": 301, "express": [23, 261], "extend": 0, "extens": 300, "extern": [283, 286], "extract": 129, "f": [0, 1, 2, 3, 7, 8, 9, 254, 259, 260, 263, 264, 268, 269, 298, 299, 300, 301], "f_avg": 299, "f_min": 299, "f_tol": [188, 189], "fact": [296, 298], "factor": [188, 189], "factori": [160, 161, 162, 163, 164, 165, 166, 167, 288], "fail": 224, "fals": [1, 2, 5, 6, 8, 11, 12, 34, 37, 89, 96, 100, 101, 104, 128, 129, 135, 136, 193, 202, 216, 218, 226, 230, 231, 235, 237, 239, 264, 273, 298, 299, 301], "far": [0, 298], "farm": [295, 296], "fast": [298, 300], "faster": 301, "favour": 298, "fd_bounds_ord": [227, 235, 236], "fd_order": [226, 227, 235, 236, 298, 301], "fdata": [71, 72], "feel": 296, "fig": [172, 174, 298, 299, 300], "figsiz": [34, 38, 298], "figur": [34, 38, 172, 174, 298], "fill": [298, 299], "fill_diagon": 298, "final": [1, 5, 7, 11, 13, 16, 19, 39, 41, 47, 48, 59, 65, 66, 75, 84, 86, 89, 102, 103, 123, 130, 135, 138, 168, 170, 172, 178, 180, 183, 188, 226, 232, 233, 235, 239, 243, 244, 254, 263, 273, 298, 299, 300, 301], "finalize_individu": [1, 5, 7, 11, 19, 39, 41, 47, 59, 65, 75, 89, 102, 123, 226, 232, 235, 239, 243, 254, 263, 273], "finalize_popul": [1, 5, 7, 11, 19, 39, 41, 48, 59, 66, 75, 89, 103, 123, 226, 233, 235, 239, 244, 254, 263, 273], "find": [34, 37, 193, 201, 202, 203, 298, 301], "find_grid_ind": [193, 201], "find_gridpoint": [193, 202], "find_ingrid": [193, 203], "find_pareto_objmix": [34, 37, 300], "fine": 298, "finish": [1, 5, 7, 11, 13, 18, 19, 39, 41, 59, 75, 84, 86, 89, 123, 130, 172, 183, 188, 226, 235, 239, 254, 263, 273, 298, 299, 300, 301], "finit": [0, 188, 199, 200, 210, 211, 226, 227, 235, 236, 293, 296, 301], "first": [174, 297, 298, 300], "fit": [135, 136, 139, 299], "fix": [0, 301], "flag": [1, 5, 7, 11, 13, 18, 19, 39, 40, 41, 59, 75, 84, 89, 96, 100, 101, 104, 111, 123, 130, 168, 172, 178, 183, 188, 189, 208, 209, 212, 225, 226, 230, 231, 235, 237, 239, 254, 255, 263, 264, 270, 271, 273, 298, 301], "flake8": 302, "float": [0, 1, 5, 6, 7, 11, 12, 19, 20, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 51, 53, 55, 57, 59, 61, 63, 64, 65, 66, 73, 75, 77, 78, 79, 82, 89, 94, 95, 96, 100, 101, 102, 103, 104, 105, 109, 113, 117, 121, 123, 125, 126, 135, 136, 168, 178, 188, 189, 195, 226, 228, 229, 230, 231, 232, 233, 235, 237, 239, 241, 242, 243, 244, 245, 248, 250, 252, 254, 255, 256, 257, 258, 259, 260, 263, 265, 266, 267, 268, 269, 273, 274, 275, 277, 279, 281, 293, 298, 299, 301], "float_random": [298, 300], "float_var": [273, 274, 301], "floatrandomsampl": [298, 300], "folder": 297, "follow": [0, 188, 301], "forc": [0, 297], "forg": 297, "forget": 59, "fork": [296, 297], "form": [298, 300], "forward": [0, 174, 199, 200, 210, 211, 226, 227, 235, 236, 298, 300, 301], "found": [24, 27, 28, 29, 30, 298, 303], "found_individu": [24, 27], "found_popul": [24, 28], "fox": 303, "frac": 298, "framework": 300, "fraunhof": [0, 294, 296], "fraunhoferiw": [0, 296, 297, 302], "fresh": [188, 189], "from": [0, 24, 29, 30, 92, 93, 128, 129, 138, 156, 158, 168, 170, 171, 178, 180, 181, 216, 224, 287, 297, 298, 299, 300, 301, 302], "front": [34, 35, 37, 38, 300], "ftol": [298, 300], "full": [0, 298, 299, 300], "fullfil": [5, 11, 19, 21, 22, 89, 97, 98, 226, 235, 239, 254, 273], "fulli": [298, 299, 300], "fun": 298, "func": [5, 11, 67, 89, 96, 104, 226, 235, 237, 239, 273], "func_org": 75, "func_vars_float": 59, "func_vars_int": 59, "function": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 19, 24, 25, 32, 33, 34, 35, 39, 41, 42, 50, 57, 58, 59, 60, 62, 67, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 83, 84, 86, 89, 91, 96, 100, 101, 102, 103, 104, 115, 116, 123, 125, 126, 130, 135, 160, 162, 163, 164, 165, 166, 172, 174, 183, 188, 189, 226, 230, 231, 232, 233, 235, 237, 239, 243, 244, 254, 255, 259, 260, 262, 263, 264, 268, 269, 272, 273, 283, 284, 285, 290, 295, 296, 298, 299, 300], "funtion": [59, 67, 123], "futur": 296, "fvar": [96, 237], "g": [1, 4, 7, 10, 215, 216, 254, 260, 263, 269, 290, 298, 301], "ga": [0, 298], "gener": [13, 48, 66, 103, 135, 233, 239, 244, 285, 287, 293, 297, 298, 300], "genet": [296, 298, 299], "geometr": [295, 296], "geometri": 300, "get": [0, 1, 5, 7, 11, 13, 15, 19, 34, 38, 39, 41, 57, 58, 59, 73, 74, 75, 82, 83, 84, 89, 99, 108, 112, 123, 130, 172, 183, 188, 193, 197, 198, 204, 205, 206, 207, 208, 209, 215, 216, 226, 235, 239, 254, 263, 273, 298], "get_algorithm": [160, 162], "get_bound": [19, 23, 135, 140, 254, 261, 298], "get_cel": [193, 204, 205], "get_class": [156, 158, 168, 169, 171, 178, 181], "get_corn": [193, 206, 207], "get_crossov": [160, 163], "get_extra_info": [135, 141], "get_fig": [298, 299, 300], "get_figur": 300, "get_figure_f": [172, 174], "get_gradi": [5, 11, 89, 96, 104, 226, 235, 237, 239, 273], "get_mut": [160, 164], "get_nam": [135, 142], "get_nec": [135, 143], "get_nic": [135, 144], "get_nix": [135, 145], "get_nobj": [135, 146], "get_sampl": [160, 165], "get_termin": [160, 166], "gg": [0, 188, 189, 190, 191, 192, 291, 296, 298], "git": [296, 297, 302], "github": [0, 296, 297, 302, 303], "give": 300, "given": [1, 5, 7, 11, 19, 21, 22, 34, 37, 38, 39, 41, 47, 48, 59, 65, 66, 75, 89, 97, 98, 102, 103, 123, 193, 205, 224, 226, 232, 233, 235, 239, 243, 244, 254, 263, 273, 298, 299, 300], "global": [1, 7, 227, 236, 298, 301], "go": 300, "goal": [264, 298], "goe": 296, "good": 298, "gp": [193, 208, 212], "gp2i": [193, 208], "gproblem": [298, 301], "gpt": [193, 199, 200, 209, 210, 211, 214, 215, 216], "gpts2ind": [193, 209], "grad": 188, "grad_coeff": [193, 210], "grad_coeffs_gridpoint": [193, 211], "gradient": [0, 5, 11, 89, 96, 104, 123, 135, 147, 188, 189, 193, 199, 200, 210, 211, 226, 235, 237, 239, 273, 285, 291, 296, 298, 301], "gradient_spars": [135, 148], "greedi": [0, 188, 291, 296, 298], "grid": [193, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 226, 292, 293, 296, 299, 301], "grid_problem": 299, "gridproblem": 299, "guarante": 298, "gx": [215, 216], "ha": [1, 7, 18, 296, 298, 299, 301], "handi": 298, "handl": [298, 301], "has_ana_deriv": [1, 7, 255, 263, 264, 270, 301], "has_batch_fit": [135, 149], "has_gradi": [135, 150], "has_gradient_spars": [135, 151], "has_hessian": [135, 152], "has_hessians_spars": [135, 153], "has_set_se": [135, 154], "have": [0, 295, 298, 300], "help": [160, 161, 296, 298], "helper": [283, 292], "henc": [298, 300, 301], "here": [0, 290, 296, 298, 299, 300, 301], "heurist": [296, 298], "higher": 300, "hint": [224, 292, 297], "histori": 296, "hoo": 1, "hous": 0, "how": [0, 225, 296, 300, 301], "howev": [296, 298, 301], "http": [0, 225, 294, 296, 297, 302], "i": [0, 1, 5, 7, 11, 24, 27, 28, 38, 42, 59, 89, 104, 115, 116, 188, 189, 193, 195, 210, 211, 213, 218, 226, 227, 235, 236, 239, 260, 269, 273, 284, 296, 297, 298, 299, 300, 301], "i0": 300, "i1": 300, "i2gp": [193, 212], "idea": 296, "ignor": [300, 301], "imagin": [298, 300], "imnport": 224, "implement": [0, 283, 291, 296, 298, 300, 301], "import": [0, 129, 130, 224, 292, 298, 299, 300, 301], "import_modul": [0, 224, 292], "impos": 298, "improv": [0, 296, 298], "in_grid": [193, 213], "includ": 296, "incomplet": 296, "increas": [0, 301], "ind": [193, 200, 201, 202, 208, 209, 211, 212, 214, 217, 218], "independ": 300, "index": [37, 43, 61, 77, 193, 201, 208, 256, 260, 265, 269, 298], "indic": [96, 193, 196, 200, 201, 202, 206, 207, 208, 209, 211, 212, 214, 217, 218, 237, 298, 301], "indirect": 0, "individu": [1, 5, 7, 11, 19, 21, 39, 41, 44, 45, 59, 63, 64, 71, 72, 75, 78, 79, 89, 97, 100, 101, 123, 168, 169, 178, 179, 226, 230, 231, 235, 239, 254, 257, 258, 263, 266, 267, 273, 298, 300], "inds2gpt": [193, 214], "inf": [7, 23, 109, 113, 248, 250, 254, 255, 261, 274, 277, 279], "infinit": 195, "info": [1, 5, 7, 11, 13, 15, 19, 39, 41, 59, 75, 84, 87, 89, 123, 130, 133, 172, 176, 183, 186, 188, 191, 226, 235, 239, 254, 263, 273], "inform": [193, 223, 300], "init": 298, "init_values_float": [274, 301], "init_values_int": 274, "initi": [0, 1, 5, 6, 7, 11, 12, 13, 17, 18, 19, 39, 41, 49, 59, 68, 75, 80, 84, 89, 105, 106, 107, 123, 130, 132, 160, 161, 172, 175, 183, 185, 188, 190, 226, 234, 235, 238, 239, 245, 246, 247, 254, 263, 273, 274, 275, 276, 298, 299, 300, 301], "initial_valu": [5, 6, 11], "initial_values_float": [5, 11, 89, 105, 226, 235, 239, 245, 273, 275, 298, 299, 300], "initial_values_int": [5, 11, 89, 106, 226, 235, 239, 246, 273, 276, 299], "insid": 299, "instal": [224, 295, 296, 302], "instanc": 301, "instanti": 301, "instead": [5, 11, 89, 96, 226, 235, 237, 239, 273, 297, 298], "int": [0, 1, 5, 7, 11, 16, 17, 19, 21, 22, 24, 25, 31, 34, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 58, 59, 61, 63, 64, 65, 66, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 88, 89, 91, 92, 93, 96, 97, 98, 102, 103, 104, 106, 107, 110, 114, 115, 116, 117, 118, 123, 125, 132, 134, 135, 136, 138, 155, 168, 170, 175, 177, 178, 180, 182, 183, 184, 185, 187, 188, 189, 190, 192, 193, 195, 199, 200, 210, 211, 212, 217, 219, 223, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 247, 249, 251, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 276, 278, 280, 300], "int_inf": [5, 11, 89, 90, 110, 114, 193, 194, 195, 226, 235, 239, 249, 251, 273, 274, 278, 280], "int_var": [273, 274], "integ": [1, 5, 7, 11, 19, 27, 28, 29, 30, 32, 33, 39, 41, 42, 43, 44, 45, 47, 48, 54, 56, 59, 61, 63, 64, 65, 66, 75, 77, 78, 79, 89, 94, 95, 96, 100, 101, 102, 103, 104, 106, 110, 114, 122, 123, 168, 178, 200, 211, 214, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 239, 241, 242, 243, 244, 246, 249, 251, 253, 254, 256, 257, 258, 263, 265, 266, 267, 273, 274, 276, 278, 280, 282, 299, 301], "intend": [0, 298], "intent": 300, "interfac": [0, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 283, 296, 298, 299, 300, 301, 303], "interpol": [0, 193, 195, 215, 216, 301], "interpolation_coeffs_point": [193, 215, 216], "introduc": [0, 300], "invalid": 38, "invers": 298, "invit": 296, "invok": [296, 301], "ipopt": [0, 298, 299], "ipynb": 0, "ir": [215, 216], "irrelev": 298, "is_gridi": [193, 217], "is_gridpoint": [193, 218], "is_intprob": [168, 178], "is_mix": 178, "issu": [0, 296], "its": [273, 293, 298], "ivar": [5, 11, 89, 96, 226, 235, 237, 239, 273], "iw": [0, 294, 296], "iwopi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 294, 297, 298, 299, 300, 301, 302, 303], "j": 298, "job": 298, "jona": 294, "joss": 294, "journal": 296, "just": 0, "keep": [0, 297], "kei": [24, 25, 53, 54, 91, 92, 93, 226, 227, 235, 236], "keyf": [24, 25], "kind": [296, 298], "kwarg": [19, 20, 128, 129, 160, 165, 167, 172, 174, 183, 184, 239, 240, 274], "larg": 298, "last": 302, "later": [0, 300], "latest": [0, 297], "latter": 298, "layout": [295, 296], "ldot": 298, "lead": 296, "leav": 297, "left": [193, 196, 202, 206, 207, 208, 209, 218, 274, 298, 301], "len": [195, 298, 299], "length": [260, 269, 300, 301], "leq": 298, "let": [298, 299, 300, 301], "level": [16, 17, 21, 22, 47, 48, 49, 65, 66, 68, 80, 86, 88, 92, 93, 96, 97, 98, 102, 103, 104, 107, 132, 134, 135, 136, 138, 155, 170, 175, 177, 180, 182, 185, 187, 190, 192, 232, 233, 234, 237, 238, 243, 244, 247, 283, 290], "libmamba": 297, "licens": 296, "lie": 299, "lightweight": [193, 292], "like": [0, 195, 214, 274, 296, 300], "linalg": [298, 299, 300], "line": [297, 302], "linear": [0, 193, 195], "link": [5, 11, 89, 104, 226, 235, 239, 273, 296, 301], "list": [5, 6, 11, 12, 34, 37, 42, 43, 44, 45, 46, 55, 56, 59, 61, 62, 63, 64, 67, 71, 72, 75, 76, 77, 78, 79, 96, 104, 119, 120, 121, 122, 123, 125, 135, 189, 195, 210, 211, 237, 252, 253, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 274, 281, 282, 285, 290, 296, 301], "littl": [283, 292], "ll": [295, 301], "load": [0, 155, 182, 287, 288, 298, 299, 300], "local": [0, 188, 235, 291, 293, 301, 302], "localfd": [0, 226, 235, 236, 237, 238, 293, 296, 298, 301], "locat": [193, 213, 298, 300, 301], "look": 300, "lookup": [24, 29, 30], "lookup_individu": [24, 29], "lookup_popul": [24, 30], "loop": 298, "lot": 301, "lower": [11, 12, 23, 193, 196, 202, 206, 207, 208, 209, 218, 261], "m": 297, "mai": [84, 86, 130, 172, 183, 188, 300], "main": [59, 297, 298], "mainli": 296, "make": [298, 299], "manag": 59, "mani": [0, 298], "manner": [298, 301], "map": [42, 53, 54, 92, 93, 216, 274], "marbl": 300, "mark": 299, "mathrm": [298, 301], "matplotlib": [298, 299, 300], "matrix": 300, "max": [23, 34, 37, 204, 205, 255, 261, 299, 300], "max_dist": 299, "max_siz": 24, "max_values_constraint": [5, 11, 89, 108, 226, 235, 239, 273], "max_values_float": [5, 11, 89, 109, 226, 235, 239, 248, 273, 274, 277, 298, 299, 300, 301], "max_values_int": [5, 11, 89, 110, 226, 235, 239, 249, 273, 274, 278, 299], "maxim": [1, 5, 7, 11, 12, 24, 25, 37, 39, 40, 89, 108, 109, 110, 111, 188, 189, 193, 221, 226, 235, 239, 248, 249, 255, 263, 264, 271, 273, 274, 277, 278, 298, 299, 300], "maximize_obj": [5, 11, 89, 111, 226, 235, 239, 273], "maximum": 298, "maxn": 299, "maxradiu": 298, "maxstretch": 300, "mayb": 0, "mdl": 224, "mean": 300, "meaning": 298, "measur": 300, "meet": 300, "mem_keyf": [89, 91], "mem_siz": [89, 91, 183, 184, 227], "memor": [188, 189, 301], "memori": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 89, 91, 183, 184, 188, 227, 285, 290, 301], "memory_s": [188, 189], "messag": [296, 297], "meta": 296, "method": [193, 195, 298, 301], "might": 302, "min": [23, 204, 205, 254, 255, 261, 300], "min_dist": 299, "min_values_constraint": [5, 11, 89, 112, 226, 235, 239, 273], "min_values_float": [5, 11, 89, 113, 226, 235, 239, 250, 273, 274, 279, 298, 299, 300, 301], "min_values_int": [5, 11, 89, 114, 226, 235, 239, 251, 273, 274, 280, 299], "mindist": 0, "minf": 301, "minf_fd": 301, "minfunc": 301, "minim": [0, 5, 11, 12, 37, 89, 112, 113, 114, 183, 184, 188, 189, 193, 222, 226, 235, 239, 250, 251, 255, 273, 274, 279, 280, 295, 296, 300], "minima": [1, 7], "minimum": 301, "minpotenti": 298, "miss": 297, "mit": 296, "mitig": 300, "mix": [0, 168, 178, 295, 296], "mixedvariablega": [0, 299], "mode": [188, 189], "model": [0, 303], "modifi": [283, 293], "modul": [0, 224, 292], "moment": [168, 178], "more": [0, 296, 298, 303], "mostli": 0, "multi": [0, 34, 285, 295, 296, 301], "multi_obj_chain": 0, "multiobjoptresult": [0, 34, 35, 36, 37, 38, 177, 285], "multiobjproblemtempl": [168, 169, 170, 171, 288], "multipl": [168, 288, 301], "must": 298, "mut": [160, 164], "mutat": [160, 164], "mx": 299, "my": 299, "my_venv": 297, "n": [51, 52, 70, 117, 118, 193, 292, 297, 298, 299, 300], "n_charg": 298, "n_compon": [1, 7, 19, 21, 22, 23, 39, 40, 41, 47, 48, 50, 57, 58, 59, 65, 66, 69, 71, 72, 73, 74, 75, 81, 82, 83, 96, 97, 98, 103, 104, 123, 233, 237, 244, 254, 255, 261, 262, 263, 264, 271, 272, 298, 299, 300, 301], "n_con": 115, "n_con_cmptn": [298, 299, 300, 301], "n_cons_cmpnt": 30, "n_constraint": [5, 11, 32, 33, 34, 35, 89, 99, 100, 101, 102, 103, 108, 112, 115, 125, 126, 226, 230, 231, 232, 233, 235, 239, 243, 244, 273, 298, 299, 300, 301], "n_dim": [193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], "n_eval": 299, "n_fit": 135, "n_func_compon": [71, 72], "n_function": [59, 70, 123], "n_gen": 299, "n_gp": 216, "n_gpt": [199, 200, 202, 209, 210, 211, 214, 215, 216], "n_ind": [200, 201, 211], "n_max_gen": [298, 300], "n_max_step": [188, 189], "n_obj": 116, "n_obj_cmptn": [298, 299, 300, 301], "n_object": [5, 11, 32, 33, 34, 35, 89, 100, 101, 102, 111, 116, 226, 230, 231, 232, 235, 239, 243, 273, 298, 299, 300, 301], "n_objs_cmpnt": 30, "n_point": [193, 220], "n_pop": [22, 28, 30, 33, 34, 35, 45, 48, 64, 66, 72, 79, 95, 98, 101, 103, 229, 231, 233, 242, 244, 258, 259, 267, 268, 298, 299, 300], "n_pt": [196, 198, 199, 202, 203, 205, 207, 210, 216], "n_row_max": 299, "n_sel_compon": [43, 44, 45, 61, 63, 64, 77, 78, 79, 256, 257, 258, 260, 265, 266, 267, 269], "n_step": [193, 195], "n_var": [104, 188, 210, 211], "n_vars_al": 135, "n_vars_float": [1, 5, 7, 11, 19, 27, 28, 29, 30, 32, 33, 34, 35, 39, 41, 42, 43, 44, 45, 47, 48, 51, 57, 59, 61, 63, 64, 65, 66, 73, 75, 77, 78, 79, 82, 89, 94, 95, 96, 100, 101, 102, 103, 104, 105, 109, 113, 117, 123, 125, 126, 188, 226, 228, 229, 230, 231, 232, 233, 235, 237, 239, 241, 242, 243, 244, 245, 248, 250, 254, 256, 257, 258, 263, 265, 266, 267, 273, 275, 277, 279, 298, 299, 300, 301], "n_vars_int": [1, 5, 7, 11, 19, 27, 28, 29, 30, 32, 33, 34, 35, 39, 41, 42, 43, 44, 45, 47, 48, 52, 58, 59, 61, 63, 64, 65, 66, 74, 75, 77, 78, 79, 83, 89, 94, 95, 96, 100, 101, 102, 103, 104, 106, 110, 114, 118, 123, 125, 126, 226, 228, 229, 230, 231, 232, 233, 235, 237, 239, 241, 242, 243, 244, 246, 249, 251, 254, 256, 257, 258, 263, 265, 266, 267, 273, 276, 278, 280, 298, 299, 300, 301], "n_vr": [96, 237], "nai": 299, "name": [0, 1, 2, 5, 6, 7, 8, 11, 12, 13, 14, 19, 34, 39, 41, 42, 46, 53, 54, 55, 56, 59, 60, 75, 76, 84, 85, 89, 91, 121, 122, 123, 125, 129, 189, 224, 226, 227, 235, 236, 239, 240, 252, 253, 254, 255, 263, 264, 273, 274, 281, 282, 292, 298, 299, 300, 301], "nan": [43, 61, 77, 256, 265], "nax": 299, "naz": 299, "ndarrai": [28, 30, 43, 57, 58, 61, 71, 72, 73, 74, 77, 82, 83, 96, 99, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 119, 120, 135, 188, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 237, 245, 246, 248, 249, 250, 251, 256, 259, 265, 268, 275, 276, 277, 278, 279, 280], "nearbi": 300, "nearest": [0, 193, 195], "necessari": [227, 236], "need": [295, 298, 300, 301], "neg": 298, "neighbour": 300, "neq": 298, "new": [0, 5, 11, 53, 54, 89, 94, 95, 128, 129, 226, 228, 229, 235, 239, 241, 242, 273, 298, 300], "new_branch": 296, "next": [298, 300, 301], "ngen": 0, "nice": 300, "nlopt": 0, "nocross": 300, "non": [23, 261, 297], "none": [0, 1, 4, 5, 7, 10, 11, 19, 24, 25, 29, 30, 34, 38, 39, 41, 42, 43, 44, 45, 59, 61, 63, 64, 75, 76, 77, 78, 79, 89, 91, 92, 93, 96, 104, 123, 172, 174, 193, 195, 208, 209, 212, 224, 226, 227, 235, 236, 237, 239, 254, 255, 256, 257, 258, 260, 263, 264, 265, 266, 267, 273, 274, 292, 298, 299, 300], "norm": [298, 299, 300], "note": [183, 297, 298, 300, 301], "notebook": 0, "notic": [297, 298, 299, 300, 301], "notifi": [156, 159], "now": [0, 298, 299, 300, 301], "np": [21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 35, 40, 43, 44, 45, 47, 48, 61, 63, 64, 65, 66, 77, 78, 79, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 125, 126, 215, 216, 228, 229, 230, 231, 232, 233, 237, 241, 242, 243, 244, 256, 257, 258, 261, 265, 266, 267, 271, 274, 298, 299, 300], "npop": 0, "nsga2": [0, 300], "number": [1, 5, 7, 11, 19, 24, 25, 31, 39, 41, 42, 50, 51, 52, 59, 69, 70, 75, 81, 89, 115, 116, 117, 118, 123, 183, 184, 188, 189, 193, 195, 219, 220, 226, 235, 239, 254, 255, 262, 263, 264, 272, 273, 294, 299, 300, 301], "numer": [0, 301], "numpi": [0, 28, 30, 43, 57, 58, 61, 71, 72, 73, 74, 77, 82, 83, 96, 99, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 119, 120, 135, 188, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 237, 245, 246, 248, 249, 250, 251, 256, 259, 265, 268, 275, 276, 277, 278, 279, 280, 298, 299, 300], "nx": 299, "ny": 299, "obj": [24, 29, 32, 33, 34, 35, 89, 100, 101, 102, 103, 125, 126, 183, 184, 188, 230, 231, 232, 233, 243, 244, 301], "obj_0": [34, 38], "obj_1": [34, 38], "obj_weight": [34, 37], "object": [0, 1, 5, 7, 11, 13, 16, 17, 19, 24, 25, 32, 33, 34, 35, 37, 38, 39, 40, 41, 49, 59, 68, 75, 80, 84, 86, 88, 89, 91, 92, 93, 96, 100, 101, 102, 103, 104, 111, 116, 119, 120, 123, 125, 126, 129, 130, 132, 134, 135, 138, 168, 170, 172, 174, 175, 177, 178, 180, 183, 185, 187, 188, 189, 190, 192, 226, 230, 231, 232, 233, 235, 237, 239, 243, 244, 254, 263, 273, 284, 285, 288, 290, 293, 295, 296, 298, 299, 301], "obtain": [5, 11, 89, 104, 226, 235, 239, 273], "obviou": 301, "obvious": [296, 300], "off": [208, 209, 212], "offer": 301, "often": [298, 301], "old": [53, 54], "onam": [34, 125, 301], "onc": 297, "one": [193, 205, 259, 260, 268, 269, 298, 300], "onli": [96, 168, 178, 237, 297, 298, 300], "onward": 300, "open": [294, 296], "oper": 298, "opt": [0, 297], "opt_result": [84, 86, 130, 172, 183, 188], "optfunct": [19, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 67, 75, 76, 285, 290], "optfunctionlist": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 89, 96, 104, 123, 237, 285], "optfunctionsubset": [75, 76, 77, 78, 79, 80, 81, 82, 83, 285], "optim": [0, 2, 8, 19, 34, 35, 41, 42, 47, 60, 65, 84, 85, 86, 87, 88, 89, 102, 125, 126, 129, 130, 131, 134, 135, 136, 138, 170, 172, 173, 174, 177, 180, 183, 184, 187, 188, 189, 190, 191, 192, 232, 243, 255, 264, 283, 285, 286, 287, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301], "optimizer_pygmo": [130, 131, 132, 133, 134, 287], "optimizer_pymoo": [172, 173, 174, 175, 176, 177, 288, 298, 299, 300], "optimizer_scipi": [183, 184, 185, 186, 187, 289, 301], "optimum": [188, 291, 298], "optimz": [183, 184, 297], "option": [0, 25, 30, 38, 42, 44, 45, 63, 64, 76, 78, 79, 91, 92, 93, 96, 100, 101, 104, 129, 169, 174, 177, 179, 184, 189, 195, 202, 210, 211, 216, 218, 224, 227, 230, 231, 236, 237, 240, 255, 257, 258, 260, 264, 266, 267, 274, 298, 301], "optoin": 297, "optresult": [0, 86, 88, 301], "orang": [38, 298, 299, 300], "order": [0, 96, 104, 193, 199, 200, 210, 211, 226, 227, 235, 236, 237, 259, 260, 268, 269, 295, 298, 301], "orderb": [193, 199, 200, 210, 211, 226, 235], "org": 294, "origin": [75, 76, 193, 195, 296, 301], "osx": 0, "other": [59, 71, 72, 123, 296, 298, 300, 303], "otherwis": [29, 30, 37, 42, 259, 260, 268, 269], "our": [298, 299, 300, 301], "out": [0, 188, 296, 298], "outermost": [196, 202, 206, 207, 208, 209, 218, 300], "output": [225, 292], "outsid": 299, "over": 298, "overal": 300, "overload": [96, 237, 298], "overwritten": [168, 169], "own": [283, 291], "p": [193, 197, 204, 206, 213, 215, 218], "p0": [206, 207], "p_max": [193, 221], "p_min": [193, 222], "packag": [0, 155, 182, 224, 283, 284, 286, 287, 288, 289, 290, 292, 296, 297, 301], "page": 294, "pair": 298, "paper": 296, "par": [7, 8, 160, 162, 163, 164], "paramet": [0, 1, 7, 24, 128, 130, 172, 183, 287, 296, 299, 301], "pareto": [34, 35, 37, 38, 300], "part": 303, "parteo": [34, 35], "parti": 297, "particl": 298, "particular": 298, "particularli": 298, "pass": [0, 301], "path": 297, "pc": 300, "pcd": 300, "per": [193, 205, 298, 300], "perfectli": 298, "pg": 216, "pi": [1, 300], "pick": 300, "pip": [295, 296, 302], "pipe": [273, 293], "placehold": 297, "plan": 300, "pleas": [294, 296, 302], "plot": [38, 174, 300], "plot_pareto": [34, 38, 300], "plt": [174, 298, 299, 300], "pmap": 216, "pname": [34, 125], "point": [34, 37, 38, 59, 174, 188, 189, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 226, 227, 235, 236, 292, 298, 299, 301], "polul": 300, "pop": [96, 104, 128, 129, 135, 136, 237], "pop_siz": [298, 299, 300], "popul": [1, 5, 7, 11, 19, 22, 24, 33, 39, 41, 45, 48, 59, 64, 66, 75, 79, 89, 95, 96, 98, 101, 103, 104, 123, 138, 168, 169, 178, 179, 226, 229, 231, 233, 235, 237, 239, 242, 244, 254, 258, 259, 263, 267, 268, 273, 296, 298, 300], "posit": [298, 300], "possibl": [1, 7, 19, 39, 41, 43, 59, 61, 75, 77, 123, 254, 256, 263, 265, 296], "potenti": [295, 296], "pre": 297, "precis": [193, 195], "predecessor": 0, "prepend": 223, "pretti": 0, "prevent": 300, "previous": 104, "print": [0, 84, 87, 130, 133, 160, 167, 172, 176, 183, 186, 188, 191, 193, 223, 225, 292, 298, 299, 301], "print_info": [84, 87, 130, 133, 172, 176, 183, 186, 188, 191, 193, 223, 298, 299, 300, 301], "prob_r": [100, 101, 119, 120, 230, 231], "prob_res_einsum_individu": [5, 11, 89, 119, 226, 235, 239, 273], "prob_res_einsum_popul": [5, 11, 89, 120, 226, 235, 239, 273], "prob_res_list": [5, 11, 89, 119, 120, 226, 235, 239, 273], "problem": [0, 1, 2, 5, 6, 7, 8, 11, 12, 19, 34, 35, 39, 41, 42, 44, 45, 47, 48, 59, 60, 63, 64, 65, 66, 75, 78, 79, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 135, 136, 138, 168, 169, 170, 172, 173, 178, 179, 180, 181, 183, 184, 188, 189, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 254, 255, 257, 258, 263, 264, 266, 267, 273, 274, 284, 285, 287, 288, 290, 293, 295, 296, 298, 300, 301], "problem_par": [130, 131, 172, 173, 298, 299, 300], "problem_result": [1, 7, 19, 34, 35, 39, 41, 44, 45, 47, 48, 59, 63, 64, 65, 66, 75, 78, 79, 94, 95, 102, 103, 123, 125, 126, 228, 229, 232, 233, 241, 242, 243, 244, 254, 257, 258, 263, 266, 267, 298, 299, 300, 301], "problemdefaultfunc": [104, 123, 124, 285], "problemwrapp": [235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 293], "proce": 301, "produc": 300, "project": [0, 188, 298], "proof": 298, "properti": [1, 5, 7, 11, 13, 18, 19, 24, 31, 39, 41, 46, 51, 52, 55, 56, 59, 67, 70, 75, 84, 89, 99, 108, 111, 112, 115, 116, 117, 118, 123, 130, 172, 183, 188, 193, 219, 220, 221, 222, 226, 235, 239, 254, 263, 270, 273], "provid": [226, 235, 290, 293, 296, 298, 301], "pso": 0, "pt": [193, 196, 198, 199, 202, 203, 205, 207, 210, 216], "publish": 294, "pull": 296, "pure": [168, 178], "purpos": [0, 298], "push": 296, "put": 296, "px": 216, "pxy": 300, "pygmo": [0, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 172, 286, 295, 296, 298, 302], "pygmo_pop": [135, 138], "pymoo": [0, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 286, 295, 296, 298, 299, 300, 302], "pymoo_problem": [160, 161, 172], "pymoo_result": [168, 170, 178, 180], "pyplot": [38, 298, 299, 300], "pytest": 302, "python": [0, 225, 294, 296, 303], "q": [197, 198], "quad": 298, "question": 225, "r": [1, 298, 300], "r_i": 298, "r_j": 298, "radial": 298, "radii": 300, "radiu": [298, 299, 300], "radius_0": 298, "radius_1": 298, "radius_10": 298, "radius_11": 298, "radius_12": 298, "radius_13": 298, "radius_14": 298, "radius_15": 298, "radius_16": 298, "radius_17": 298, "radius_18": 298, "radius_19": 298, "radius_2": 298, "radius_20": 298, "radius_21": 298, "radius_22": 298, "radius_23": 298, "radius_24": 298, "radius_25": 298, "radius_26": 298, "radius_27": 298, "radius_28": 298, "radius_29": 298, "radius_3": 298, "radius_30": 298, "radius_31": 298, "radius_32": 298, "radius_33": 298, "radius_34": 298, "radius_35": 298, "radius_36": 298, "radius_37": 298, "radius_38": 298, "radius_39": 298, "radius_4": 298, "radius_40": 298, "radius_41": 298, "radius_42": 298, "radius_43": 298, "radius_44": 298, "radius_45": 298, "radius_46": 298, "radius_47": 298, "radius_48": 298, "radius_49": 298, "radius_5": 298, "radius_6": 298, "radius_7": 298, "radius_8": 298, "radius_9": 298, "rais": 296, "random": [298, 300], "rang": [298, 299, 300], "ratg": [215, 216], "re": 301, "reach": [188, 189, 290], "readi": [0, 299, 300, 301], "recommend": [1, 7, 297, 298], "recov": 0, "red": 38, "reduc": [188, 196, 202, 206, 207, 208, 209, 218], "regular": [193, 226, 292, 293, 299, 301], "regulardiscretizationgrid": [0, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 292, 296], "releas": [0, 297], "relev": [199, 200, 210, 211, 215, 216, 298], "remov": [0, 297, 301], "renam": [1, 7, 19, 39, 41, 53, 54, 59, 75, 123, 254, 263], "rename_vars_float": [1, 7, 19, 39, 41, 53, 59, 75, 123, 254, 263], "rename_vars_int": [1, 7, 19, 39, 41, 54, 59, 75, 123, 254, 263], "repeat": [300, 301], "replac": [297, 302], "report": 296, "repositori": [296, 297, 302, 303], "repres": [199, 200, 210, 211, 298, 300], "request": [296, 301], "requir": [296, 298, 300, 301, 302], "reshap": [298, 299], "respect": [298, 299], "restrict": 0, "result": [5, 11, 21, 22, 24, 25, 29, 30, 34, 35, 37, 44, 45, 47, 48, 59, 63, 64, 65, 66, 71, 72, 78, 79, 86, 88, 89, 94, 95, 97, 98, 100, 101, 102, 103, 119, 120, 123, 125, 126, 134, 138, 170, 177, 180, 187, 192, 215, 216, 226, 228, 229, 230, 231, 232, 233, 235, 239, 241, 242, 243, 244, 257, 258, 259, 260, 266, 267, 268, 269, 273, 285, 290, 298, 299, 300, 301], "ret_ind": [193, 202, 218], "ret_pmap": [193, 216], "ret_prob_r": [5, 11, 89, 100, 101, 226, 230, 231, 235, 239, 273], "return": [1, 7, 19, 21, 24, 25, 34, 36, 39, 41, 59, 75, 91, 123, 125, 127, 254, 263, 298, 299, 300, 301], "revers": [0, 188], "revert": 298, "right": [274, 298, 301], "rmax": 300, "rmin": 300, "root": 297, "rosenbrock": [0, 7, 8, 9, 10, 11, 12], "rosenbrockobject": [7, 8, 9, 10, 284], "rosenbrockproblem": [11, 12, 284], "rule": [0, 301], "run": [84, 88, 130, 134, 172, 177, 183, 187, 188, 189, 192, 287, 295, 298, 299, 300, 301, 302], "s_": 298, "sake": 298, "same": [0, 227, 236, 254, 263, 293, 298, 301], "samp_nam": [160, 165], "sampl": [160, 165, 298, 300], "scalar": [41, 259, 268, 285, 298, 301], "scatter": [38, 174, 298, 299], "schult": 294, "schulte2024": 294, "scipi": [0, 183, 184, 185, 186, 187, 286, 296, 301], "scipy_par": [183, 184, 301], "script": 0, "search": [188, 291], "secondari": 300, "section": 0, "see": [160, 161, 298], "seed": [298, 299, 300], "sel_grid": [201, 202, 203], "select": [0, 43, 44, 45, 61, 63, 64, 77, 78, 79, 96, 104, 201, 202, 203, 226, 237, 256, 257, 258, 260, 265, 266, 267, 269, 283, 290, 293, 298, 299, 300], "self": [34, 36, 110, 114, 125, 127, 160, 161, 249, 251, 274, 278, 280, 298, 299, 300, 301], "serial": [130, 287], "serv": 300, "set": [174, 193, 216, 274, 297, 298, 300], "set_alpha": 300, "set_aspect": [298, 299, 300], "set_titl": [298, 299, 300], "set_xlabel": [298, 299, 300], "set_xlim": 300, "set_ylabel": [298, 299, 300], "set_ylim": 300, "setup": [0, 130, 131, 172, 173, 298, 300, 301], "setup_par": [130, 131, 172, 173, 298, 299, 300], "shape": [21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 35, 40, 43, 44, 45, 47, 48, 57, 58, 61, 63, 64, 65, 66, 71, 72, 73, 74, 77, 78, 79, 82, 83, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 125, 126, 135, 188, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 237, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 255, 256, 257, 258, 259, 261, 265, 266, 267, 268, 271, 275, 276, 277, 278, 279, 280, 299], "shoot": 296, "shortcut": 283, "shortli": 298, "should": [296, 297], "show": [34, 38, 172, 174, 298, 299, 300], "signatur": [160, 161], "silent": [16, 17, 21, 22, 47, 48, 49, 65, 66, 68, 80, 86, 88, 92, 93, 96, 97, 98, 102, 103, 104, 107, 132, 134, 135, 136, 138, 155, 170, 175, 177, 180, 182, 185, 187, 190, 192, 225, 232, 233, 234, 237, 238, 243, 244, 247, 292], "similar": 301, "simpl": [0, 254, 263, 293, 295, 296, 298, 300], "simpleconstraint": [0, 254, 255, 256, 257, 258, 259, 260, 261, 262, 293, 301], "simpleobject": [0, 1, 7, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 284, 293, 301], "simpleproblem": [5, 11, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 293, 301], "simpli": [273, 293, 300, 301], "simplifi": [283, 293], "sin": [299, 300], "sinc": [0, 296, 298, 300, 301], "singl": [1, 5, 7, 11, 19, 39, 41, 44, 59, 63, 75, 78, 89, 100, 123, 125, 178, 226, 230, 235, 239, 254, 257, 260, 263, 266, 269, 273, 285, 288, 298, 301], "singleobjoptresult": [0, 125, 126, 127, 134, 138, 170, 177, 180, 187, 192, 285], "singleobjproblem": [168, 171, 172], "singleobjproblemtempl": [178, 179, 180, 181, 288], "size": [24, 25, 31, 38, 59, 91, 183, 184, 188, 189, 193, 195, 227, 236, 298, 299, 301], "slsqp": 301, "small": 0, "so": [0, 295, 298, 300], "softwar": [294, 303], "solut": [174, 298, 299, 300, 301], "solv": [0, 84, 87, 88, 130, 133, 134, 168, 169, 172, 176, 177, 178, 179, 183, 186, 187, 188, 191, 192, 296, 298, 299, 300, 301], "solvabl": 0, "solver": [84, 87, 88, 130, 133, 134, 138, 170, 172, 176, 177, 180, 183, 186, 187, 188, 191, 192, 285, 288, 296, 297, 298, 299, 300, 301], "some": 296, "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297], "space": [193, 196, 207, 223], "sparsiti": 298, "specif": 298, "specifi": 42, "speed": [296, 298], "sphinx": 0, "split": [0, 59, 71, 72, 123], "split_individu": [59, 71, 123], "split_popul": [59, 72, 123], "squar": 298, "stabl": 297, "stack": [299, 300], "stackoverflow": 225, "stand": 298, "start": [0, 296, 298, 301], "static": [128, 129], "steepest": [188, 298], "step": [188, 189, 193, 195, 227, 236, 297], "step_div_factor": [188, 189], "step_max": [188, 189, 298], "step_min": [188, 189, 298], "stepwis": [235, 293], "storag": [24, 193, 285, 290, 292], "store": [24, 25, 31, 32, 33, 183, 184], "store_individu": [24, 32], "store_popul": [24, 33], "str": [2, 6, 8, 12, 13, 14, 15, 34, 36, 38, 42, 46, 53, 54, 55, 56, 60, 76, 84, 85, 91, 92, 93, 104, 121, 122, 125, 127, 129, 189, 193, 195, 224, 226, 227, 235, 236, 240, 252, 253, 255, 264, 274, 281, 282], "straight": [0, 300, 301], "stretch": 300, "stretch_i": 300, "stretch_x": 300, "strictli": 298, "string": [1, 5, 7, 11, 13, 15, 19, 39, 41, 59, 75, 84, 89, 123, 130, 172, 183, 188, 226, 235, 239, 254, 263, 273, 300], "strongli": 297, "style": 0, "subplot": [298, 299, 300], "subsequ": 297, "subset": [59, 75, 76, 201, 202, 203, 285], "success": [34, 35, 125, 126, 298, 299, 300, 301], "successfulli": [298, 299, 300], "sum": [5, 11, 89, 115, 116, 119, 120, 135, 226, 235, 239, 273, 298, 299], "sum_": 298, "super": [298, 299, 300], "support": [0, 168, 178, 183, 297, 298, 299], "suppress": 225, "suppress_stdout": [225, 292], "surpress": [225, 292], "switch": [2, 6, 8, 12, 168, 169, 178, 179], "system": [0, 298], "t": [1, 59], "target": [24, 30], "task": 298, "tell": 297, "templat": [156, 168, 169, 178, 288], "term_par": [160, 166, 172, 173, 298, 299, 300], "termin": [160, 166, 172, 298, 299, 300], "test": [0, 296], "text": [298, 301], "than": 298, "thank": [0, 296], "thei": [0, 298, 300], "them": [298, 300, 301], "therefor": [298, 301], "thi": [0, 59, 84, 86, 104, 130, 168, 172, 178, 183, 188, 296, 297, 298, 299, 300, 301], "thing": 300, "third": 297, "those": [196, 202, 206, 207, 208, 209, 218, 297, 298, 300, 301], "three": 1, "throw": [208, 209, 212], "thu": 296, "titl": [38, 294, 300], "tol": [19, 20, 193, 195, 298, 299, 300, 301], "toler": [5, 11, 19, 20, 89, 99, 135, 136, 188, 189, 193, 195, 197, 198, 226, 235, 239, 273, 299, 301], "too": 300, "tool": [226, 294, 296], "top": [283, 290], "total": [5, 11, 70, 89, 115, 116, 226, 235, 239, 273, 299], "touch": 300, "tracker": 296, "transfer": 0, "translat": [193, 212, 214], "treatment": 225, "troubl": 296, "true": [18, 27, 28, 189, 193, 196, 202, 206, 207, 208, 209, 212, 213, 217, 218, 225, 255, 264, 292, 298, 299, 300, 301], "try": 0, "tupl": [8, 24, 29, 38, 188, 259, 260, 268, 269], "two": [298, 299, 300, 301], "type": [0, 24, 128, 129, 160, 161, 274, 298, 299, 300, 301], "typic": 104, "u": 300, "uda": 130, "udp": [130, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 287], "unbound": [109, 110, 113, 114, 248, 249, 250, 251, 274, 277, 278, 279, 280], "unconstrain": 301, "unconstraint": 7, "under": 296, "underli": [1, 2, 7, 8, 19, 39, 41, 42, 44, 59, 60, 63, 75, 78, 123, 227, 236, 239, 240, 254, 255, 257, 263, 264, 266], "understood": 296, "unequ": 298, "uniform": [189, 298, 300], "unit": 298, "unless": 301, "until": [188, 189], "up": [296, 298], "updat": [0, 298, 300], "upper": [11, 12, 23, 261, 300], "url": 294, "us": [0, 42, 43, 61, 77, 109, 110, 113, 114, 195, 248, 249, 250, 251, 256, 265, 274, 277, 278, 279, 280, 296, 297, 298, 299, 300, 301], "usag": [283, 293, 301], "user": 296, "userdefinedproblem": [135, 287], "usual": 301, "util": [0, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 283], "uv": 300, "v": [298, 301], "v0": 296, "valid": [38, 174, 193, 217, 298, 299], "valid_dict": [172, 174], "valu": [1, 5, 6, 7, 11, 12, 19, 21, 22, 24, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 41, 43, 44, 45, 47, 48, 53, 54, 59, 61, 63, 64, 65, 66, 71, 72, 75, 77, 78, 79, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 123, 125, 126, 135, 189, 193, 204, 205, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 254, 255, 256, 257, 258, 263, 265, 266, 267, 273, 274, 275, 276, 277, 278, 279, 280, 298, 299, 300, 301], "var": [1, 4, 7, 10, 19, 39, 41, 43, 59, 61, 75, 77, 104, 123, 193, 199, 200, 210, 211, 254, 256, 260, 263, 265, 269], "var_names_float": [1, 5, 7, 11, 19, 39, 41, 55, 59, 75, 89, 121, 123, 226, 235, 239, 252, 254, 263, 273, 281, 298, 299, 300], "var_names_int": [1, 5, 7, 11, 19, 39, 41, 56, 59, 75, 89, 122, 123, 226, 235, 239, 253, 254, 263, 273, 282, 299], "vardeps_float": [1, 7, 19, 39, 41, 57, 59, 73, 75, 82, 123, 254, 263, 298], "vardeps_int": [1, 7, 19, 39, 41, 58, 59, 74, 75, 83, 123, 254, 263], "variabl": [1, 5, 7, 11, 12, 19, 27, 28, 29, 30, 32, 33, 34, 35, 39, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 73, 74, 75, 77, 78, 79, 82, 83, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 109, 110, 113, 114, 117, 118, 121, 122, 123, 125, 126, 135, 188, 189, 199, 200, 210, 211, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 263, 265, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 293, 298, 299, 300, 301], "varib": [260, 269], "variou": [13, 285], "varmap": [1, 7, 19, 39, 41, 53, 54, 59, 75, 123, 254, 263], "varmap_float": [5, 11, 89, 92, 93, 226, 235, 239, 273], "varmap_int": [5, 11, 89, 92, 93, 226, 235, 239, 273], "vars_float": [1, 5, 7, 11, 19, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 39, 41, 43, 44, 45, 47, 48, 59, 61, 63, 64, 65, 66, 75, 77, 78, 79, 89, 91, 94, 95, 96, 100, 101, 102, 103, 104, 123, 125, 126, 226, 228, 229, 230, 231, 232, 233, 235, 237, 239, 241, 242, 243, 244, 254, 256, 257, 258, 263, 265, 266, 267, 273, 298, 299, 300, 301], "vars_int": [1, 5, 7, 11, 19, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 39, 41, 43, 44, 45, 47, 48, 59, 61, 63, 64, 65, 66, 75, 77, 78, 79, 89, 91, 94, 95, 96, 100, 101, 102, 103, 104, 123, 125, 126, 226, 228, 229, 230, 231, 232, 233, 235, 237, 239, 241, 242, 243, 244, 254, 256, 257, 258, 263, 265, 266, 267, 273, 298, 299, 300, 301], "vast": [296, 298], "vector": [96, 104, 135, 136, 168, 169, 178, 179, 183, 188, 189, 237, 296, 298, 299, 300], "vectoriz": 298, "venv": 297, "verbos": [1, 5, 7, 11, 13, 16, 17, 19, 21, 22, 39, 41, 47, 48, 49, 59, 65, 66, 68, 75, 80, 84, 86, 88, 89, 92, 93, 96, 97, 98, 102, 103, 104, 107, 123, 130, 132, 134, 135, 136, 138, 155, 160, 161, 168, 170, 172, 175, 177, 178, 180, 182, 183, 185, 187, 188, 190, 192, 226, 232, 233, 234, 235, 237, 238, 239, 243, 244, 247, 254, 263, 273, 287, 288, 298, 299, 300], "version": [0, 296, 297], "via": [0, 59, 96, 104, 237, 290, 296, 298, 299, 300, 301], "violat": [0, 19, 20, 188, 298], "visit": [188, 189], "visual": 300, "vname": 298, "vnames_float": [34, 42, 125, 298, 299, 300, 301], "vnames_int": [34, 42, 125, 299, 301], "volum": 294, "vr": [96, 237], "w": 300, "wa": [298, 300], "wai": [188, 301], "wake": 303, "want": [298, 300, 301, 302], "we": [0, 297, 298, 299, 300, 301], "weight": [34, 37, 119, 120, 300], "well": 300, "were": 104, "when": [296, 298, 300, 301], "whenev": [296, 298], "where": 298, "wherea": 298, "which": [96, 104, 174, 199, 200, 210, 211, 237, 273, 293, 298, 300, 301], "while": 297, "whole": [5, 11, 89, 95, 226, 229, 235, 239, 242, 273], "whose": 300, "wind": [295, 296], "within": [193, 213, 260, 269, 297, 298, 299, 300], "without": [188, 189, 193, 292, 297], "work": [0, 297, 298, 301], "world": 296, "worth": 0, "would": [298, 300], "wrap": 301, "wrapper": [0, 1, 5, 7, 11, 168, 178, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 288, 296, 301], "write": 30, "wrt": [96, 104, 168, 169, 178, 179, 199, 200, 210, 211, 237], "x": [0, 1, 3, 4, 7, 9, 10, 38, 135, 147, 188, 215, 216, 254, 259, 260, 263, 268, 269, 298, 299, 300, 301], "x0": [298, 299], "x1": 298, "x10": 298, "x11": 298, "x12": 298, "x13": 298, "x14": 298, "x15": 298, "x16": 298, "x17": 298, "x18": 298, "x19": 298, "x2": 298, "x20": 298, "x21": 298, "x22": 298, "x23": 298, "x24": 298, "x25": 298, "x26": 298, "x27": 298, "x28": 298, "x29": 298, "x3": 298, "x30": 298, "x31": 298, "x32": 298, "x33": 298, "x34": 298, "x35": 298, "x36": 298, "x37": 298, "x38": 298, "x39": 298, "x4": 298, "x40": 298, "x41": 298, "x42": 298, "x43": 298, "x44": 298, "x45": 298, "x46": 298, "x47": 298, "x48": 298, "x49": 298, "x5": 298, "x6": 298, "x7": 298, "x8": 298, "x9": 298, "x_": 298, "x_0": 298, "x_i": 298, "xtol": [298, 300], "xy": [298, 299, 300], "xy0": 300, "xy_del": 300, "xy_imax": 300, "xy_imin": 300, "xy_init": 298, "xy_max": 300, "xy_min": 300, "y": [0, 1, 3, 4, 7, 9, 10, 38, 298, 299, 300, 301], "y0": [298, 299], "y1": 298, "y10": 298, "y11": 298, "y12": 298, "y13": 298, "y14": 298, "y15": 298, "y16": 298, "y17": 298, "y18": 298, "y19": 298, "y2": 298, "y20": 298, "y21": 298, "y22": 298, "y23": 298, "y24": 298, "y25": 298, "y26": 298, "y27": 298, "y28": 298, "y29": 298, "y3": 298, "y30": 298, "y31": 298, "y32": 298, "y33": 298, "y34": 298, "y35": 298, "y36": 298, "y37": 298, "y38": 298, "y39": 298, "y4": 298, "y40": 298, "y41": 298, "y42": 298, "y43": 298, "y44": 298, "y45": 298, "y46": 298, "y47": 298, "y48": 298, "y49": 298, "y5": 298, "y6": 298, "y7": 298, "y8": 298, "y9": 298, "y_": 298, "y_0": 298, "y_i": 298, "year": 294, "yet": 296, "you": [295, 297, 301, 302], "your": [296, 297], "zero": [298, 299, 300], "zeros_lik": 299}, "titles": ["History", "iwopy.benchmarks.branin.BraninObjective", "iwopy.benchmarks.branin.BraninObjective.__init__", "iwopy.benchmarks.branin.BraninObjective.f", "iwopy.benchmarks.branin.BraninObjective.g", "iwopy.benchmarks.branin.BraninProblem", "iwopy.benchmarks.branin.BraninProblem.__init__", "iwopy.benchmarks.rosenbrock.RosenbrockObjective", "iwopy.benchmarks.rosenbrock.RosenbrockObjective.__init__", "iwopy.benchmarks.rosenbrock.RosenbrockObjective.f", "iwopy.benchmarks.rosenbrock.RosenbrockObjective.g", "iwopy.benchmarks.rosenbrock.RosenbrockProblem", "iwopy.benchmarks.rosenbrock.RosenbrockProblem.__init__", "iwopy.core.Base", "iwopy.core.Base.__init__", "iwopy.core.Base.__str__", "iwopy.core.Base.finalize", "iwopy.core.Base.initialize", "iwopy.core.Base.initialized", "iwopy.core.Constraint", "iwopy.core.Constraint.__init__", "iwopy.core.Constraint.check_individual", "iwopy.core.Constraint.check_population", "iwopy.core.Constraint.get_bounds", "iwopy.core.Memory", "iwopy.core.Memory.__init__", "iwopy.core.Memory.clear", "iwopy.core.Memory.found_individual", "iwopy.core.Memory.found_population", "iwopy.core.Memory.lookup_individual", "iwopy.core.Memory.lookup_population", "iwopy.core.Memory.size", "iwopy.core.Memory.store_individual", "iwopy.core.Memory.store_population", "iwopy.core.MultiObjOptResults", "iwopy.core.MultiObjOptResults.__init__", "iwopy.core.MultiObjOptResults.__str__", "iwopy.core.MultiObjOptResults.find_pareto_objmix", "iwopy.core.MultiObjOptResults.plot_pareto", "iwopy.core.Objective", "iwopy.core.Objective.maximize", "iwopy.core.OptFunction", "iwopy.core.OptFunction.__init__", "iwopy.core.OptFunction.ana_deriv", "iwopy.core.OptFunction.calc_individual", "iwopy.core.OptFunction.calc_population", "iwopy.core.OptFunction.component_names", "iwopy.core.OptFunction.finalize_individual", "iwopy.core.OptFunction.finalize_population", "iwopy.core.OptFunction.initialize", "iwopy.core.OptFunction.n_components", "iwopy.core.OptFunction.n_vars_float", "iwopy.core.OptFunction.n_vars_int", "iwopy.core.OptFunction.rename_vars_float", "iwopy.core.OptFunction.rename_vars_int", "iwopy.core.OptFunction.var_names_float", "iwopy.core.OptFunction.var_names_int", "iwopy.core.OptFunction.vardeps_float", "iwopy.core.OptFunction.vardeps_int", "iwopy.core.OptFunctionList", "iwopy.core.OptFunctionList.__init__", "iwopy.core.OptFunctionList.ana_deriv", "iwopy.core.OptFunctionList.append", "iwopy.core.OptFunctionList.calc_individual", "iwopy.core.OptFunctionList.calc_population", "iwopy.core.OptFunctionList.finalize_individual", "iwopy.core.OptFunctionList.finalize_population", "iwopy.core.OptFunctionList.functions", "iwopy.core.OptFunctionList.initialize", "iwopy.core.OptFunctionList.n_components", "iwopy.core.OptFunctionList.n_functions", "iwopy.core.OptFunctionList.split_individual", "iwopy.core.OptFunctionList.split_population", "iwopy.core.OptFunctionList.vardeps_float", "iwopy.core.OptFunctionList.vardeps_int", "iwopy.core.OptFunctionSubset", "iwopy.core.OptFunctionSubset.__init__", "iwopy.core.OptFunctionSubset.ana_deriv", "iwopy.core.OptFunctionSubset.calc_individual", "iwopy.core.OptFunctionSubset.calc_population", "iwopy.core.OptFunctionSubset.initialize", "iwopy.core.OptFunctionSubset.n_components", "iwopy.core.OptFunctionSubset.vardeps_float", "iwopy.core.OptFunctionSubset.vardeps_int", "iwopy.core.Optimizer", "iwopy.core.Optimizer.__init__", "iwopy.core.Optimizer.finalize", "iwopy.core.Optimizer.print_info", "iwopy.core.Optimizer.solve", "iwopy.core.Problem", "iwopy.core.Problem.INT_INF", "iwopy.core.Problem.__init__", "iwopy.core.Problem.add_constraint", "iwopy.core.Problem.add_objective", "iwopy.core.Problem.apply_individual", "iwopy.core.Problem.apply_population", "iwopy.core.Problem.calc_gradients", "iwopy.core.Problem.check_constraints_individual", "iwopy.core.Problem.check_constraints_population", "iwopy.core.Problem.constraints_tol", "iwopy.core.Problem.evaluate_individual", "iwopy.core.Problem.evaluate_population", "iwopy.core.Problem.finalize_individual", "iwopy.core.Problem.finalize_population", "iwopy.core.Problem.get_gradients", "iwopy.core.Problem.initial_values_float", "iwopy.core.Problem.initial_values_int", "iwopy.core.Problem.initialize", "iwopy.core.Problem.max_values_constraints", "iwopy.core.Problem.max_values_float", "iwopy.core.Problem.max_values_int", "iwopy.core.Problem.maximize_objs", "iwopy.core.Problem.min_values_constraints", "iwopy.core.Problem.min_values_float", "iwopy.core.Problem.min_values_int", "iwopy.core.Problem.n_constraints", "iwopy.core.Problem.n_objectives", "iwopy.core.Problem.n_vars_float", "iwopy.core.Problem.n_vars_int", "iwopy.core.Problem.prob_res_einsum_individual", "iwopy.core.Problem.prob_res_einsum_population", "iwopy.core.Problem.var_names_float", "iwopy.core.Problem.var_names_int", "iwopy.core.ProblemDefaultFunc", "iwopy.core.ProblemDefaultFunc.__init__", "iwopy.core.SingleObjOptResults", "iwopy.core.SingleObjOptResults.__init__", "iwopy.core.SingleObjOptResults.__str__", "iwopy.interfaces.pygmo.AlgoFactory", "iwopy.interfaces.pygmo.AlgoFactory.new", "iwopy.interfaces.pygmo.Optimizer_pygmo", "iwopy.interfaces.pygmo.Optimizer_pygmo.__init__", "iwopy.interfaces.pygmo.Optimizer_pygmo.initialize", "iwopy.interfaces.pygmo.Optimizer_pygmo.print_info", "iwopy.interfaces.pygmo.Optimizer_pygmo.solve", "iwopy.interfaces.pygmo.UDP", "iwopy.interfaces.pygmo.UDP.__init__", "iwopy.interfaces.pygmo.UDP.batch_fitness", "iwopy.interfaces.pygmo.UDP.finalize", "iwopy.interfaces.pygmo.UDP.fitness", "iwopy.interfaces.pygmo.UDP.get_bounds", "iwopy.interfaces.pygmo.UDP.get_extra_info", "iwopy.interfaces.pygmo.UDP.get_name", "iwopy.interfaces.pygmo.UDP.get_nec", "iwopy.interfaces.pygmo.UDP.get_nic", "iwopy.interfaces.pygmo.UDP.get_nix", "iwopy.interfaces.pygmo.UDP.get_nobj", "iwopy.interfaces.pygmo.UDP.gradient", "iwopy.interfaces.pygmo.UDP.gradient_sparsity", "iwopy.interfaces.pygmo.UDP.has_batch_fitness", "iwopy.interfaces.pygmo.UDP.has_gradient", "iwopy.interfaces.pygmo.UDP.has_gradient_sparsity", "iwopy.interfaces.pygmo.UDP.has_hessians", "iwopy.interfaces.pygmo.UDP.has_hessians_sparsity", "iwopy.interfaces.pygmo.UDP.has_set_seed", "iwopy.interfaces.pygmo.load", "iwopy.interfaces.pymoo.DefaultCallbackTemplate", "iwopy.interfaces.pymoo.DefaultCallbackTemplate.__init__", "iwopy.interfaces.pymoo.DefaultCallbackTemplate.get_class", "iwopy.interfaces.pymoo.DefaultCallbackTemplate.notify", "iwopy.interfaces.pymoo.Factory", "iwopy.interfaces.pymoo.Factory.__init__", "iwopy.interfaces.pymoo.Factory.get_algorithm", "iwopy.interfaces.pymoo.Factory.get_crossover", "iwopy.interfaces.pymoo.Factory.get_mutation", "iwopy.interfaces.pymoo.Factory.get_sampling", "iwopy.interfaces.pymoo.Factory.get_termination", "iwopy.interfaces.pymoo.Factory.print", "iwopy.interfaces.pymoo.MultiObjProblemTemplate", "iwopy.interfaces.pymoo.MultiObjProblemTemplate.__init__", "iwopy.interfaces.pymoo.MultiObjProblemTemplate.finalize", "iwopy.interfaces.pymoo.MultiObjProblemTemplate.get_class", "iwopy.interfaces.pymoo.Optimizer_pymoo", "iwopy.interfaces.pymoo.Optimizer_pymoo.__init__", "iwopy.interfaces.pymoo.Optimizer_pymoo.get_figure_f", "iwopy.interfaces.pymoo.Optimizer_pymoo.initialize", "iwopy.interfaces.pymoo.Optimizer_pymoo.print_info", "iwopy.interfaces.pymoo.Optimizer_pymoo.solve", "iwopy.interfaces.pymoo.SingleObjProblemTemplate", "iwopy.interfaces.pymoo.SingleObjProblemTemplate.__init__", "iwopy.interfaces.pymoo.SingleObjProblemTemplate.finalize", "iwopy.interfaces.pymoo.SingleObjProblemTemplate.get_class", "iwopy.interfaces.pymoo.load", "iwopy.interfaces.scipy.Optimizer_scipy", "iwopy.interfaces.scipy.Optimizer_scipy.__init__", "iwopy.interfaces.scipy.Optimizer_scipy.initialize", "iwopy.interfaces.scipy.Optimizer_scipy.print_info", "iwopy.interfaces.scipy.Optimizer_scipy.solve", "iwopy.optimizers.GG", "iwopy.optimizers.GG.__init__", "iwopy.optimizers.GG.initialize", "iwopy.optimizers.GG.print_info", "iwopy.optimizers.GG.solve", "iwopy.utils.RegularDiscretizationGrid", "iwopy.utils.RegularDiscretizationGrid.INT_INF", "iwopy.utils.RegularDiscretizationGrid.__init__", "iwopy.utils.RegularDiscretizationGrid.all_gridpoints", "iwopy.utils.RegularDiscretizationGrid.apply_tol", "iwopy.utils.RegularDiscretizationGrid.apply_tols", "iwopy.utils.RegularDiscretizationGrid.deriv_coeffs", "iwopy.utils.RegularDiscretizationGrid.deriv_coeffs_gridpoints", "iwopy.utils.RegularDiscretizationGrid.find_grid_inds", "iwopy.utils.RegularDiscretizationGrid.find_gridpoints", "iwopy.utils.RegularDiscretizationGrid.find_ingrid", "iwopy.utils.RegularDiscretizationGrid.get_cell", "iwopy.utils.RegularDiscretizationGrid.get_cells", "iwopy.utils.RegularDiscretizationGrid.get_corner", "iwopy.utils.RegularDiscretizationGrid.get_corners", "iwopy.utils.RegularDiscretizationGrid.gp2i", "iwopy.utils.RegularDiscretizationGrid.gpts2inds", "iwopy.utils.RegularDiscretizationGrid.grad_coeffs", "iwopy.utils.RegularDiscretizationGrid.grad_coeffs_gridpoints", "iwopy.utils.RegularDiscretizationGrid.i2gp", "iwopy.utils.RegularDiscretizationGrid.in_grid", "iwopy.utils.RegularDiscretizationGrid.inds2gpts", "iwopy.utils.RegularDiscretizationGrid.interpolation_coeffs_point", "iwopy.utils.RegularDiscretizationGrid.interpolation_coeffs_points", "iwopy.utils.RegularDiscretizationGrid.is_gridi", "iwopy.utils.RegularDiscretizationGrid.is_gridpoint", "iwopy.utils.RegularDiscretizationGrid.n_dims", "iwopy.utils.RegularDiscretizationGrid.n_points", "iwopy.utils.RegularDiscretizationGrid.p_max", "iwopy.utils.RegularDiscretizationGrid.p_min", "iwopy.utils.RegularDiscretizationGrid.print_info", "iwopy.utils.import_module", "iwopy.utils.suppress_stdout", "iwopy.wrappers.DiscretizeRegGrid", "iwopy.wrappers.DiscretizeRegGrid.__init__", "iwopy.wrappers.DiscretizeRegGrid.apply_individual", "iwopy.wrappers.DiscretizeRegGrid.apply_population", "iwopy.wrappers.DiscretizeRegGrid.evaluate_individual", "iwopy.wrappers.DiscretizeRegGrid.evaluate_population", "iwopy.wrappers.DiscretizeRegGrid.finalize_individual", "iwopy.wrappers.DiscretizeRegGrid.finalize_population", "iwopy.wrappers.DiscretizeRegGrid.initialize", "iwopy.wrappers.LocalFD", "iwopy.wrappers.LocalFD.__init__", "iwopy.wrappers.LocalFD.calc_gradients", "iwopy.wrappers.LocalFD.initialize", "iwopy.wrappers.ProblemWrapper", "iwopy.wrappers.ProblemWrapper.__init__", "iwopy.wrappers.ProblemWrapper.apply_individual", "iwopy.wrappers.ProblemWrapper.apply_population", "iwopy.wrappers.ProblemWrapper.finalize_individual", "iwopy.wrappers.ProblemWrapper.finalize_population", "iwopy.wrappers.ProblemWrapper.initial_values_float", "iwopy.wrappers.ProblemWrapper.initial_values_int", "iwopy.wrappers.ProblemWrapper.initialize", "iwopy.wrappers.ProblemWrapper.max_values_float", "iwopy.wrappers.ProblemWrapper.max_values_int", "iwopy.wrappers.ProblemWrapper.min_values_float", "iwopy.wrappers.ProblemWrapper.min_values_int", "iwopy.wrappers.ProblemWrapper.var_names_float", "iwopy.wrappers.ProblemWrapper.var_names_int", "iwopy.wrappers.SimpleConstraint", "iwopy.wrappers.SimpleConstraint.__init__", "iwopy.wrappers.SimpleConstraint.ana_deriv", "iwopy.wrappers.SimpleConstraint.calc_individual", "iwopy.wrappers.SimpleConstraint.calc_population", "iwopy.wrappers.SimpleConstraint.f", "iwopy.wrappers.SimpleConstraint.g", "iwopy.wrappers.SimpleConstraint.get_bounds", "iwopy.wrappers.SimpleConstraint.n_components", "iwopy.wrappers.SimpleObjective", "iwopy.wrappers.SimpleObjective.__init__", "iwopy.wrappers.SimpleObjective.ana_deriv", "iwopy.wrappers.SimpleObjective.calc_individual", "iwopy.wrappers.SimpleObjective.calc_population", "iwopy.wrappers.SimpleObjective.f", "iwopy.wrappers.SimpleObjective.g", "iwopy.wrappers.SimpleObjective.has_ana_derivs", "iwopy.wrappers.SimpleObjective.maximize", "iwopy.wrappers.SimpleObjective.n_components", "iwopy.wrappers.SimpleProblem", "iwopy.wrappers.SimpleProblem.__init__", "iwopy.wrappers.SimpleProblem.initial_values_float", "iwopy.wrappers.SimpleProblem.initial_values_int", "iwopy.wrappers.SimpleProblem.max_values_float", "iwopy.wrappers.SimpleProblem.max_values_int", "iwopy.wrappers.SimpleProblem.min_values_float", "iwopy.wrappers.SimpleProblem.min_values_int", "iwopy.wrappers.SimpleProblem.var_names_float", "iwopy.wrappers.SimpleProblem.var_names_int", "API", "iwopy.benchmarks", "iwopy.core", "iwopy.interfaces", "iwopy.interfaces.pygmo", "iwopy.interfaces.pymoo", "iwopy.interfaces.scipy", "iwopy", "iwopy.optimizers", "iwopy.utils", "iwopy.wrappers", "Citation", "Examples", "Welcome to IWOPY", "Installation", "Electrostatic potential minimization", "Mixed problems", "Multi objective geometric chain", "Simple function minimization", "Testing", "Wind farm layout optimization"], "titleterms": {"0": 0, "1": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "alpha": 0, "api": 283, "attribut": [5, 11, 13, 19, 24, 34, 41, 59, 75, 84, 89, 125, 130, 135, 168, 172, 178, 183, 188, 193, 226, 235, 239], "benchmark": 284, "beta": 0, "branin": 284, "chain": 300, "citat": 294, "conda": 297, "content": 296, "contribut": 296, "core": 285, "develop": 297, "electrostat": 298, "environ": 297, "exampl": [215, 216, 225, 295], "farm": 303, "function": 301, "geometr": 300, "histori": 0, "instal": 297, "interfac": [286, 287, 288, 289], "iwopi": [284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296], "journal": 294, "layout": 303, "member": [1, 5, 7, 11, 13, 19, 24, 34, 39, 41, 59, 75, 84, 89, 123, 125, 128, 130, 135, 156, 160, 168, 172, 178, 183, 188, 193, 226, 235, 239, 254, 263, 273], "minim": [298, 301], "mix": 299, "multi": 300, "object": 300, "optim": [291, 303], "option": 297, "paper": 294, "paramet": [2, 6, 8, 12, 14, 16, 17, 20, 21, 22, 25, 27, 28, 29, 30, 32, 33, 35, 38, 42, 43, 44, 45, 47, 48, 49, 53, 54, 60, 61, 62, 63, 64, 65, 66, 68, 71, 72, 76, 77, 78, 79, 80, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 107, 119, 120, 124, 126, 129, 131, 132, 134, 136, 138, 155, 169, 170, 173, 174, 175, 177, 179, 180, 182, 184, 185, 187, 189, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 247, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 274], "paramt": 37, "pip": 297, "potenti": 298, "prepar": 297, "problem": 299, "public": [1, 5, 7, 11, 13, 19, 24, 34, 39, 41, 59, 75, 84, 89, 123, 125, 128, 130, 135, 156, 160, 168, 172, 178, 183, 188, 193, 226, 235, 239, 254, 263, 273], "pygmo": 287, "pymoo": 288, "python": 297, "requir": 297, "return": [15, 18, 22, 23, 27, 28, 29, 30, 31, 37, 38, 40, 43, 44, 45, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 77, 78, 79, 81, 82, 83, 88, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 129, 134, 138, 170, 174, 177, 180, 187, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 228, 229, 230, 231, 232, 233, 237, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282], "rosenbrock": 284, "scipi": 289, "simpl": 301, "standard": 297, "support": 296, "test": 302, "user": 297, "util": 292, "v0": 0, "via": 297, "virtual": 297, "welcom": 296, "wind": 303, "wrapper": 293}})